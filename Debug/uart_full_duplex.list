
uart_full_duplex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e34  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000019  20000000  08008178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000019c  2000001c  08008191  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b8  08008191  000201b8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020019  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001784b  00000000  00000000  0002004f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000287f  00000000  00000000  0003789a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012a8  00000000  00000000  0003a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011c0  00000000  00000000  0003b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000324b8  00000000  00000000  0003c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016d80  00000000  00000000  0006ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141710  00000000  00000000  000857c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c6ed0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004fa4  00000000  00000000  001c6f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000001c 	.word	0x2000001c
 8000250:	00000000 	.word	0x00000000
 8000254:	08008050 	.word	0x08008050

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000020 	.word	0x20000020
 8000270:	08008050 	.word	0x08008050

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc6c 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f846 	bl	800062c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005a0:	f000 f8a0 	bl	80006e4 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f95e 	bl	8000864 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f8c0 	bl	800072c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f90c 	bl	80007c8 <MX_USART2_UART_Init>
  MX_ICACHE_Init();
 80005b0:	f000 f8a8 	bl	8000704 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  memset(rxdata_1, 0, sizeof(rxdata_1));
 80005b4:	2205      	movs	r2, #5
 80005b6:	2100      	movs	r1, #0
 80005b8:	4814      	ldr	r0, [pc, #80]	; (800060c <main+0x78>)
 80005ba:	f007 fd41 	bl	8008040 <memset>
  memset(rxdata_2, 0, sizeof(rxdata_2));
 80005be:	2205      	movs	r2, #5
 80005c0:	2100      	movs	r1, #0
 80005c2:	4813      	ldr	r0, [pc, #76]	; (8000610 <main+0x7c>)
 80005c4:	f007 fd3c 	bl	8008040 <memset>


  HAL_UART_Receive_IT(&huart1, rxdata_1,sizeof(rxdata_1));
 80005c8:	2205      	movs	r2, #5
 80005ca:	4910      	ldr	r1, [pc, #64]	; (800060c <main+0x78>)
 80005cc:	4811      	ldr	r0, [pc, #68]	; (8000614 <main+0x80>)
 80005ce:	f005 fd95 	bl	80060fc <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart2, txdata_2,sizeof(rxdata_2));//usart2 ->usart1 correct
 80005d2:	2205      	movs	r2, #5
 80005d4:	4910      	ldr	r1, [pc, #64]	; (8000618 <main+0x84>)
 80005d6:	4811      	ldr	r0, [pc, #68]	; (800061c <main+0x88>)
 80005d8:	f005 fcd8 	bl	8005f8c <HAL_UART_Transmit_IT>
  while(tc_comp2!=1)
 80005dc:	bf00      	nop
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <main+0x8c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d1fb      	bne.n	80005de <main+0x4a>
  {}

  HAL_UART_Receive_IT(&huart2, rxdata_2,sizeof(rxdata_2));
 80005e6:	2205      	movs	r2, #5
 80005e8:	4909      	ldr	r1, [pc, #36]	; (8000610 <main+0x7c>)
 80005ea:	480c      	ldr	r0, [pc, #48]	; (800061c <main+0x88>)
 80005ec:	f005 fd86 	bl	80060fc <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, txdata_1,sizeof(txdata_1));//usart2 ->usart1 correct+
 80005f0:	2205      	movs	r2, #5
 80005f2:	490c      	ldr	r1, [pc, #48]	; (8000624 <main+0x90>)
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <main+0x80>)
 80005f6:	f005 fcc9 	bl	8005f8c <HAL_UART_Transmit_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <main+0x94>)
 80005fe:	f001 f821 	bl	8001644 <HAL_GPIO_TogglePin>

	  HAL_Delay(1000);
 8000602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000606:	f000 fc83 	bl	8000f10 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800060a:	e7f6      	b.n	80005fa <main+0x66>
 800060c:	20000158 	.word	0x20000158
 8000610:	20000160 	.word	0x20000160
 8000614:	20000038 	.word	0x20000038
 8000618:	20000008 	.word	0x20000008
 800061c:	200000c8 	.word	0x200000c8
 8000620:	20000165 	.word	0x20000165
 8000624:	20000000 	.word	0x20000000
 8000628:	42020800 	.word	0x42020800

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09e      	sub	sp, #120	; 0x78
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2260      	movs	r2, #96	; 0x60
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f007 fd00 	bl	8008040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
 800064e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000650:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000654:	f001 f840 	bl	80016d8 <HAL_PWREx_ControlVoltageScaling>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800065e:	f000 fa05 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000662:	2310      	movs	r3, #16
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800066e:	2300      	movs	r3, #0
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000676:	2301      	movs	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800067a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000684:	230a      	movs	r3, #10
 8000686:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000690:	2301      	movs	r3, #1
 8000692:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000694:	230c      	movs	r3, #12
 8000696:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 f90b 	bl	80018bc <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006ac:	f000 f9de 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	231f      	movs	r3, #31
 80006b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2303      	movs	r3, #3
 80006b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	2104      	movs	r1, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 ffcb 	bl	8002668 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006d8:	f000 f9c8 	bl	8000a6c <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3778      	adds	r7, #120	; 0x78
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80006e8:	f001 f8c8 	bl	800187c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006ec:	f001 f8d6 	bl	800189c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80006f0:	2002      	movs	r0, #2
 80006f2:	f001 f873 	bl	80017dc <HAL_PWREx_ConfigSupply>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80006fc:	f000 f9b6 	bl	8000a6c <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 ffb5 	bl	8001678 <HAL_ICACHE_ConfigAssociativityMode>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000714:	f000 f9aa 	bl	8000a6c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000718:	f000 ffce 	bl	80016b8 <HAL_ICACHE_Enable>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000722:	f000 f9a3 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000732:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <MX_USART1_UART_Init+0x98>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000774:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 8000776:	f005 fbb9 	bl	8005eec <HAL_UART_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000780:	f000 f974 	bl	8000a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_7_8) != HAL_OK)
 8000784:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 800078a:	f007 fb6a 	bl	8007e62 <HAL_UARTEx_SetTxFifoThreshold>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000794:	f000 f96a 	bl	8000a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_7_8) != HAL_OK)
 8000798:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800079c:	4808      	ldr	r0, [pc, #32]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 800079e:	f007 fb9e 	bl	8007ede <HAL_UARTEx_SetRxFifoThreshold>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80007a8:	f000 f960 	bl	8000a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_USART1_UART_Init+0x94>)
 80007ae:	f007 fb1f 	bl	8007df0 <HAL_UARTEx_DisableFifoMode>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80007b8:	f000 f958 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000038 	.word	0x20000038
 80007c4:	40013800 	.word	0x40013800

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007ce:	4a24      	ldr	r2, [pc, #144]	; (8000860 <MX_USART2_UART_Init+0x98>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART2_UART_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000812:	f005 fb6b 	bl	8005eec <HAL_UART_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800081c:	f000 f926 	bl	8000a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_7_8) != HAL_OK)
 8000820:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000826:	f007 fb1c 	bl	8007e62 <HAL_UARTEx_SetTxFifoThreshold>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000830:	f000 f91c 	bl	8000a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_7_8) != HAL_OK)
 8000834:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x94>)
 800083a:	f007 fb50 	bl	8007ede <HAL_UARTEx_SetRxFifoThreshold>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000844:	f000 f912 	bl	8000a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_USART2_UART_Init+0x94>)
 800084a:	f007 fad1 	bl	8007df0 <HAL_UARTEx_DisableFifoMode>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000854:	f000 f90a 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000c8 	.word	0x200000c8
 8000860:	40004400 	.word	0x40004400

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b65      	ldr	r3, [pc, #404]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 800087c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000880:	4a63      	ldr	r2, [pc, #396]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800088a:	4b61      	ldr	r3, [pc, #388]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 800088c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 800089a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800089e:	4a5c      	ldr	r2, [pc, #368]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008a8:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 80008aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 80008b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008bc:	4a54      	ldr	r2, [pc, #336]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008c6:	4b52      	ldr	r3, [pc, #328]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 80008c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d4:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 80008d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008da:	4a4d      	ldr	r2, [pc, #308]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008e4:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <MX_GPIO_Init+0x1ac>)
 80008e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2104      	movs	r1, #4
 80008f6:	4847      	ldr	r0, [pc, #284]	; (8000a14 <MX_GPIO_Init+0x1b0>)
 80008f8:	f000 fe8c 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <MX_GPIO_Init+0x1b4>)
 8000902:	f000 fe87 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2120      	movs	r1, #32
 800090a:	4844      	ldr	r0, [pc, #272]	; (8000a1c <MX_GPIO_Init+0x1b8>)
 800090c:	f000 fe82 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <MX_GPIO_Init+0x1bc>)
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	483c      	ldr	r0, [pc, #240]	; (8000a18 <MX_GPIO_Init+0x1b4>)
 8000926:	f000 fc9d 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800092a:	2304      	movs	r3, #4
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	2303      	movs	r3, #3
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4836      	ldr	r0, [pc, #216]	; (8000a18 <MX_GPIO_Init+0x1b4>)
 800093e:	f000 fc91 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000942:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4831      	ldr	r0, [pc, #196]	; (8000a1c <MX_GPIO_Init+0x1b8>)
 8000958:	f000 fc84 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800095c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000962:	2303      	movs	r3, #3
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	482a      	ldr	r0, [pc, #168]	; (8000a1c <MX_GPIO_Init+0x1b8>)
 8000972:	f000 fc77 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000976:	2304      	movs	r3, #4
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <MX_GPIO_Init+0x1b0>)
 800098e:	f000 fc69 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	481b      	ldr	r0, [pc, #108]	; (8000a18 <MX_GPIO_Init+0x1b4>)
 80009aa:	f000 fc5b 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80009c0:	230a      	movs	r3, #10
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4816      	ldr	r0, [pc, #88]	; (8000a24 <MX_GPIO_Init+0x1c0>)
 80009cc:	f000 fc4a 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	480f      	ldr	r0, [pc, #60]	; (8000a24 <MX_GPIO_Init+0x1c0>)
 80009e6:	f000 fc3d 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80009ea:	2320      	movs	r3, #32
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_GPIO_Init+0x1b8>)
 8000a02:	f000 fc2f 	bl	8001264 <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	46020c00 	.word	0x46020c00
 8000a14:	42021800 	.word	0x42021800
 8000a18:	42020800 	.word	0x42020800
 8000a1c:	42020400 	.word	0x42020400
 8000a20:	10110000 	.word	0x10110000
 8000a24:	42020000 	.word	0x42020000

08000a28 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	tc_comp2 = 1;
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_UART_TxCpltCallback+0x1c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
	}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000165 	.word	0x20000165

08000a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5a:	f000 fa39 	bl	8000ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40014800 	.word	0x40014800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_MspInit+0x34>)
 8000a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a84:	4a09      	ldr	r2, [pc, #36]	; (8000aac <HAL_MspInit+0x34>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <HAL_MspInit+0x34>)
 8000a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000a9c:	2004      	movs	r0, #4
 8000a9e:	f000 fb08 	bl	80010b2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	46020c00 	.word	0x46020c00

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0be      	sub	sp, #248	; 0xf8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	22c8      	movs	r2, #200	; 0xc8
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f007 fab5 	bl	8008040 <memset>
  if(huart->Instance==USART1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a54      	ldr	r2, [pc, #336]	; (8000c2c <HAL_UART_MspInit+0x17c>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d14e      	bne.n	8000b7e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ae0:	f04f 0201 	mov.w	r2, #1
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000aec:	2300      	movs	r3, #0
 8000aee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 f9c5 	bl	8002e84 <HAL_RCCEx_PeriphCLKConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b00:	f7ff ffb4 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b04:	4b4a      	ldr	r3, [pc, #296]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000b06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b0a:	4a49      	ldr	r2, [pc, #292]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000b14:	4b46      	ldr	r3, [pc, #280]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b28:	4a41      	ldr	r2, [pc, #260]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4833      	ldr	r0, [pc, #204]	; (8000c34 <HAL_UART_MspInit+0x184>)
 8000b68:	f000 fb7c 	bl	8001264 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	203d      	movs	r0, #61	; 0x3d
 8000b72:	f000 faa9 	bl	80010c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b76:	203d      	movs	r0, #61	; 0x3d
 8000b78:	f000 fac0 	bl	80010fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7c:	e051      	b.n	8000c22 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART2)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <HAL_UART_MspInit+0x188>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d14c      	bne.n	8000c22 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b88:	f04f 0202 	mov.w	r2, #2
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 f971 	bl	8002e84 <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8000ba8:	f7ff ff60 	bl	8000a6c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bd0:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_UART_MspInit+0x180>)
 8000bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000be8:	230c      	movs	r3, #12
 8000bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c00:	2307      	movs	r3, #7
 8000c02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <HAL_UART_MspInit+0x184>)
 8000c0e:	f000 fb29 	bl	8001264 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	203e      	movs	r0, #62	; 0x3e
 8000c18:	f000 fa56 	bl	80010c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c1c:	203e      	movs	r0, #62	; 0x3e
 8000c1e:	f000 fa6d 	bl	80010fc <HAL_NVIC_EnableIRQ>
}
 8000c22:	bf00      	nop
 8000c24:	37f8      	adds	r7, #248	; 0xf8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40013800 	.word	0x40013800
 8000c30:	46020c00 	.word	0x46020c00
 8000c34:	42020000 	.word	0x42020000
 8000c38:	40004400 	.word	0x40004400

08000c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000c4c:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <HAL_InitTick+0xcc>)
 8000c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <HAL_InitTick+0xcc>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <HAL_InitTick+0xcc>)
 8000c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c6a:	f107 0210 	add.w	r2, r7, #16
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 f847 	bl	8002d08 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c7a:	f002 f81d 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 8000c7e:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c82:	4a22      	ldr	r2, [pc, #136]	; (8000d0c <HAL_InitTick+0xd0>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	0c9b      	lsrs	r3, r3, #18
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <HAL_InitTick+0xd4>)
 8000c90:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <HAL_InitTick+0xd8>)
 8000c92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <HAL_InitTick+0xd4>)
 8000c96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c9a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <HAL_InitTick+0xd4>)
 8000c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_InitTick+0xd4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_InitTick+0xd4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000cae:	4818      	ldr	r0, [pc, #96]	; (8000d10 <HAL_InitTick+0xd4>)
 8000cb0:	f004 fd32 	bl	8005718 <HAL_TIM_Base_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000cba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d118      	bne.n	8000cf4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000cc2:	4813      	ldr	r0, [pc, #76]	; (8000d10 <HAL_InitTick+0xd4>)
 8000cc4:	f004 fd8a 	bl	80057dc <HAL_TIM_Base_Start_IT>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000cce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d10e      	bne.n	8000cf4 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d808      	bhi.n	8000cee <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	2047      	movs	r0, #71	; 0x47
 8000ce2:	f000 f9f1 	bl	80010c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_InitTick+0xdc>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	e002      	b.n	8000cf4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000cf4:	2047      	movs	r0, #71	; 0x47
 8000cf6:	f000 fa01 	bl	80010fc <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000cfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3738      	adds	r7, #56	; 0x38
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	46020c00 	.word	0x46020c00
 8000d0c:	431bde83 	.word	0x431bde83
 8000d10:	20000168 	.word	0x20000168
 8000d14:	40014800 	.word	0x40014800
 8000d18:	20000014 	.word	0x20000014

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <USART1_IRQHandler+0x10>)
 8000d7a:	f005 fa2b 	bl	80061d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000038 	.word	0x20000038

08000d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART2_IRQHandler+0x10>)
 8000d8e:	f005 fa21 	bl	80061d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000c8 	.word	0x200000c8

08000d9c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM17_IRQHandler+0x10>)
 8000da2:	f004 fdbb 	bl	800591c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000168 	.word	0x20000168

08000db0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <SystemInit+0x68>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <SystemInit+0x68>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <SystemInit+0x6c>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <SystemInit+0x6c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <SystemInit+0x6c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <SystemInit+0x6c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <SystemInit+0x6c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <SystemInit+0x6c>)
 8000de2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000de6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dea:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <SystemInit+0x6c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <SystemInit+0x6c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <SystemInit+0x6c>)
 8000df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <SystemInit+0x6c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SystemInit+0x68>)
 8000e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00
 8000e1c:	46020c00 	.word	0x46020c00

08000e20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e26:	e003      	b.n	8000e30 <LoopCopyDataInit>

08000e28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e2e:	3104      	adds	r1, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e38:	d3f6      	bcc.n	8000e28 <CopyDataInit>
	ldr	r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e3c:	e002      	b.n	8000e44 <LoopFillZerobss>

08000e3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e40:	f842 3b04 	str.w	r3, [r2], #4

08000e44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <LoopForever+0x16>)
	cmp	r2, r3
 8000e46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e48:	d3f9      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4a:	f7ff ffb1 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f007 f8d3 	bl	8007ff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e52:	f7ff fb9f 	bl	8000594 <main>

08000e56 <LoopForever>:

LoopForever:
    b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e58:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000e5c:	08008178 	.word	0x08008178
	ldr	r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e64:	20000019 	.word	0x20000019
	ldr	r2, =_sbss
 8000e68:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000e6c:	200001b8 	.word	0x200001b8

08000e70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_Init+0x4c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_Init+0x4c>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f914 	bl	80010b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e8a:	f001 fddf 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_Init+0x50>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	490b      	ldr	r1, [pc, #44]	; (8000ec8 <HAL_Init+0x54>)
 8000e9a:	5ccb      	ldrb	r3, [r1, r3]
 8000e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x58>)
 8000ea2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea4:	2007      	movs	r0, #7
 8000ea6:	f7ff fec9 	bl	8000c3c <HAL_InitTick>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e002      	b.n	8000eba <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fde0 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40022000 	.word	0x40022000
 8000ec4:	46020c00 	.word	0x46020c00
 8000ec8:	08008068 	.word	0x08008068
 8000ecc:	20000010 	.word	0x20000010

08000ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000018 	.word	0x20000018
 8000ef4:	200001b4 	.word	0x200001b4

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200001b4 	.word	0x200001b4

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000018 	.word	0x20000018

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff4c 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d6:	f7ff ff63 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f7ff ffb3 	bl	800104c <NVIC_EncodePriority>
 80010e6:	4602      	mov	r2, r0
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff82 	bl	8000ff8 <__NVIC_SetPriority>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff56 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001120:	f7ff feea 	bl	8000ef8 <HAL_GetTick>
 8001124:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e06b      	b.n	8001208 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d008      	beq.n	800114e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2220      	movs	r2, #32
 8001140:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e05c      	b.n	8001208 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	695a      	ldr	r2, [r3, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0204 	orr.w	r2, r2, #4
 800115c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2205      	movs	r2, #5
 8001162:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001166:	e020      	b.n	80011aa <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001168:	f7ff fec6 	bl	8000ef8 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b05      	cmp	r3, #5
 8001174:	d919      	bls.n	80011aa <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	f043 0210 	orr.w	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2203      	movs	r2, #3
 8001186:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800119a:	2201      	movs	r2, #1
 800119c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e02e      	b.n	8001208 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0d7      	beq.n	8001168 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	695a      	ldr	r2, [r3, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0202 	orr.w	r2, r2, #2
 80011c6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2204      	movs	r2, #4
 80011cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80011d8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f2:	2201      	movs	r2, #1
 80011f4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e019      	b.n	8001256 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d004      	beq.n	8001238 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2220      	movs	r2, #32
 8001232:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e00e      	b.n	8001256 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2204      	movs	r2, #4
 800123c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001276:	e1ba      	b.n	80015ee <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 81aa 	beq.w	80015e8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a55      	ldr	r2, [pc, #340]	; (80013ec <HAL_GPIO_Init+0x188>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d15d      	bne.n	8001358 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80012a2:	2201      	movs	r2, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x18c>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80012d4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80012d6:	4a46      	ldr	r2, [pc, #280]	; (80013f0 <HAL_GPIO_Init+0x18c>)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	3208      	adds	r2, #8
 80012ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	4013      	ands	r3, r2
 8001304:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220b      	movs	r2, #11
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	4313      	orrs	r3, r2
 8001318:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	3208      	adds	r2, #8
 8001322:	69f9      	ldr	r1, [r7, #28]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2202      	movs	r2, #2
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	4313      	orrs	r3, r2
 800134e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e067      	b.n	8001428 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x104>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b12      	cmp	r3, #18
 8001366:	d145      	bne.n	80013f4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4013      	ands	r3, r2
 800138a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f003 020f 	and.w	r2, r3, #15
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69f9      	ldr	r1, [r7, #28]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e01e      	b.n	8001428 <HAL_GPIO_Init+0x1c4>
 80013ea:	bf00      	nop
 80013ec:	46020000 	.word	0x46020000
 80013f0:	080080c0 	.word	0x080080c0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4013      	ands	r3, r2
 800140a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	4313      	orrs	r3, r2
 8001420:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d00b      	beq.n	8001448 <HAL_GPIO_Init+0x1e4>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d007      	beq.n	8001448 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143c:	2b11      	cmp	r3, #17
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b12      	cmp	r3, #18
 8001446:	d130      	bne.n	80014aa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	4013      	ands	r3, r2
 800145e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	4313      	orrs	r3, r2
 8001470:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800147e:	2201      	movs	r2, #1
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	4013      	ands	r3, r2
 800148c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f003 0201 	and.w	r2, r3, #1
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d017      	beq.n	80014e2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d07c      	beq.n	80015e8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80014ee:	4a47      	ldr	r2, [pc, #284]	; (800160c <HAL_GPIO_Init+0x3a8>)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3318      	adds	r3, #24
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	4013      	ands	r3, r2
 8001510:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	0a9a      	lsrs	r2, r3, #10
 8001516:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <HAL_GPIO_Init+0x3ac>)
 8001518:	4013      	ands	r3, r2
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	f002 0203 	and.w	r2, r2, #3
 8001520:	00d2      	lsls	r2, r2, #3
 8001522:	4093      	lsls	r3, r2
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	4313      	orrs	r3, r2
 8001528:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800152a:	4938      	ldr	r1, [pc, #224]	; (800160c <HAL_GPIO_Init+0x3a8>)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3318      	adds	r3, #24
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <HAL_GPIO_Init+0x3a8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	4013      	ands	r3, r2
 8001546:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800155c:	4a2b      	ldr	r2, [pc, #172]	; (800160c <HAL_GPIO_Init+0x3a8>)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_GPIO_Init+0x3a8>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43db      	mvns	r3, r3
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	4013      	ands	r3, r2
 8001570:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001586:	4a21      	ldr	r2, [pc, #132]	; (800160c <HAL_GPIO_Init+0x3a8>)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_GPIO_Init+0x3a8>)
 800158e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001592:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43db      	mvns	r3, r3
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	4013      	ands	r3, r2
 800159c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <HAL_GPIO_Init+0x3a8>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_GPIO_Init+0x3a8>)
 80015bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_GPIO_Init+0x3a8>)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f47f ae3d 	bne.w	8001278 <HAL_GPIO_Init+0x14>
  }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3724      	adds	r7, #36	; 0x24
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	46022000 	.word	0x46022000
 8001610:	002f7f7f 	.word	0x002f7f7f

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001624:	787b      	ldrb	r3, [r7, #1]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001630:	e002      	b.n	8001638 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4013      	ands	r3, r2
 800165c:	041a      	lsls	r2, r3, #16
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43d9      	mvns	r1, r3
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	400b      	ands	r3, r1
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e007      	b.n	80016a6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 0204 	bic.w	r2, r3, #4
 800169e:	4905      	ldr	r1, [pc, #20]	; (80016b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40030400 	.word	0x40030400

080016b8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_ICACHE_Enable+0x1c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_ICACHE_Enable+0x1c>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40030400 	.word	0x40030400

080016d8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80016e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d101      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e057      	b.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d90a      	bls.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800170c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001710:	60d3      	str	r3, [r2, #12]
 8001712:	e007      	b.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800171c:	4925      	ldr	r1, [pc, #148]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a24      	ldr	r2, [pc, #144]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	099b      	lsrs	r3, r3, #6
 8001730:	2232      	movs	r2, #50	; 0x32
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	3301      	adds	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001742:	e002      	b.n	800174a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3b01      	subs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x84>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f3      	bne.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01b      	beq.n	800179a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	2232      	movs	r2, #50	; 0x32
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	4a11      	ldr	r2, [pc, #68]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001780:	e002      	b.n	8001788 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3b01      	subs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f3      	bne.n	8001782 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e000      	b.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	46020800 	.word	0x46020800
 80017b8:	20000010 	.word	0x20000010
 80017bc:	10624dd3 	.word	0x10624dd3

080017c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	46020800 	.word	0x46020800

080017dc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_PWREx_ConfigSupply+0x94>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a22      	ldr	r2, [pc, #136]	; (8001874 <HAL_PWREx_ConfigSupply+0x98>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	2232      	movs	r2, #50	; 0x32
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_PWREx_ConfigSupply+0x98>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d113      	bne.n	8001830 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_PWREx_ConfigSupply+0x9c>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_PWREx_ConfigSupply+0x9c>)
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001814:	e002      	b.n	800181c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3b01      	subs	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_PWREx_ConfigSupply+0x9c>)
 800181e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b02      	cmp	r3, #2
 8001826:	d116      	bne.n	8001856 <HAL_PWREx_ConfigSupply+0x7a>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f3      	bne.n	8001816 <HAL_PWREx_ConfigSupply+0x3a>
 800182e:	e012      	b.n	8001856 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_PWREx_ConfigSupply+0x9c>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_PWREx_ConfigSupply+0x9c>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800183c:	e002      	b.n	8001844 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3b01      	subs	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_PWREx_ConfigSupply+0x9c>)
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <HAL_PWREx_ConfigSupply+0x7a>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f3      	bne.n	800183e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e000      	b.n	8001862 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000010 	.word	0x20000010
 8001874:	10624dd3 	.word	0x10624dd3
 8001878:	46020800 	.word	0x46020800

0800187c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800188a:	6113      	str	r3, [r2, #16]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	46020800 	.word	0x46020800

0800189c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	46020800 	.word	0x46020800

080018bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	; 0x38
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f000 bec3 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d6:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e0:	4b99      	ldr	r3, [pc, #612]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8172 	beq.w	8001bdc <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80018f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_RCC_OscConfig+0x52>
 80018fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001900:	2b0c      	cmp	r3, #12
 8001902:	f040 80e4 	bne.w	8001ace <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	2b01      	cmp	r3, #1
 800190a:	f040 80e0 	bne.w	8001ace <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800190e:	4b8e      	ldr	r3, [pc, #568]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <HAL_RCC_OscConfig+0x6c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	f000 be9a 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800192c:	4b86      	ldr	r3, [pc, #536]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_RCC_OscConfig+0x86>
 8001938:	4b83      	ldr	r3, [pc, #524]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001940:	e005      	b.n	800194e <HAL_RCC_OscConfig+0x92>
 8001942:	4b81      	ldr	r3, [pc, #516]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001948:	041b      	lsls	r3, r3, #16
 800194a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800194e:	4293      	cmp	r3, r2
 8001950:	d255      	bcs.n	80019fe <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10a      	bne.n	800196e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	4618      	mov	r0, r3
 800195e:	f001 fa0b 	bl	8002d78 <RCC_SetFlashLatencyFromMSIRange>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	f000 be77 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800196e:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4a75      	ldr	r2, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001978:	6093      	str	r3, [r2, #8]
 800197a:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	4970      	ldr	r1, [pc, #448]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001994:	d309      	bcc.n	80019aa <HAL_RCC_OscConfig+0xee>
 8001996:	4b6c      	ldr	r3, [pc, #432]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f023 021f 	bic.w	r2, r3, #31
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4969      	ldr	r1, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
 80019a8:	e07e      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1ec>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da0a      	bge.n	80019c8 <HAL_RCC_OscConfig+0x10c>
 80019b2:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	015b      	lsls	r3, r3, #5
 80019c0:	4961      	ldr	r1, [pc, #388]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60cb      	str	r3, [r1, #12]
 80019c6:	e06f      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1ec>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d0:	d30a      	bcc.n	80019e8 <HAL_RCC_OscConfig+0x12c>
 80019d2:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	4959      	ldr	r1, [pc, #356]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60cb      	str	r3, [r1, #12]
 80019e6:	e05f      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1ec>
 80019e8:	4b57      	ldr	r3, [pc, #348]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	03db      	lsls	r3, r3, #15
 80019f6:	4954      	ldr	r1, [pc, #336]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
 80019fc:	e054      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80019fe:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a08:	6093      	str	r3, [r2, #8]
 8001a0a:	4b4f      	ldr	r3, [pc, #316]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	494c      	ldr	r1, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001a24:	d309      	bcc.n	8001a3a <HAL_RCC_OscConfig+0x17e>
 8001a26:	4b48      	ldr	r3, [pc, #288]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f023 021f 	bic.w	r2, r3, #31
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4945      	ldr	r1, [pc, #276]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
 8001a38:	e028      	b.n	8001a8c <HAL_RCC_OscConfig+0x1d0>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da0a      	bge.n	8001a58 <HAL_RCC_OscConfig+0x19c>
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	015b      	lsls	r3, r3, #5
 8001a50:	493d      	ldr	r1, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60cb      	str	r3, [r1, #12]
 8001a56:	e019      	b.n	8001a8c <HAL_RCC_OscConfig+0x1d0>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a60:	d30a      	bcc.n	8001a78 <HAL_RCC_OscConfig+0x1bc>
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	60cb      	str	r3, [r1, #12]
 8001a76:	e009      	b.n	8001a8c <HAL_RCC_OscConfig+0x1d0>
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	03db      	lsls	r3, r3, #15
 8001a86:	4930      	ldr	r1, [pc, #192]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 f96e 	bl	8002d78 <RCC_SetFlashLatencyFromMSIRange>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f000 bdda 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001aa8:	f001 f8d8 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <HAL_RCC_OscConfig+0x290>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f8c3 	bl	8000c3c <HAL_InitTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 808a 	beq.w	8001bda <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8001ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aca:	f000 bdc7 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d066      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ae2:	f7ff fa09 	bl	8000ef8 <HAL_GetTick>
 8001ae6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aea:	f7ff fa05 	bl	8000ef8 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d902      	bls.n	8001afe <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	f000 bdaf 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0ef      	beq.n	8001aea <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001b10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b14:	6093      	str	r3, [r2, #8]
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	4909      	ldr	r1, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001b30:	d30e      	bcc.n	8001b50 <HAL_RCC_OscConfig+0x294>
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f023 021f 	bic.w	r2, r3, #31
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4902      	ldr	r1, [pc, #8]	; (8001b48 <HAL_RCC_OscConfig+0x28c>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
 8001b44:	e04a      	b.n	8001bdc <HAL_RCC_OscConfig+0x320>
 8001b46:	bf00      	nop
 8001b48:	46020c00 	.word	0x46020c00
 8001b4c:	20000014 	.word	0x20000014
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da0a      	bge.n	8001b6e <HAL_RCC_OscConfig+0x2b2>
 8001b58:	4b9b      	ldr	r3, [pc, #620]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	015b      	lsls	r3, r3, #5
 8001b66:	4998      	ldr	r1, [pc, #608]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60cb      	str	r3, [r1, #12]
 8001b6c:	e036      	b.n	8001bdc <HAL_RCC_OscConfig+0x320>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b76:	d30a      	bcc.n	8001b8e <HAL_RCC_OscConfig+0x2d2>
 8001b78:	4b93      	ldr	r3, [pc, #588]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	029b      	lsls	r3, r3, #10
 8001b86:	4990      	ldr	r1, [pc, #576]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e026      	b.n	8001bdc <HAL_RCC_OscConfig+0x320>
 8001b8e:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	03db      	lsls	r3, r3, #15
 8001b9c:	498a      	ldr	r1, [pc, #552]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60cb      	str	r3, [r1, #12]
 8001ba2:	e01b      	b.n	8001bdc <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001ba4:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a87      	ldr	r2, [pc, #540]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001bb0:	f7ff f9a2 	bl	8000ef8 <HAL_GetTick>
 8001bb4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001bb6:	e009      	b.n	8001bcc <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f99e 	bl	8000ef8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d902      	bls.n	8001bcc <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	f000 bd48 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001bcc:	4b7e      	ldr	r3, [pc, #504]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ef      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2fc>
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 8094 	beq.w	8001d12 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_OscConfig+0x340>
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d110      	bne.n	8001c18 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d10d      	bne.n	8001c18 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8083 	beq.w	8001d10 <HAL_RCC_OscConfig+0x454>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d17e      	bne.n	8001d10 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f000 bd22 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d106      	bne.n	8001c30 <HAL_RCC_OscConfig+0x374>
 8001c22:	4b69      	ldr	r3, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a68      	ldr	r2, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e041      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3f8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c38:	d112      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3a4>
 8001c3a:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a62      	ldr	r2, [pc, #392]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b60      	ldr	r3, [pc, #384]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a5f      	ldr	r2, [pc, #380]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a5c      	ldr	r2, [pc, #368]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e029      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3f8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001c68:	d112      	bne.n	8001c90 <HAL_RCC_OscConfig+0x3d4>
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a56      	ldr	r2, [pc, #344]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a53      	ldr	r2, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b51      	ldr	r3, [pc, #324]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a50      	ldr	r2, [pc, #320]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e011      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3f8>
 8001c90:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a4c      	ldr	r2, [pc, #304]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a49      	ldr	r2, [pc, #292]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a46      	ldr	r2, [pc, #280]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001cae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d014      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f91c 	bl	8000ef8 <HAL_GetTick>
 8001cc0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc2:	e009      	b.n	8001cd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f918 	bl	8000ef8 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d902      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	f000 bcc2 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd8:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ef      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x408>
 8001ce4:	e015      	b.n	8001d12 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f907 	bl	8000ef8 <HAL_GetTick>
 8001cea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cec:	e009      	b.n	8001d02 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cee:	f7ff f903 	bl	8000ef8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b64      	cmp	r3, #100	; 0x64
 8001cfa:	d902      	bls.n	8001d02 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f000 bcad 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ef      	bne.n	8001cee <HAL_RCC_OscConfig+0x432>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d066      	beq.n	8001dec <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_OscConfig+0x474>
 8001d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d11a      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d117      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_RCC_OscConfig+0x48e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f000 bc89 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	041b      	lsls	r3, r3, #16
 8001d58:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5e:	e045      	b.n	8001dec <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d024      	beq.n	8001db2 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001d68:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d74:	f7ff f8c0 	bl	8000ef8 <HAL_GetTick>
 8001d78:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7a:	e009      	b.n	8001d90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff f8bc 	bl	8000ef8 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d902      	bls.n	8001d90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	f000 bc66 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ef      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	610b      	str	r3, [r1, #16]
 8001db0:	e01c      	b.n	8001dec <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_RCC_OscConfig+0x50c>)
 8001db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001dbe:	f7ff f89b 	bl	8000ef8 <HAL_GetTick>
 8001dc2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc4:	e00c      	b.n	8001de0 <HAL_RCC_OscConfig+0x524>
 8001dc6:	bf00      	nop
 8001dc8:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f894 	bl	8000ef8 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d902      	bls.n	8001de0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f000 bc3e 	b.w	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de0:	4baf      	ldr	r3, [pc, #700]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ef      	bne.n	8001dcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80c7 	beq.w	8001f88 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e00:	4ba7      	ldr	r3, [pc, #668]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d111      	bne.n	8001e32 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4ba4      	ldr	r3, [pc, #656]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e14:	4aa2      	ldr	r2, [pc, #648]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e1e:	4ba0      	ldr	r3, [pc, #640]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e32:	4b9c      	ldr	r3, [pc, #624]	; (80020a4 <HAL_RCC_OscConfig+0x7e8>)
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001e3e:	4b99      	ldr	r3, [pc, #612]	; (80020a4 <HAL_RCC_OscConfig+0x7e8>)
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	4a98      	ldr	r2, [pc, #608]	; (80020a4 <HAL_RCC_OscConfig+0x7e8>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f855 	bl	8000ef8 <HAL_GetTick>
 8001e4e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff f851 	bl	8000ef8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e3fb      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e64:	4b8f      	ldr	r3, [pc, #572]	; (80020a4 <HAL_RCC_OscConfig+0x7e8>)
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d05f      	beq.n	8001f38 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001e78:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e7e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d037      	beq.n	8001efe <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e3da      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8001eb0:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eb6:	4a7a      	ldr	r2, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001eb8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001ebc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001ec0:	f7ff f81a 	bl	8000ef8 <HAL_GetTick>
 8001ec4:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f816 	bl	8000ef8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e3c0      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001eda:	4b71      	ldr	r3, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ef      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001ee8:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	496a      	ldr	r1, [pc, #424]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001efe:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f04:	4a66      	ldr	r2, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001f0e:	f7fe fff3 	bl	8000ef8 <HAL_GetTick>
 8001f12:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7fe ffef 	bl	8000ef8 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e399      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f28:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ef      	beq.n	8001f16 <HAL_RCC_OscConfig+0x65a>
 8001f36:	e01b      	b.n	8001f70 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f3e:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001f40:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001f44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001f48:	f7fe ffd6 	bl	8000ef8 <HAL_GetTick>
 8001f4c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7fe ffd2 	bl	8000ef8 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e37c      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f62:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ef      	bne.n	8001f50 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f78:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8112 	beq.w	80021ba <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9c:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d111      	bne.n	8001fce <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb0:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fce:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <HAL_RCC_OscConfig+0x7e8>)
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_RCC_OscConfig+0x7e8>)
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	4a31      	ldr	r2, [pc, #196]	; (80020a4 <HAL_RCC_OscConfig+0x7e8>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe ff87 	bl	8000ef8 <HAL_GetTick>
 8001fea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7fe ff83 	bl	8000ef8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e32d      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_RCC_OscConfig+0x7e8>)
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01f      	beq.n	8002058 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8002026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800202a:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8002036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800203a:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002044:	e018      	b.n	8002078 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8002048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002056:	e00f      	b.n	8002078 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 800205a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 800206a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_RCC_OscConfig+0x7e4>)
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d058      	beq.n	8002132 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8002080:	f7fe ff3a 	bl	8000ef8 <HAL_GetTick>
 8002084:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002086:	e00f      	b.n	80020a8 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7fe ff36 	bl	8000ef8 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d906      	bls.n	80020a8 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e2de      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
 800209e:	bf00      	nop
 80020a0:	46020c00 	.word	0x46020c00
 80020a4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a8:	4b9c      	ldr	r3, [pc, #624]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80020aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0e8      	beq.n	8002088 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01b      	beq.n	80020fa <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020c2:	4b96      	ldr	r3, [pc, #600]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80020c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020c8:	4a94      	ldr	r2, [pc, #592]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7fe ff10 	bl	8000ef8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e2b8      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020ea:	4b8c      	ldr	r3, [pc, #560]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80020ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ed      	beq.n	80020d4 <HAL_RCC_OscConfig+0x818>
 80020f8:	e053      	b.n	80021a2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80020fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002100:	4a86      	ldr	r2, [pc, #536]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002106:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7fe fef4 	bl	8000ef8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e29c      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002122:	4b7e      	ldr	r3, [pc, #504]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ed      	bne.n	800210c <HAL_RCC_OscConfig+0x850>
 8002130:	e037      	b.n	80021a2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002132:	f7fe fee1 	bl	8000ef8 <HAL_GetTick>
 8002136:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fedd 	bl	8000ef8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e285      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002150:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1ed      	bne.n	800213a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800215e:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01a      	beq.n	80021a2 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800216c:	4b6b      	ldr	r3, [pc, #428]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 800216e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002172:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002178:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe febb 	bl	8000ef8 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e263      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800219a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ed      	bne.n	800217e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4b5c      	ldr	r3, [pc, #368]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80021ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b0:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80021b2:	f023 0304 	bic.w	r3, r3, #4
 80021b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d036      	beq.n	8002234 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d019      	beq.n	8002202 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80021ce:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80021d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021da:	f7fe fe8d 	bl	8000ef8 <HAL_GetTick>
 80021de:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e2:	f7fe fe89 	bl	8000ef8 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e233      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021f4:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x926>
 8002200:	e018      	b.n	8002234 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a45      	ldr	r2, [pc, #276]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800220c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800220e:	f7fe fe73 	bl	8000ef8 <HAL_GetTick>
 8002212:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002216:	f7fe fe6f 	bl	8000ef8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e219      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002228:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b00      	cmp	r3, #0
 800223e:	d036      	beq.n	80022ae <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	2b00      	cmp	r3, #0
 8002246:	d019      	beq.n	800227c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002248:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a33      	ldr	r2, [pc, #204]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 800224e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002252:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002254:	f7fe fe50 	bl	8000ef8 <HAL_GetTick>
 8002258:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800225c:	f7fe fe4c 	bl	8000ef8 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e1f6      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x9a0>
 800227a:	e018      	b.n	80022ae <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002286:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002288:	f7fe fe36 	bl	8000ef8 <HAL_GetTick>
 800228c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002290:	f7fe fe32 	bl	8000ef8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1dc      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d07f      	beq.n	80023ba <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d062      	beq.n	8002388 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80022c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022cc:	6093      	str	r3, [r2, #8]
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	4910      	ldr	r1, [pc, #64]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80022e8:	d309      	bcc.n	80022fe <HAL_RCC_OscConfig+0xa42>
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f023 021f 	bic.w	r2, r3, #31
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4909      	ldr	r1, [pc, #36]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
 80022fc:	e02a      	b.n	8002354 <HAL_RCC_OscConfig+0xa98>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	2b00      	cmp	r3, #0
 8002304:	da0c      	bge.n	8002320 <HAL_RCC_OscConfig+0xa64>
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	015b      	lsls	r3, r3, #5
 8002314:	4901      	ldr	r1, [pc, #4]	; (800231c <HAL_RCC_OscConfig+0xa60>)
 8002316:	4313      	orrs	r3, r2
 8002318:	60cb      	str	r3, [r1, #12]
 800231a:	e01b      	b.n	8002354 <HAL_RCC_OscConfig+0xa98>
 800231c:	46020c00 	.word	0x46020c00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d30a      	bcc.n	8002340 <HAL_RCC_OscConfig+0xa84>
 800232a:	4ba5      	ldr	r3, [pc, #660]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	029b      	lsls	r3, r3, #10
 8002338:	49a1      	ldr	r1, [pc, #644]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800233a:	4313      	orrs	r3, r2
 800233c:	60cb      	str	r3, [r1, #12]
 800233e:	e009      	b.n	8002354 <HAL_RCC_OscConfig+0xa98>
 8002340:	4b9f      	ldr	r3, [pc, #636]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	03db      	lsls	r3, r3, #15
 800234e:	499c      	ldr	r1, [pc, #624]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002354:	4b9a      	ldr	r3, [pc, #616]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a99      	ldr	r2, [pc, #612]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800235a:	f043 0310 	orr.w	r3, r3, #16
 800235e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002360:	f7fe fdca 	bl	8000ef8 <HAL_GetTick>
 8002364:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002368:	f7fe fdc6 	bl	8000ef8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e170      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800237a:	4b91      	ldr	r3, [pc, #580]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0xaac>
 8002386:	e018      	b.n	80023ba <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002388:	4b8d      	ldr	r3, [pc, #564]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a8c      	ldr	r2, [pc, #560]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800238e:	f023 0310 	bic.w	r3, r3, #16
 8002392:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002394:	f7fe fdb0 	bl	8000ef8 <HAL_GetTick>
 8002398:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800239c:	f7fe fdac 	bl	8000ef8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e156      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80023ae:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 814b 	beq.w	800265a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ca:	4b7d      	ldr	r3, [pc, #500]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	f000 80fa 	beq.w	80025cc <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	2b02      	cmp	r3, #2
 80023de:	f040 80cc 	bne.w	800257a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b77      	ldr	r3, [pc, #476]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a76      	ldr	r2, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80023e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023ee:	f7fe fd83 	bl	8000ef8 <HAL_GetTick>
 80023f2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f6:	f7fe fd7f 	bl	8000ef8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e129      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002408:	4b6d      	ldr	r3, [pc, #436]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d111      	bne.n	8002446 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002428:	4a65      	ldr	r2, [pc, #404]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002432:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002440:	2301      	movs	r3, #1
 8002442:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002446:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <HAL_RCC_OscConfig+0xd08>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002452:	d102      	bne.n	800245a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8002454:	2301      	movs	r3, #1
 8002456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800245a:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <HAL_RCC_OscConfig+0xd08>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4a59      	ldr	r2, [pc, #356]	; (80025c4 <HAL_RCC_OscConfig+0xd08>)
 8002460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002464:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002466:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800247a:	3a01      	subs	r2, #1
 800247c:	0212      	lsls	r2, r2, #8
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002484:	430a      	orrs	r2, r1
 8002486:	494e      	ldr	r1, [pc, #312]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002488:	4313      	orrs	r3, r2
 800248a:	628b      	str	r3, [r1, #40]	; 0x28
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800248e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002490:	4b4d      	ldr	r3, [pc, #308]	; (80025c8 <HAL_RCC_OscConfig+0xd0c>)
 8002492:	4013      	ands	r3, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002498:	3a01      	subs	r2, #1
 800249a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024a2:	3a01      	subs	r2, #1
 80024a4:	0252      	lsls	r2, r2, #9
 80024a6:	b292      	uxth	r2, r2
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024ae:	3a01      	subs	r2, #1
 80024b0:	0412      	lsls	r2, r2, #16
 80024b2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80024bc:	3a01      	subs	r2, #1
 80024be:	0612      	lsls	r2, r2, #24
 80024c0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80024c4:	430a      	orrs	r2, r1
 80024c6:	493e      	ldr	r1, [pc, #248]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80024cc:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	4a3b      	ldr	r2, [pc, #236]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80024d2:	f023 0310 	bic.w	r3, r3, #16
 80024d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80024d8:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024e8:	00d2      	lsls	r2, r2, #3
 80024ea:	4935      	ldr	r1, [pc, #212]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	4a32      	ldr	r2, [pc, #200]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f023 020c 	bic.w	r2, r3, #12
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	492d      	ldr	r1, [pc, #180]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800250a:	4313      	orrs	r3, r2
 800250c:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800250e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002512:	2b01      	cmp	r3, #1
 8002514:	d105      	bne.n	8002522 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002516:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_OscConfig+0xd08>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	4a2a      	ldr	r2, [pc, #168]	; (80025c4 <HAL_RCC_OscConfig+0xd08>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002520:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002522:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800252c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002530:	4a23      	ldr	r2, [pc, #140]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002532:	f023 0304 	bic.w	r3, r3, #4
 8002536:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002544:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800254c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002550:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002552:	f7fe fcd1 	bl	8000ef8 <HAL_GetTick>
 8002556:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe fccd 	bl	8000ef8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e077      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0xc9e>
 8002578:	e06f      	b.n	800265a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 8002580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002584:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002586:	f7fe fcb7 	bl	8000ef8 <HAL_GetTick>
 800258a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe fcb3 	bl	8000ef8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e05d      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	4a03      	ldr	r2, [pc, #12]	; (80025c0 <HAL_RCC_OscConfig+0xd04>)
 80025b2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	6293      	str	r3, [r2, #40]	; 0x28
 80025bc:	e04d      	b.n	800265a <HAL_RCC_OscConfig+0xd9e>
 80025be:	bf00      	nop
 80025c0:	46020c00 	.word	0x46020c00
 80025c4:	46020800 	.word	0x46020800
 80025c8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_OscConfig+0xda8>)
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0xda8>)
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d03a      	beq.n	8002656 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0203 	and.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d133      	bne.n	8002656 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d12a      	bne.n	8002656 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	0b1b      	lsrs	r3, r3, #12
 8002604:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d122      	bne.n	8002656 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d11a      	bne.n	8002656 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	0a5b      	lsrs	r3, r3, #9
 8002624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d111      	bne.n	8002656 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d108      	bne.n	8002656 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	0e1b      	lsrs	r3, r3, #24
 8002648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3738      	adds	r7, #56	; 0x38
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	46020c00 	.word	0x46020c00

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e1d9      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b9b      	ldr	r3, [pc, #620]	; (80028ec <HAL_RCC_ClockConfig+0x284>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b98      	ldr	r3, [pc, #608]	; (80028ec <HAL_RCC_ClockConfig+0x284>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 020f 	bic.w	r2, r3, #15
 8002692:	4996      	ldr	r1, [pc, #600]	; (80028ec <HAL_RCC_ClockConfig+0x284>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b94      	ldr	r3, [pc, #592]	; (80028ec <HAL_RCC_ClockConfig+0x284>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e1c1      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d010      	beq.n	80026da <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	4b8c      	ldr	r3, [pc, #560]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d908      	bls.n	80026da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80026c8:	4b89      	ldr	r3, [pc, #548]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	4986      	ldr	r1, [pc, #536]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	4b81      	ldr	r3, [pc, #516]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d909      	bls.n	800270c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80026f8:	4b7d      	ldr	r3, [pc, #500]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	497a      	ldr	r1, [pc, #488]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002708:	4313      	orrs	r3, r2
 800270a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d010      	beq.n	800273a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002724:	429a      	cmp	r2, r3
 8002726:	d908      	bls.n	800273a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	496e      	ldr	r1, [pc, #440]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002736:	4313      	orrs	r3, r2
 8002738:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	4b69      	ldr	r3, [pc, #420]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	429a      	cmp	r2, r3
 8002754:	d908      	bls.n	8002768 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002756:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4963      	ldr	r1, [pc, #396]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002764:	4313      	orrs	r3, r2
 8002766:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80d2 	beq.w	800291a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d143      	bne.n	800280a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d110      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002796:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80027b2:	f7fe fba1 	bl	8000ef8 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80027b8:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <HAL_RCC_ClockConfig+0x28c>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00f      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80027c6:	f7fe fb97 	bl	8000ef8 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e12b      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80027d8:	4b46      	ldr	r3, [pc, #280]	; (80028f4 <HAL_RCC_ClockConfig+0x28c>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f0:	4a3f      	ldr	r2, [pc, #252]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d121      	bne.n	800284a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e112      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d115      	bne.n	800284a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e106      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800282a:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0fa      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283a:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0f2      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4926      	ldr	r1, [pc, #152]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002858:	4313      	orrs	r3, r2
 800285a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800285c:	f7fe fb4c 	bl	8000ef8 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d112      	bne.n	8002890 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7fe fb44 	bl	8000ef8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0d6      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_ClockConfig+0x204>
 800288e:	e044      	b.n	800291a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d112      	bne.n	80028be <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289a:	f7fe fb2d 	bl	8000ef8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0bf      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d1ee      	bne.n	800289a <HAL_RCC_ClockConfig+0x232>
 80028bc:	e02d      	b.n	800291a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d123      	bne.n	800290e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fe fb16 	bl	8000ef8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0a8      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028de:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x260>
 80028ea:	e016      	b.n	800291a <HAL_RCC_ClockConfig+0x2b2>
 80028ec:	40022000 	.word	0x40022000
 80028f0:	46020c00 	.word	0x46020c00
 80028f4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fe fafe 	bl	8000ef8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e090      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800290e:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b04      	cmp	r3, #4
 8002918:	d1ee      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	429a      	cmp	r2, r3
 8002934:	d208      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002936:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f023 020f 	bic.w	r2, r3, #15
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	493d      	ldr	r1, [pc, #244]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <HAL_RCC_ClockConfig+0x3d4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d210      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <HAL_RCC_ClockConfig+0x3d4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 020f 	bic.w	r2, r3, #15
 800295e:	4937      	ldr	r1, [pc, #220]	; (8002a3c <HAL_RCC_ClockConfig+0x3d4>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <HAL_RCC_ClockConfig+0x3d4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e05b      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d010      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002990:	429a      	cmp	r2, r3
 8002992:	d208      	bcs.n	80029a6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002994:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4925      	ldr	r1, [pc, #148]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d209      	bcs.n	80029d8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	4919      	ldr	r1, [pc, #100]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d208      	bcs.n	8002a06 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	490d      	ldr	r1, [pc, #52]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a06:	f000 f821 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	490a      	ldr	r1, [pc, #40]	; (8002a40 <HAL_RCC_ClockConfig+0x3d8>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1c:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x3dc>)
 8002a1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_ClockConfig+0x3e0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe f909 	bl	8000c3c <HAL_InitTick>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	46020c00 	.word	0x46020c00
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	08008068 	.word	0x08008068
 8002a44:	20000010 	.word	0x20000010
 8002a48:	20000014 	.word	0x20000014

08002a4c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b08b      	sub	sp, #44	; 0x2c
 8002a50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5a:	4b7b      	ldr	r3, [pc, #492]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a64:	4b78      	ldr	r3, [pc, #480]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x34>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d121      	bne.n	8002abe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d11e      	bne.n	8002abe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002a80:	4b71      	ldr	r3, [pc, #452]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002a8c:	4b6e      	ldr	r3, [pc, #440]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a92:	0b1b      	lsrs	r3, r3, #12
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9a:	e005      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	0f1b      	lsrs	r3, r3, #28
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aa8:	4a68      	ldr	r2, [pc, #416]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d110      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002abc:	e00d      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002abe:	4b62      	ldr	r3, [pc, #392]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aca:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	e004      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ad6:	4b5e      	ldr	r3, [pc, #376]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ad8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	f040 80ac 	bne.w	8002c3a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ae2:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002aec:	4b56      	ldr	r3, [pc, #344]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3301      	adds	r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002afa:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b06:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	08db      	lsrs	r3, r3, #3
 8002b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8086 	beq.w	8002c36 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0xec>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d022      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x130>
 8002b36:	e043      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b42:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002c54 <HAL_RCC_GetSysClockFreq+0x208>
 8002b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b5a:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b5e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002c58 <HAL_RCC_GetSysClockFreq+0x20c>
 8002b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b76:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002b7a:	e046      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b86:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002c54 <HAL_RCC_GetSysClockFreq+0x208>
 8002b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b9e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002ba2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002c58 <HAL_RCC_GetSysClockFreq+0x20c>
 8002ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bba:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002bbe:	e024      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002be8:	ed97 6a01 	vldr	s12, [r7, #4]
 8002bec:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002c58 <HAL_RCC_GetSysClockFreq+0x20c>
 8002bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c04:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002c08:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	0e1b      	lsrs	r3, r3, #24
 8002c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c14:	3301      	adds	r3, #1
 8002c16:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c2e:	ee17 3a90 	vmov	r3, s15
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	e001      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	372c      	adds	r7, #44	; 0x2c
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	46020c00 	.word	0x46020c00
 8002c4c:	08008080 	.word	0x08008080
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	4b742400 	.word	0x4b742400
 8002c58:	46000000 	.word	0x46000000

08002c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c60:	f7ff fef4 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_RCC_GetHCLKFreq+0x28>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	4906      	ldr	r1, [pc, #24]	; (8002c88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <HAL_RCC_GetHCLKFreq+0x30>)
 8002c78:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <HAL_RCC_GetHCLKFreq+0x30>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	46020c00 	.word	0x46020c00
 8002c88:	08008068 	.word	0x08008068
 8002c8c:	20000010 	.word	0x20000010

08002c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002c94:	f7ff ffe2 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4903      	ldr	r1, [pc, #12]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca6:	5ccb      	ldrb	r3, [r1, r3]
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	46020c00 	.word	0x46020c00
 8002cb4:	08008078 	.word	0x08008078

08002cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002cbc:	f7ff ffce 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4903      	ldr	r1, [pc, #12]	; (8002cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	46020c00 	.word	0x46020c00
 8002cdc:	08008078 	.word	0x08008078

08002ce0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002ce4:	f7ff ffba 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	46020c00 	.word	0x46020c00
 8002d04:	08008078 	.word	0x08008078

08002d08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	221f      	movs	r2, #31
 8002d16:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_RCC_GetClockConfig+0x68>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 0203 	and.w	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_RCC_GetClockConfig+0x68>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f003 020f 	and.w	r2, r3, #15
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_RCC_GetClockConfig+0x68>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <HAL_RCC_GetClockConfig+0x68>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_GetClockConfig+0x68>)
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_RCC_GetClockConfig+0x6c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 020f 	and.w	r2, r3, #15
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	46020c00 	.word	0x46020c00
 8002d74:	40022000 	.word	0x40022000

08002d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d80:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d8e:	f7fe fd17 	bl	80017c0 <HAL_PWREx_GetVoltageRange>
 8002d92:	6178      	str	r0, [r7, #20]
 8002d94:	e019      	b.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9c:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002da6:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002db4:	f7fe fd04 	bl	80017c0 <HAL_PWREx_GetVoltageRange>
 8002db8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc0:	4a2e      	ldr	r2, [pc, #184]	; (8002e7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002dc2:	f023 0304 	bic.w	r3, r3, #4
 8002dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dd0:	d003      	beq.n	8002dda <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd8:	d109      	bne.n	8002dee <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de0:	d202      	bcs.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002de2:	2301      	movs	r3, #1
 8002de4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002de6:	e033      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002dec:	e030      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df4:	d208      	bcs.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d102      	bne.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002dfe:	2303      	movs	r3, #3
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e025      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e035      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0e:	d90f      	bls.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e1c:	d902      	bls.n	8002e24 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	e015      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002e24:	2301      	movs	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	e012      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e00f      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e36:	d109      	bne.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3e:	d102      	bne.n	8002e46 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002e40:	2301      	movs	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	e004      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002e46:	2302      	movs	r3, #2
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e001      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 020f 	bic.w	r2, r3, #15
 8002e58:	4909      	ldr	r1, [pc, #36]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d001      	beq.n	8002e72 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	46020c00 	.word	0x46020c00
 8002e80:	40022000 	.word	0x40022000

08002e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e88:	b0ba      	sub	sp, #232	; 0xe8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f002 0401 	and.w	r4, r2, #1
 8002ea8:	2500      	movs	r5, #0
 8002eaa:	ea54 0305 	orrs.w	r3, r4, r5
 8002eae:	d00b      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002eb0:	4bcb      	ldr	r3, [pc, #812]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb6:	f023 0103 	bic.w	r1, r3, #3
 8002eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec0:	4ac7      	ldr	r2, [pc, #796]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f002 0802 	and.w	r8, r2, #2
 8002ed4:	f04f 0900 	mov.w	r9, #0
 8002ed8:	ea58 0309 	orrs.w	r3, r8, r9
 8002edc:	d00b      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002ede:	4bc0      	ldr	r3, [pc, #768]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee4:	f023 010c 	bic.w	r1, r3, #12
 8002ee8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	4abc      	ldr	r2, [pc, #752]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	f002 0a04 	and.w	sl, r2, #4
 8002f02:	f04f 0b00 	mov.w	fp, #0
 8002f06:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f0a:	d00b      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002f0c:	4bb4      	ldr	r3, [pc, #720]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f12:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	4ab0      	ldr	r2, [pc, #704]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f002 0308 	and.w	r3, r2, #8
 8002f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002f44:	4ba6      	ldr	r3, [pc, #664]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	4aa2      	ldr	r2, [pc, #648]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f56:	430b      	orrs	r3, r1
 8002f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f002 0310 	and.w	r3, r2, #16
 8002f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002f7c:	4b98      	ldr	r3, [pc, #608]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	4a94      	ldr	r2, [pc, #592]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f002 0320 	and.w	r3, r2, #32
 8002fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002faa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002fb4:	4b8a      	ldr	r3, [pc, #552]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fba:	f023 0107 	bic.w	r1, r3, #7
 8002fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc4:	4a86      	ldr	r2, [pc, #536]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	d00b      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002fec:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffc:	4a78      	ldr	r2, [pc, #480]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffe:	430b      	orrs	r3, r1
 8003000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800301a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800301e:	460b      	mov	r3, r1
 8003020:	4313      	orrs	r3, r2
 8003022:	d00b      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003024:	4b6e      	ldr	r3, [pc, #440]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800302a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800302e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003034:	4a6a      	ldr	r2, [pc, #424]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003036:	430b      	orrs	r3, r1
 8003038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800303c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003048:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003052:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003056:	460b      	mov	r3, r1
 8003058:	4313      	orrs	r3, r2
 800305a:	d00b      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800305c:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800305e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a5c      	ldr	r2, [pc, #368]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800306e:	430b      	orrs	r3, r1
 8003070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800308a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800308e:	460b      	mov	r3, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	d00b      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003094:	4b52      	ldr	r3, [pc, #328]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800309e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	4a4e      	ldr	r2, [pc, #312]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a6:	430b      	orrs	r3, r1
 80030a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80030b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80030c6:	460b      	mov	r3, r1
 80030c8:	4313      	orrs	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80030cc:	4b44      	ldr	r3, [pc, #272]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030d2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80030d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030dc:	4a40      	ldr	r2, [pc, #256]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030de:	430b      	orrs	r3, r1
 80030e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80030f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80030fe:	460b      	mov	r3, r1
 8003100:	4313      	orrs	r3, r2
 8003102:	d00b      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800310a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800310e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003114:	4a32      	ldr	r2, [pc, #200]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003116:	430b      	orrs	r3, r1
 8003118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800311c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003132:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d00c      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800313c:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800313e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003142:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800314a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314e:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003150:	430b      	orrs	r3, r1
 8003152:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003162:	67bb      	str	r3, [r7, #120]	; 0x78
 8003164:	2300      	movs	r3, #0
 8003166:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003168:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800316c:	460b      	mov	r3, r1
 800316e:	4313      	orrs	r3, r2
 8003170:	d04f      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	2b80      	cmp	r3, #128	; 0x80
 800317c:	d02d      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x356>
 800317e:	2b80      	cmp	r3, #128	; 0x80
 8003180:	d827      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003182:	2b60      	cmp	r3, #96	; 0x60
 8003184:	d02e      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003186:	2b60      	cmp	r3, #96	; 0x60
 8003188:	d823      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d006      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d81f      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003196:	2b20      	cmp	r3, #32
 8003198:	d011      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800319a:	e01a      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	4a0f      	ldr	r2, [pc, #60]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031a8:	e01d      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ae:	3308      	adds	r3, #8
 80031b0:	4618      	mov	r0, r3
 80031b2:	f002 f981 	bl	80054b8 <RCCEx_PLL2_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031bc:	e013      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031c2:	332c      	adds	r3, #44	; 0x2c
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fa0f 	bl	80055e8 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031d0:	e009      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80031d8:	e005      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80031da:	bf00      	nop
 80031dc:	e003      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80031de:	bf00      	nop
 80031e0:	46020c00 	.word	0x46020c00
        break;
 80031e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10d      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80031ee:	4bb6      	ldr	r3, [pc, #728]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80031f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80031f4:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80031f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003200:	4ab1      	ldr	r2, [pc, #708]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003202:	430b      	orrs	r3, r1
 8003204:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800320e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800321e:	673b      	str	r3, [r7, #112]	; 0x70
 8003220:	2300      	movs	r3, #0
 8003222:	677b      	str	r3, [r7, #116]	; 0x74
 8003224:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003228:	460b      	mov	r3, r1
 800322a:	4313      	orrs	r3, r2
 800322c:	d053      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800322e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323a:	d033      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003240:	d82c      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003246:	d02f      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800324c:	d826      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800324e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003252:	d008      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003258:	d820      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	d011      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003264:	e01a      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003266:	4b98      	ldr	r3, [pc, #608]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	4a97      	ldr	r2, [pc, #604]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003272:	e01a      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003278:	3308      	adds	r3, #8
 800327a:	4618      	mov	r0, r3
 800327c:	f002 f91c 	bl	80054b8 <RCCEx_PLL2_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003286:	e010      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800328c:	332c      	adds	r3, #44	; 0x2c
 800328e:	4618      	mov	r0, r3
 8003290:	f002 f9aa 	bl	80055e8 <RCCEx_PLL3_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800329a:	e006      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80032a2:	e002      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80032a4:	bf00      	nop
 80032a6:	e000      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80032a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80032b2:	4b85      	ldr	r3, [pc, #532]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80032b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032b8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80032bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c4:	4a80      	ldr	r2, [pc, #512]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80032c6:	430b      	orrs	r3, r1
 80032c8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80032cc:	e003      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80032d2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80032d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80032e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80032e4:	2300      	movs	r3, #0
 80032e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80032ec:	460b      	mov	r3, r1
 80032ee:	4313      	orrs	r3, r2
 80032f0:	d046      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80032f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032fa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80032fe:	d028      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003300:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003304:	d821      	bhi.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800330a:	d022      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800330c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003310:	d81b      	bhi.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003316:	d01c      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003318:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800331c:	d815      	bhi.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d008      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003328:	d80f      	bhi.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d011      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d00e      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003334:	e009      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800333a:	3308      	adds	r3, #8
 800333c:	4618      	mov	r0, r3
 800333e:	f002 f8bb 	bl	80054b8 <RCCEx_PLL2_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003348:	e004      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8003352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003354:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10d      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800335c:	4b5a      	ldr	r3, [pc, #360]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800335e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003362:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800336a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800336e:	4a56      	ldr	r2, [pc, #344]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003370:	430b      	orrs	r3, r1
 8003372:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003376:	e003      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800337c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800338c:	663b      	str	r3, [r7, #96]	; 0x60
 800338e:	2300      	movs	r3, #0
 8003390:	667b      	str	r3, [r7, #100]	; 0x64
 8003392:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d03f      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800339c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d81e      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80033a8:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80033aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ae:	bf00      	nop
 80033b0:	080033ef 	.word	0x080033ef
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033d3 	.word	0x080033d3
 80033bc:	080033ef 	.word	0x080033ef
 80033c0:	080033ef 	.word	0x080033ef
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	4a3f      	ldr	r2, [pc, #252]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80033d0:	e00e      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033d6:	332c      	adds	r3, #44	; 0x2c
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 f905 	bl	80055e8 <RCCEx_PLL3_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80033e4:	e004      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80033ee:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10d      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80033fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80033fe:	f023 0107 	bic.w	r1, r3, #7
 8003402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800340c:	430b      	orrs	r3, r1
 800340e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003412:	e003      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003418:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800341c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003428:	65bb      	str	r3, [r7, #88]	; 0x58
 800342a:	2300      	movs	r3, #0
 800342c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800342e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003432:	460b      	mov	r3, r1
 8003434:	4313      	orrs	r3, r2
 8003436:	d04d      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800343c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003440:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003444:	d028      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003446:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800344a:	d821      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800344c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003450:	d024      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003452:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003456:	d81b      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800345c:	d00e      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800345e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003462:	d815      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d110      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800347a:	e012      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800347c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003480:	332c      	adds	r3, #44	; 0x2c
 8003482:	4618      	mov	r0, r3
 8003484:	f002 f8b0 	bl	80055e8 <RCCEx_PLL3_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800348e:	e008      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003496:	e004      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003498:	bf00      	nop
 800349a:	e002      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800349c:	bf00      	nop
 800349e:	e000      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80034a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80034a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d110      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80034ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034b0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80034b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034bc:	4a02      	ldr	r2, [pc, #8]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80034be:	430b      	orrs	r3, r1
 80034c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034c4:	e006      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80034c6:	bf00      	nop
 80034c8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80034d0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80034e0:	653b      	str	r3, [r7, #80]	; 0x50
 80034e2:	2300      	movs	r3, #0
 80034e4:	657b      	str	r3, [r7, #84]	; 0x54
 80034e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80034ea:	460b      	mov	r3, r1
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f000 80b5 	beq.w	800365c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f8:	4b9d      	ldr	r3, [pc, #628]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	4b9a      	ldr	r3, [pc, #616]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350c:	4a98      	ldr	r2, [pc, #608]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003516:	4b96      	ldr	r3, [pc, #600]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800352e:	4b91      	ldr	r3, [pc, #580]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	4a90      	ldr	r2, [pc, #576]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800353a:	f7fd fcdd 	bl	8000ef8 <HAL_GetTick>
 800353e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003542:	e00b      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003544:	f7fd fcd8 	bl	8000ef8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d903      	bls.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800355a:	e005      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800355c:	4b85      	ldr	r3, [pc, #532]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ed      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8003568:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d165      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003570:	4b7f      	ldr	r3, [pc, #508]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d023      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8003586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800358a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800358e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003592:	4293      	cmp	r3, r2
 8003594:	d01b      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a4:	4b72      	ldr	r3, [pc, #456]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035aa:	4a71      	ldr	r2, [pc, #452]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b4:	4b6e      	ldr	r3, [pc, #440]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ba:	4a6d      	ldr	r2, [pc, #436]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c4:	4a6a      	ldr	r2, [pc, #424]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d019      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fd fc8d 	bl	8000ef8 <HAL_GetTick>
 80035de:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e2:	e00d      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e4:	f7fd fc88 	bl	8000ef8 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ee:	1ad2      	subs	r2, r2, r3
 80035f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d903      	bls.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80035fe:	e006      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003600:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ea      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800360e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10d      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800361c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003624:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003628:	4a51      	ldr	r2, [pc, #324]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800362a:	430b      	orrs	r3, r1
 800362c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003630:	e008      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003632:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003636:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800363a:	e003      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003640:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003644:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b48      	ldr	r3, [pc, #288]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800364e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003652:	4a47      	ldr	r2, [pc, #284]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003654:	f023 0304 	bic.w	r3, r3, #4
 8003658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800365c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003668:	64bb      	str	r3, [r7, #72]	; 0x48
 800366a:	2300      	movs	r3, #0
 800366c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003672:	460b      	mov	r3, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	d042      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800367c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003680:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003684:	d022      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003686:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800368a:	d81b      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800368c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003690:	d011      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8003692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003696:	d815      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d019      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800369c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a0:	d110      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036a6:	3308      	adds	r3, #8
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 ff05 	bl	80054b8 <RCCEx_PLL2_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80036b4:	e00d      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	4a2d      	ldr	r2, [pc, #180]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80036c2:	e006      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80036cc:	bf00      	nop
 80036ce:	e000      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80036d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80036d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80036da:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80036e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036ec:	4a20      	ldr	r2, [pc, #128]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036ee:	430b      	orrs	r3, r1
 80036f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036f4:	e003      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80036fa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800370a:	643b      	str	r3, [r7, #64]	; 0x40
 800370c:	2300      	movs	r3, #0
 800370e:	647b      	str	r3, [r7, #68]	; 0x44
 8003710:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003714:	460b      	mov	r3, r1
 8003716:	4313      	orrs	r3, r2
 8003718:	d032      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800371a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800371e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003726:	d00b      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372c:	d804      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d007      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800373e:	e004      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003740:	bf00      	nop
 8003742:	e002      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003744:	bf00      	nop
 8003746:	e000      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003748:	bf00      	nop
    }
    if (ret == HAL_OK)
 800374a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d112      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003754:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003758:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800375c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003764:	4a02      	ldr	r2, [pc, #8]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003766:	430b      	orrs	r3, r1
 8003768:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800376c:	e008      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800376e:	bf00      	nop
 8003770:	46020c00 	.word	0x46020c00
 8003774:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800377c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800378c:	63bb      	str	r3, [r7, #56]	; 0x38
 800378e:	2300      	movs	r3, #0
 8003790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003792:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d00c      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800379c:	4b98      	ldr	r3, [pc, #608]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800379e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80037a2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80037a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ae:	4a94      	ldr	r2, [pc, #592]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80037b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
 80037c4:	2300      	movs	r3, #0
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
 80037c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80037cc:	460b      	mov	r3, r1
 80037ce:	4313      	orrs	r3, r2
 80037d0:	d019      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80037d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037de:	d105      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037e0:	4b87      	ldr	r3, [pc, #540]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	4a86      	ldr	r2, [pc, #536]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80037ec:	4b84      	ldr	r3, [pc, #528]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80037ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80037f2:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80037f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037fe:	4a80      	ldr	r2, [pc, #512]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003800:	430b      	orrs	r3, r1
 8003802:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
 8003814:	2300      	movs	r3, #0
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003818:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800381c:	460b      	mov	r3, r1
 800381e:	4313      	orrs	r3, r2
 8003820:	d00c      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003822:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003828:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800382c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003834:	4972      	ldr	r1, [pc, #456]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800383c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003848:	623b      	str	r3, [r7, #32]
 800384a:	2300      	movs	r3, #0
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d00c      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003858:	4b69      	ldr	r3, [pc, #420]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800385a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800385e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003866:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800386a:	4965      	ldr	r1, [pc, #404]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d00c      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800388e:	4b5c      	ldr	r3, [pc, #368]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003894:	f023 0218 	bic.w	r2, r3, #24
 8003898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800389c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80038a0:	4957      	ldr	r1, [pc, #348]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038be:	460b      	mov	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	d032      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80038c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d0:	d105      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d2:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	4a4a      	ldr	r2, [pc, #296]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80038d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038dc:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80038de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ea:	d108      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038f0:	3308      	adds	r3, #8
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fde0 	bl	80054b8 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80038fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003906:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003908:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800390c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003910:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003918:	4939      	ldr	r1, [pc, #228]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003926:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800392a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003940:	460b      	mov	r3, r1
 8003942:	4313      	orrs	r3, r2
 8003944:	d03a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003952:	d00e      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8003954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003958:	d815      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d017      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800395e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003962:	d110      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003964:	4b26      	ldr	r3, [pc, #152]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800396a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003970:	e00e      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003976:	3308      	adds	r3, #8
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fd9d 	bl	80054b8 <RCCEx_PLL2_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003984:	e004      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800398e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003990:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10d      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800399a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039aa:	4915      	ldr	r1, [pc, #84]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80039b2:	e003      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80039b8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80039bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d00c      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80039da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039ea:	4905      	ldr	r1, [pc, #20]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80039f2:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	37e8      	adds	r7, #232	; 0xe8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a00:	46020c00 	.word	0x46020c00

08003a04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003a0c:	4bac      	ldr	r3, [pc, #688]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a14:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003a16:	4baa      	ldr	r3, [pc, #680]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003a20:	4ba7      	ldr	r3, [pc, #668]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8003a2e:	4ba4      	ldr	r3, [pc, #656]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a38:	4ba1      	ldr	r3, [pc, #644]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	08db      	lsrs	r3, r3, #3
 8003a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	fb02 f303 	mul.w	r3, r2, r3
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a50:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8123 	beq.w	8003ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d062      	beq.n	8003b28 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	f200 8081 	bhi.w	8003b6c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d024      	beq.n	8003aba <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d17a      	bne.n	8003b6c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a80:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8003a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a88:	4b8d      	ldr	r3, [pc, #564]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a90:	ee07 3a90 	vmov	s15, r3
 8003a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a98:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a9c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ab8:	e08f      	b.n	8003bda <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003aba:	4b81      	ldr	r3, [pc, #516]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8003ac6:	4b7e      	ldr	r3, [pc, #504]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0f1b      	lsrs	r3, r3, #28
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	e006      	b.n	8003ae0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8003ad2:	4b7b      	ldr	r3, [pc, #492]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003ad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	0f1b      	lsrs	r3, r3, #28
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	4a7a      	ldr	r2, [pc, #488]	; (8003ccc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b0a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b26:	e058      	b.n	8003bda <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8003b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3a:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b4e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b6a:	e036      	b.n	8003bda <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b6c:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8003b78:	4b51      	ldr	r3, [pc, #324]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	0f1b      	lsrs	r3, r3, #28
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	e006      	b.n	8003b92 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8003b84:	4b4e      	ldr	r3, [pc, #312]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	0f1b      	lsrs	r3, r3, #28
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	4a4e      	ldr	r2, [pc, #312]	; (8003ccc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bbc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd8:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003bda:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d017      	beq.n	8003c16 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003be6:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	0a5b      	lsrs	r3, r3, #9
 8003bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf0:	ee07 3a90 	vmov	s15, r3
 8003bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c0c:	ee17 2a90 	vmov	r2, s15
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e002      	b.n	8003c1c <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003c1c:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d017      	beq.n	8003c58 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c28:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4e:	ee17 2a90 	vmov	r2, s15
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	e002      	b.n	8003c5e <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003c5e:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d017      	beq.n	8003c9a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	0e1b      	lsrs	r3, r3, #24
 8003c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c80:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c90:	ee17 2a90 	vmov	r2, s15
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003c98:	e00c      	b.n	8003cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	609a      	str	r2, [r3, #8]
}
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	3724      	adds	r7, #36	; 0x24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	46020c00 	.word	0x46020c00
 8003cc4:	4b742400 	.word	0x4b742400
 8003cc8:	46000000 	.word	0x46000000
 8003ccc:	08008080 	.word	0x08008080

08003cd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003cd8:	4bac      	ldr	r3, [pc, #688]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003ce2:	4baa      	ldr	r3, [pc, #680]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003cec:	4ba7      	ldr	r3, [pc, #668]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003cfa:	4ba4      	ldr	r3, [pc, #656]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003d04:	4ba1      	ldr	r3, [pc, #644]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	08db      	lsrs	r3, r3, #3
 8003d0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8123 	beq.w	8003f6e <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d062      	beq.n	8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	f200 8081 	bhi.w	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d024      	beq.n	8003d86 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d17a      	bne.n	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8003d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d54:	4b8d      	ldr	r3, [pc, #564]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d64:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d68:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d84:	e08f      	b.n	8003ea6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003d86:	4b81      	ldr	r3, [pc, #516]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8003d92:	4b7e      	ldr	r3, [pc, #504]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0f1b      	lsrs	r3, r3, #28
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	e006      	b.n	8003dac <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8003d9e:	4b7b      	ldr	r3, [pc, #492]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	0f1b      	lsrs	r3, r3, #28
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	4a7a      	ldr	r2, [pc, #488]	; (8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dd6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003df2:	e058      	b.n	8003ea6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfe:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8003e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e06:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e1a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e36:	e036      	b.n	8003ea6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003e38:	4b54      	ldr	r3, [pc, #336]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8003e44:	4b51      	ldr	r3, [pc, #324]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	0f1b      	lsrs	r3, r3, #28
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	e006      	b.n	8003e5e <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8003e50:	4b4e      	ldr	r3, [pc, #312]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003e52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e56:	041b      	lsls	r3, r3, #16
 8003e58:	0f1b      	lsrs	r3, r3, #28
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e84:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e88:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ea4:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003ea6:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003eb2:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	0a5b      	lsrs	r3, r3, #9
 8003eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ebc:	ee07 3a90 	vmov	s15, r3
 8003ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed8:	ee17 2a90 	vmov	r2, s15
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e002      	b.n	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003ee8:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d017      	beq.n	8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f1a:	ee17 2a90 	vmov	r2, s15
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	e002      	b.n	8003f2a <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d017      	beq.n	8003f66 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	0e1b      	lsrs	r3, r3, #24
 8003f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f5c:	ee17 2a90 	vmov	r2, s15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f64:	e00c      	b.n	8003f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	e008      	b.n	8003f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	3724      	adds	r7, #36	; 0x24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	46020c00 	.word	0x46020c00
 8003f90:	4b742400 	.word	0x4b742400
 8003f94:	46000000 	.word	0x46000000
 8003f98:	08008080 	.word	0x08008080

08003f9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b089      	sub	sp, #36	; 0x24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003fa4:	4bac      	ldr	r3, [pc, #688]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003fae:	4baa      	ldr	r3, [pc, #680]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003fb8:	4ba7      	ldr	r3, [pc, #668]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8003fc6:	4ba4      	ldr	r3, [pc, #656]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003fd0:	4ba1      	ldr	r3, [pc, #644]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd4:	08db      	lsrs	r3, r3, #3
 8003fd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
 8003fe0:	ee07 3a90 	vmov	s15, r3
 8003fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8123 	beq.w	800423a <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d062      	beq.n	80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	f200 8081 	bhi.w	8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d024      	beq.n	8004052 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d17a      	bne.n	8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	ee07 3a90 	vmov	s15, r3
 8004014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004018:	eddf 6a90 	vldr	s13, [pc, #576]	; 800425c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800401c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004020:	4b8d      	ldr	r3, [pc, #564]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004030:	ed97 6a02 	vldr	s12, [r7, #8]
 8004034:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8004260 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004038:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800403c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004044:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404c:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8004050:	e08f      	b.n	8004172 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004052:	4b81      	ldr	r3, [pc, #516]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800405e:	4b7e      	ldr	r3, [pc, #504]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	0f1b      	lsrs	r3, r3, #28
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	e006      	b.n	8004078 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800406a:	4b7b      	ldr	r3, [pc, #492]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800406c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	0f1b      	lsrs	r3, r3, #28
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	4a7a      	ldr	r2, [pc, #488]	; (8004264 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800407a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409e:	ed97 6a02 	vldr	s12, [r7, #8]
 80040a2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004260 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80040a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040be:	e058      	b.n	8004172 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ca:	eddf 6a64 	vldr	s13, [pc, #400]	; 800425c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80040ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d2:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80040e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040e6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004260 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80040f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004102:	e036      	b.n	8004172 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004104:	4b54      	ldr	r3, [pc, #336]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8004110:	4b51      	ldr	r3, [pc, #324]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	0f1b      	lsrs	r3, r3, #28
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	e006      	b.n	800412a <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800411c:	4b4e      	ldr	r3, [pc, #312]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800411e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	0f1b      	lsrs	r3, r3, #28
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	4a4e      	ldr	r2, [pc, #312]	; (8004264 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800412c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	ee07 3a90 	vmov	s15, r3
 800414c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004150:	ed97 6a02 	vldr	s12, [r7, #8]
 8004154:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004260 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800415c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004164:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004170:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d017      	beq.n	80041ae <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800417e:	4b36      	ldr	r3, [pc, #216]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	0a5b      	lsrs	r3, r3, #9
 8004184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004194:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004198:	edd7 6a07 	vldr	s13, [r7, #28]
 800419c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a4:	ee17 2a90 	vmov	r2, s15
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80041b4:	4b28      	ldr	r3, [pc, #160]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d017      	beq.n	80041f0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80041d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041d6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041da:	edd7 6a07 	vldr	s13, [r7, #28]
 80041de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e6:	ee17 2a90 	vmov	r2, s15
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80041f6:	4b18      	ldr	r3, [pc, #96]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d017      	beq.n	8004232 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	0e1b      	lsrs	r3, r3, #24
 8004208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004218:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800421c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004228:	ee17 2a90 	vmov	r2, s15
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004230:	e00c      	b.n	800424c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	e008      	b.n	800424c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	3724      	adds	r7, #36	; 0x24
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	46020c00 	.word	0x46020c00
 800425c:	4b742400 	.word	0x4b742400
 8004260:	46000000 	.word	0x46000000
 8004264:	08008080 	.word	0x08008080

08004268 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08e      	sub	sp, #56	; 0x38
 800426c:	af00      	add	r7, sp, #0
 800426e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004276:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800427a:	430b      	orrs	r3, r1
 800427c:	d145      	bne.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800427e:	4ba7      	ldr	r3, [pc, #668]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004288:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800428a:	4ba4      	ldr	r3, [pc, #656]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800428c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b02      	cmp	r3, #2
 8004296:	d108      	bne.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429e:	d104      	bne.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80042a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
 80042a6:	f001 b8fc 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80042aa:	4b9c      	ldr	r3, [pc, #624]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b8:	d114      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c0:	d110      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80042c2:	4b96      	ldr	r3, [pc, #600]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d0:	d103      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80042d2:	23fa      	movs	r3, #250	; 0xfa
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80042d6:	f001 b8e4 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80042da:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80042e0:	f001 b8df 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80042e4:	4b8d      	ldr	r3, [pc, #564]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f0:	d107      	bne.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f8:	d103      	bne.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80042fa:	4b89      	ldr	r3, [pc, #548]	; (8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
 80042fe:	f001 b8d0 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
 8004306:	f001 b8cc 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800430a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800430e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004312:	430b      	orrs	r3, r1
 8004314:	d151      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004316:	4b81      	ldr	r3, [pc, #516]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004318:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800431c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004320:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	2b80      	cmp	r3, #128	; 0x80
 8004326:	d035      	beq.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d841      	bhi.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2b60      	cmp	r3, #96	; 0x60
 8004332:	d02a      	beq.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	2b60      	cmp	r3, #96	; 0x60
 8004338:	d83b      	bhi.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d009      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d835      	bhi.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00c      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	2b20      	cmp	r3, #32
 8004350:	d012      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004352:	e02e      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fb53 	bl	8003a04 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004362:	f001 b89e 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004366:	f107 0318 	add.w	r3, r7, #24
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fcb0 	bl	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004374:	f001 b895 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fe0d 	bl	8003f9c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004386:	f001 b88c 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800438a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004390:	f001 b887 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a0:	d103      	bne.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80043a2:	4b60      	ldr	r3, [pc, #384]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80043a6:	f001 b87c 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043ae:	f001 b878 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043b6:	f001 b874 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80043ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043be:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80043c2:	430b      	orrs	r3, r1
 80043c4:	d158      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80043c6:	4b55      	ldr	r3, [pc, #340]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80043cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d03b      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	d846      	bhi.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e8:	d02e      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f0:	d83e      	bhi.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f8:	d00b      	beq.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004400:	d836      	bhi.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00d      	beq.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440e:	d012      	beq.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004410:	e02e      	b.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff faf4 	bl	8003a04 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004420:	f001 b83f 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004424:	f107 0318 	add.w	r3, r7, #24
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fc51 	bl	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004432:	f001 b836 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004436:	f107 030c 	add.w	r3, r7, #12
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fdae 	bl	8003f9c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004444:	f001 b82d 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004448:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800444e:	f001 b828 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445e:	d103      	bne.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004464:	f001 b81d 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800446c:	f001 b819 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004474:	f001 b815 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800447c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004480:	430b      	orrs	r3, r1
 8004482:	d126      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004484:	4b25      	ldr	r3, [pc, #148]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004486:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800448a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004490:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d106      	bne.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d103      	bne.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80044a4:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
 80044a8:	f000 bffb 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b8:	d107      	bne.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c0:	d103      	bne.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80044c2:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
 80044c6:	f000 bfec 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	f000 bfe8 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80044d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044d6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80044da:	430b      	orrs	r3, r1
 80044dc:	d164      	bne.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044e4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80044f0:	d03d      	beq.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80044f8:	d852      	bhi.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004500:	d014      	beq.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004508:	d84a      	bhi.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01f      	beq.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004516:	d012      	beq.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004518:	e042      	b.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800451a:	bf00      	nop
 800451c:	46020c00 	.word	0x46020c00
 8004520:	0007a120 	.word	0x0007a120
 8004524:	00f42400 	.word	0x00f42400
 8004528:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800452c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fa67 	bl	8003a04 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800453a:	f000 bfb2 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800453e:	f107 0318 	add.w	r3, r7, #24
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fbc4 	bl	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800454c:	f000 bfa9 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004550:	4bab      	ldr	r3, [pc, #684]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455c:	d103      	bne.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800455e:	4ba9      	ldr	r3, [pc, #676]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004562:	f000 bf9e 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800456a:	f000 bf9a 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800456e:	4ba4      	ldr	r3, [pc, #656]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800457a:	4ba1      	ldr	r3, [pc, #644]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0e1b      	lsrs	r3, r3, #24
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	e006      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8004586:	4b9e      	ldr	r3, [pc, #632]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	0e1b      	lsrs	r3, r3, #24
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	4a9c      	ldr	r2, [pc, #624]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800459c:	f000 bf81 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045a4:	f000 bf7d 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80045a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ac:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80045b0:	430b      	orrs	r3, r1
 80045b2:	d175      	bne.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80045b4:	4b92      	ldr	r3, [pc, #584]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80045b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045be:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d15b      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80045c6:	4b8e      	ldr	r3, [pc, #568]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80045c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045cc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80045d0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80045d8:	d034      	beq.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80045e0:	d849      	bhi.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e8:	d00b      	beq.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f0:	d841      	bhi.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d016      	beq.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045fe:	d009      	beq.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8004600:	e039      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f9fc 	bl	8003a04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004610:	f000 bf47 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004614:	f107 0318 	add.w	r3, r7, #24
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fb59 	bl	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004622:	f000 bf3e 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004626:	4b76      	ldr	r3, [pc, #472]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800462e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004632:	d103      	bne.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8004634:	4b73      	ldr	r3, [pc, #460]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004638:	f000 bf33 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004640:	f000 bf2f 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004644:	4b6e      	ldr	r3, [pc, #440]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8004650:	4b6b      	ldr	r3, [pc, #428]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	0e1b      	lsrs	r3, r3, #24
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	e006      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800465c:	4b68      	ldr	r3, [pc, #416]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800465e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	0e1b      	lsrs	r3, r3, #24
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	4a67      	ldr	r2, [pc, #412]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800466c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004672:	f000 bf16 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800467a:	f000 bf12 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004684:	d108      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff f9ba 	bl	8003a04 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
 8004694:	f000 bf05 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
 800469c:	f000 bf01 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80046a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a4:	1e51      	subs	r1, r2, #1
 80046a6:	430b      	orrs	r3, r1
 80046a8:	d136      	bne.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80046aa:	4b55      	ldr	r3, [pc, #340]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80046ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7fe fafc 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 80046c0:	6378      	str	r0, [r7, #52]	; 0x34
 80046c2:	f000 beee 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d104      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80046cc:	f7fe f9be 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80046d0:	6378      	str	r0, [r7, #52]	; 0x34
 80046d2:	f000 bee6 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80046d6:	4b4a      	ldr	r3, [pc, #296]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e2:	d106      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d103      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 80046ea:	4b48      	ldr	r3, [pc, #288]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
 80046ee:	f000 bed8 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80046f2:	4b43      	ldr	r3, [pc, #268]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80046f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d107      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	2b03      	cmp	r3, #3
 8004704:	d104      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8004706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
 800470c:	f000 bec9 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	637b      	str	r3, [r7, #52]	; 0x34
 8004714:	f000 bec5 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800471c:	1e91      	subs	r1, r2, #2
 800471e:	430b      	orrs	r3, r1
 8004720:	d136      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004722:	4b37      	ldr	r3, [pc, #220]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	2b00      	cmp	r3, #0
 8004732:	d104      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004734:	f7fe faac 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004738:	6378      	str	r0, [r7, #52]	; 0x34
 800473a:	f000 beb2 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	2b04      	cmp	r3, #4
 8004742:	d104      	bne.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004744:	f7fe f982 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004748:	6378      	str	r0, [r7, #52]	; 0x34
 800474a:	f000 beaa 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d106      	bne.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	2b08      	cmp	r3, #8
 8004760:	d103      	bne.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8004762:	4b2a      	ldr	r3, [pc, #168]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
 8004766:	f000 be9c 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800476c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d107      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d104      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800477e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
 8004784:	f000 be8d 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
 800478c:	f000 be89 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004794:	1f11      	subs	r1, r2, #4
 8004796:	430b      	orrs	r3, r1
 8004798:	d13e      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800479a:	4b19      	ldr	r3, [pc, #100]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800479c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80047ac:	f7fe fa70 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 80047b0:	6378      	str	r0, [r7, #52]	; 0x34
 80047b2:	f000 be76 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d104      	bne.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80047bc:	f7fe f946 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80047c0:	6378      	str	r0, [r7, #52]	; 0x34
 80047c2:	f000 be6e 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80047c6:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d2:	d106      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d103      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
 80047de:	f000 be60 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80047e2:	4b07      	ldr	r3, [pc, #28]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80047e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d10f      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	2b30      	cmp	r3, #48	; 0x30
 80047f4:	d10c      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
 80047fc:	f000 be51 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004800:	46020c00 	.word	0x46020c00
 8004804:	02dc6c00 	.word	0x02dc6c00
 8004808:	08008080 	.word	0x08008080
 800480c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
 8004814:	f000 be45 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800481c:	f1a2 0108 	sub.w	r1, r2, #8
 8004820:	430b      	orrs	r3, r1
 8004822:	d136      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004824:	4b9f      	ldr	r3, [pc, #636]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800482a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800482e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004836:	f7fe fa2b 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 800483a:	6378      	str	r0, [r7, #52]	; 0x34
 800483c:	f000 be31 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d104      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004846:	f7fe f901 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800484a:	6378      	str	r0, [r7, #52]	; 0x34
 800484c:	f000 be29 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004850:	4b94      	ldr	r3, [pc, #592]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485c:	d106      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d103      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8004864:	4b90      	ldr	r3, [pc, #576]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004866:	637b      	str	r3, [r7, #52]	; 0x34
 8004868:	f000 be1b 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800486c:	4b8d      	ldr	r3, [pc, #564]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800486e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d107      	bne.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	2bc0      	cmp	r3, #192	; 0xc0
 800487e:	d104      	bne.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8004880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
 8004886:	f000 be0c 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
 800488e:	f000 be08 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004896:	f1a2 0110 	sub.w	r1, r2, #16
 800489a:	430b      	orrs	r3, r1
 800489c:	d139      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800489e:	4b81      	ldr	r3, [pc, #516]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fe f9ee 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 80048b4:	6378      	str	r0, [r7, #52]	; 0x34
 80048b6:	f000 bdf4 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c0:	d104      	bne.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe f8c3 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80048c6:	6378      	str	r0, [r7, #52]	; 0x34
 80048c8:	f000 bdeb 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80048cc:	4b75      	ldr	r3, [pc, #468]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d107      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e0:	d103      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 80048e2:	4b71      	ldr	r3, [pc, #452]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
 80048e6:	f000 bddc 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80048ea:	4b6e      	ldr	r3, [pc, #440]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d108      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048fe:	d104      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8004900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
 8004906:	f000 bdcc 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
 800490e:	f000 bdc8 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004916:	f1a2 0120 	sub.w	r1, r2, #32
 800491a:	430b      	orrs	r3, r1
 800491c:	d158      	bne.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800491e:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004930:	f7fe f9d6 	bl	8002ce0 <HAL_RCC_GetPCLK3Freq>
 8004934:	6378      	str	r0, [r7, #52]	; 0x34
 8004936:	f000 bdb4 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2b01      	cmp	r3, #1
 800493e:	d104      	bne.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004940:	f7fe f884 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004944:	6378      	str	r0, [r7, #52]	; 0x34
 8004946:	f000 bdac 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800494a:	4b56      	ldr	r3, [pc, #344]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004956:	d106      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	2b02      	cmp	r3, #2
 800495c:	d103      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800495e:	4b52      	ldr	r3, [pc, #328]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
 8004962:	f000 bd9e 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004966:	4b4f      	ldr	r3, [pc, #316]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d107      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	2b03      	cmp	r3, #3
 8004978:	d104      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800497a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
 8004980:	f000 bd8f 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004984:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b20      	cmp	r3, #32
 800498e:	d11b      	bne.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	2b04      	cmp	r3, #4
 8004994:	d118      	bne.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004996:	4b43      	ldr	r3, [pc, #268]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80049a2:	4b40      	ldr	r3, [pc, #256]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	0e1b      	lsrs	r3, r3, #24
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	e006      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80049ae:	4b3d      	ldr	r3, [pc, #244]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049b4:	041b      	lsls	r3, r3, #16
 80049b6:	0e1b      	lsrs	r3, r3, #24
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	4a3b      	ldr	r2, [pc, #236]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80049be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c2:	637b      	str	r3, [r7, #52]	; 0x34
 80049c4:	f000 bd6d 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	637b      	str	r3, [r7, #52]	; 0x34
 80049cc:	f000 bd69 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80049d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80049d8:	430b      	orrs	r3, r1
 80049da:	d169      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80049dc:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049e2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ee:	d104      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80049f0:	f7fe f82c 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80049f4:	6378      	str	r0, [r7, #52]	; 0x34
 80049f6:	f000 bd54 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a00:	d108      	bne.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a02:	f107 0318 	add.w	r3, r7, #24
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff f962 	bl	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a10:	f000 bd47 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004a1a:	f7fe f91f 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8004a1e:	6378      	str	r0, [r7, #52]	; 0x34
 8004a20:	f000 bd3f 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a2a:	d118      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004a2c:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004a38:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	0f1b      	lsrs	r3, r3, #28
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	e006      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8004a44:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	0f1b      	lsrs	r3, r3, #28
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	4a16      	ldr	r2, [pc, #88]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5a:	f000 bd22 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a72:	d103      	bne.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
 8004a78:	f000 bd13 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a88:	d107      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a90:	d103      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
 8004a96:	f000 bd04 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9e:	f000 bd00 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004aa2:	bf00      	nop
 8004aa4:	46020c00 	.word	0x46020c00
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	08008080 	.word	0x08008080
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	d14e      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004abc:	4ba8      	ldr	r3, [pc, #672]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004abe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d841      	bhi.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004b0d 	.word	0x08004b0d
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004afb 	.word	0x08004afb
 8004ae0:	08004b17 	.word	0x08004b17
 8004ae4:	08004b21 	.word	0x08004b21
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fe ff89 	bl	8003a04 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004af6:	f000 bcd4 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004afa:	f107 030c 	add.w	r3, r7, #12
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fa4c 	bl	8003f9c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b08:	f000 bccb 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004b0c:	f7fe f8a6 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8004b10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004b12:	f000 bcc6 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b1c:	f000 bcc1 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b20:	4b8f      	ldr	r3, [pc, #572]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8004b2c:	4b8c      	ldr	r3, [pc, #560]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	0e1b      	lsrs	r3, r3, #24
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	e006      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004b38:	4b89      	ldr	r3, [pc, #548]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	0e1b      	lsrs	r3, r3, #24
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	4a87      	ldr	r2, [pc, #540]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b4e:	f000 bca8 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b56:	f000 bca4 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004b62:	430b      	orrs	r3, r1
 8004b64:	d15d      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004b66:	4b7e      	ldr	r3, [pc, #504]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b6c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004b70:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b78:	d036      	beq.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b80:	d84b      	bhi.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b88:	d029      	beq.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b90:	d843      	bhi.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b98:	d013      	beq.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba0:	d83b      	bhi.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bae:	d134      	bne.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe ff25 	bl	8003a04 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bbe:	f000 bc70 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bc2:	f107 030c 	add.w	r3, r7, #12
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff f9e8 	bl	8003f9c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bd0:	f000 bc67 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004bd4:	f7fe f842 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8004bd8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004bda:	f000 bc62 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004bde:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004be4:	f000 bc5d 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004be8:	4b5d      	ldr	r3, [pc, #372]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004bf4:	4b5a      	ldr	r3, [pc, #360]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	0e1b      	lsrs	r3, r3, #24
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	e006      	b.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004c00:	4b57      	ldr	r3, [pc, #348]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	0e1b      	lsrs	r3, r3, #24
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	4a55      	ldr	r2, [pc, #340]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c16:	f000 bc44 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c1e:	f000 bc40 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c26:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	d14a      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c2e:	4b4c      	ldr	r3, [pc, #304]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fe f826 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004c44:	6378      	str	r0, [r7, #52]	; 0x34
 8004c46:	f000 bc2c 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c50:	d104      	bne.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fd fefb 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004c56:	6378      	str	r0, [r7, #52]	; 0x34
 8004c58:	f000 bc23 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004c5c:	4b40      	ldr	r3, [pc, #256]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c68:	d107      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c70:	d103      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8004c72:	4b3d      	ldr	r3, [pc, #244]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
 8004c76:	f000 bc14 	b.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004c7a:	4b39      	ldr	r3, [pc, #228]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d11b      	bne.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c8c:	d117      	bne.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c8e:	4b34      	ldr	r3, [pc, #208]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004c9a:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	0e1b      	lsrs	r3, r3, #24
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	e006      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004ca6:	4b2e      	ldr	r3, [pc, #184]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	0e1b      	lsrs	r3, r3, #24
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	4a2b      	ldr	r2, [pc, #172]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbc:	e3f1      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc2:	e3ee      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc8:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	d14d      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004cd0:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cd6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004ce2:	f7fd ffd5 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004ce6:	6378      	str	r0, [r7, #52]	; 0x34
 8004ce8:	e3db      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf0:	d103      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fd feab 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004cf6:	6378      	str	r0, [r7, #52]	; 0x34
 8004cf8:	e3d3      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004cfa:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d106      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0e:	d102      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8004d10:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
 8004d14:	e3c5      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d11b      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d28:	d117      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0e1b      	lsrs	r3, r3, #24
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	e006      	b.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004d42:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	0e1b      	lsrs	r3, r3, #24
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
 8004d58:	e3a3      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5e:	e3a0      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004d60:	46020c00 	.word	0x46020c00
 8004d64:	08008080 	.word	0x08008080
 8004d68:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d70:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004d74:	430b      	orrs	r3, r1
 8004d76:	d148      	bne.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004d78:	4b9d      	ldr	r3, [pc, #628]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	2bc0      	cmp	r3, #192	; 0xc0
 8004d88:	d024      	beq.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	2bc0      	cmp	r3, #192	; 0xc0
 8004d8e:	d839      	bhi.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d00d      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d833      	bhi.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d011      	beq.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004da8:	e02c      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004daa:	f7fd ff99 	bl	8002ce0 <HAL_RCC_GetPCLK3Freq>
 8004dae:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004db0:	e377      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004db2:	4b8f      	ldr	r3, [pc, #572]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8004dc0:	4b8c      	ldr	r3, [pc, #560]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004dc4:	e36d      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dca:	e36a      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004dcc:	f7fd fe3e 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004dd0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004dd2:	e366      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004dd4:	4b86      	ldr	r3, [pc, #536]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8004de0:	4b83      	ldr	r3, [pc, #524]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	0f1b      	lsrs	r3, r3, #28
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	e006      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8004dec:	4b80      	ldr	r3, [pc, #512]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	0f1b      	lsrs	r3, r3, #28
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	4a7f      	ldr	r2, [pc, #508]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e02:	e34e      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e08:	e34b      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e0e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004e12:	430b      	orrs	r3, r1
 8004e14:	d147      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004e16:	4b76      	ldr	r3, [pc, #472]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e20:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fd ff32 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	6378      	str	r0, [r7, #52]	; 0x34
 8004e2e:	e338      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e36:	d103      	bne.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e38:	f7fd fe08 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004e3c:	6378      	str	r0, [r7, #52]	; 0x34
 8004e3e:	e330      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004e40:	4b6b      	ldr	r3, [pc, #428]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4c:	d106      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e54:	d102      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8004e56:	4b67      	ldr	r3, [pc, #412]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5a:	e322      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004e5c:	4b64      	ldr	r3, [pc, #400]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d11b      	bne.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e6e:	d117      	bne.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e70:	4b5f      	ldr	r3, [pc, #380]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8004e7c:	4b5c      	ldr	r3, [pc, #368]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	0e1b      	lsrs	r3, r3, #24
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	e006      	b.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8004e88:	4b59      	ldr	r3, [pc, #356]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004e8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	0e1b      	lsrs	r3, r3, #24
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	4a58      	ldr	r2, [pc, #352]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9e:	e300      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea4:	e2fd      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eaa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	d15b      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004eb2:	4b4f      	ldr	r3, [pc, #316]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d117      	bne.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ec4:	4b4a      	ldr	r3, [pc, #296]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8004ed0:	4b47      	ldr	r3, [pc, #284]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	0e1b      	lsrs	r3, r3, #24
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	e006      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8004edc:	4b44      	ldr	r3, [pc, #272]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	0e1b      	lsrs	r3, r3, #24
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	4a43      	ldr	r2, [pc, #268]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef2:	e2d6      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004ef4:	4b3e      	ldr	r3, [pc, #248]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f02:	d112      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0a:	d10e      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f0c:	4b38      	ldr	r3, [pc, #224]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f1a:	d102      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8004f1c:	23fa      	movs	r3, #250	; 0xfa
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f20:	e2bf      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004f22:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f28:	e2bb      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004f2a:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f36:	d106      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f3e:	d102      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
 8004f44:	e2ad      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004f46:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d107      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5a:	d103      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8004f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
 8004f62:	e29e      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	637b      	str	r3, [r7, #52]	; 0x34
 8004f68:	e29b      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f6e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004f72:	430b      	orrs	r3, r1
 8004f74:	d162      	bne.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004f76:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f80:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d117      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8004f94:	4b16      	ldr	r3, [pc, #88]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	0e1b      	lsrs	r3, r3, #24
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	e006      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	0e1b      	lsrs	r3, r3, #24
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb6:	e274      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fc6:	d119      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fce:	d115      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fde:	d102      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8004fe0:	23fa      	movs	r3, #250	; 0xfa
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fe4:	e25d      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004fe6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fec:	e259      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004fee:	bf00      	nop
 8004ff0:	46020c00 	.word	0x46020c00
 8004ff4:	00f42400 	.word	0x00f42400
 8004ff8:	08008080 	.word	0x08008080
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004ffc:	4b9d      	ldr	r3, [pc, #628]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005008:	d106      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005010:	d102      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8005012:	4b99      	ldr	r3, [pc, #612]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
 8005016:	e244      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005018:	4b96      	ldr	r3, [pc, #600]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800501a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	d107      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800502c:	d103      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800502e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
 8005034:	e235      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
 800503a:	e232      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800503c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005040:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005044:	430b      	orrs	r3, r1
 8005046:	d147      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005048:	4b8a      	ldr	r3, [pc, #552]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800504a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800504e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005052:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800505a:	f7fd fe19 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 800505e:	6378      	str	r0, [r7, #52]	; 0x34
 8005060:	e21f      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005062:	4b84      	ldr	r3, [pc, #528]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005070:	d112      	bne.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005078:	d10e      	bne.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800507a:	4b7e      	ldr	r3, [pc, #504]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800507c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005088:	d102      	bne.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800508a:	23fa      	movs	r3, #250	; 0xfa
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800508e:	e208      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005090:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005096:	e204      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005098:	4b76      	ldr	r3, [pc, #472]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a4:	d106      	bne.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050ac:	d102      	bne.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80050ae:	4b72      	ldr	r3, [pc, #456]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
 80050b2:	e1f6      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80050b4:	4b6f      	ldr	r3, [pc, #444]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80050b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d107      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050c8:	d103      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80050ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
 80050d0:	e1e7      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34
 80050d6:	e1e4      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80050d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050dc:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80050e0:	430b      	orrs	r3, r1
 80050e2:	d12d      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80050e4:	4b63      	ldr	r3, [pc, #396]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80050e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ea:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80050f0:	4b60      	ldr	r3, [pc, #384]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050fc:	d105      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8005104:	4b5c      	ldr	r3, [pc, #368]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8005106:	637b      	str	r3, [r7, #52]	; 0x34
 8005108:	e1cb      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005110:	d107      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fc74 	bl	8003a04 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
 8005120:	e1bf      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005128:	d107      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800512a:	f107 0318 	add.w	r3, r7, #24
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fdce 	bl	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
 8005138:	e1b3      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	637b      	str	r3, [r7, #52]	; 0x34
 800513e:	e1b0      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005144:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005148:	430b      	orrs	r3, r1
 800514a:	d14d      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800514c:	4b49      	ldr	r3, [pc, #292]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800514e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005152:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005156:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800515e:	d028      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005166:	d83c      	bhi.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800516e:	d013      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005176:	d834      	bhi.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005184:	d004      	beq.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005186:	e02c      	b.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005188:	f7fd fd96 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 800518c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800518e:	e188      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005190:	f7fd fc5c 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8005194:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005196:	e184      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005198:	4b36      	ldr	r3, [pc, #216]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a4:	d102      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80051a6:	4b34      	ldr	r3, [pc, #208]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80051a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051aa:	e17a      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051b0:	e177      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051b2:	4b30      	ldr	r3, [pc, #192]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80051be:	4b2d      	ldr	r3, [pc, #180]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	0e1b      	lsrs	r3, r3, #24
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	e006      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80051ca:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80051cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	0e1b      	lsrs	r3, r3, #24
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	4a28      	ldr	r2, [pc, #160]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 80051da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051e0:	e15f      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051e6:	e15c      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80051e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ec:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80051f0:	430b      	orrs	r3, r1
 80051f2:	d154      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80051f4:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80051f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005206:	d028      	beq.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800520e:	d843      	bhi.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005216:	d013      	beq.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800521e:	d83b      	bhi.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d004      	beq.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800522e:	e033      	b.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005230:	f7fd fd2e 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8005234:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005236:	e134      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005238:	f7fd fc08 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800523c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800523e:	e130      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005240:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524c:	d102      	bne.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005252:	e126      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005258:	e123      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8005266:	4b03      	ldr	r3, [pc, #12]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	0e1b      	lsrs	r3, r3, #24
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	e00d      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8005272:	bf00      	nop
 8005274:	46020c00 	.word	0x46020c00
 8005278:	00f42400 	.word	0x00f42400
 800527c:	08008080 	.word	0x08008080
 8005280:	4b8a      	ldr	r3, [pc, #552]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005282:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	0e1b      	lsrs	r3, r3, #24
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	4a88      	ldr	r2, [pc, #544]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8005290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005296:	e104      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800529c:	e101      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800529e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a2:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80052a6:	430b      	orrs	r3, r1
 80052a8:	d16e      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80052aa:	4b80      	ldr	r3, [pc, #512]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80052ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052b0:	f003 0318 	and.w	r3, r3, #24
 80052b4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	2b18      	cmp	r3, #24
 80052ba:	d862      	bhi.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	08005329 	.word	0x08005329
 80052c8:	08005383 	.word	0x08005383
 80052cc:	08005383 	.word	0x08005383
 80052d0:	08005383 	.word	0x08005383
 80052d4:	08005383 	.word	0x08005383
 80052d8:	08005383 	.word	0x08005383
 80052dc:	08005383 	.word	0x08005383
 80052e0:	08005383 	.word	0x08005383
 80052e4:	08005331 	.word	0x08005331
 80052e8:	08005383 	.word	0x08005383
 80052ec:	08005383 	.word	0x08005383
 80052f0:	08005383 	.word	0x08005383
 80052f4:	08005383 	.word	0x08005383
 80052f8:	08005383 	.word	0x08005383
 80052fc:	08005383 	.word	0x08005383
 8005300:	08005383 	.word	0x08005383
 8005304:	08005339 	.word	0x08005339
 8005308:	08005383 	.word	0x08005383
 800530c:	08005383 	.word	0x08005383
 8005310:	08005383 	.word	0x08005383
 8005314:	08005383 	.word	0x08005383
 8005318:	08005383 	.word	0x08005383
 800531c:	08005383 	.word	0x08005383
 8005320:	08005383 	.word	0x08005383
 8005324:	08005353 	.word	0x08005353
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005328:	f7fd fcda 	bl	8002ce0 <HAL_RCC_GetPCLK3Freq>
 800532c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800532e:	e0b8      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005330:	f7fd fb8c 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8005334:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005336:	e0b4      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005338:	4b5c      	ldr	r3, [pc, #368]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005344:	d102      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8005346:	4b5b      	ldr	r3, [pc, #364]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800534a:	e0aa      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005350:	e0a7      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005352:	4b56      	ldr	r3, [pc, #344]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800535e:	4b53      	ldr	r3, [pc, #332]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0e1b      	lsrs	r3, r3, #24
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800536a:	4b50      	ldr	r3, [pc, #320]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800536c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	0e1b      	lsrs	r3, r3, #24
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	4a4d      	ldr	r2, [pc, #308]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005380:	e08f      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005386:	e08c      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800538c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005390:	430b      	orrs	r3, r1
 8005392:	d14c      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005394:	4b45      	ldr	r3, [pc, #276]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005396:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800539a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800539e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053a6:	d013      	beq.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053ae:	d83b      	bhi.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053b6:	d013      	beq.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053be:	d833      	bhi.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d014      	beq.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053cc:	d014      	beq.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80053ce:	e02b      	b.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053d0:	f107 0318 	add.w	r3, r7, #24
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe fc7b 	bl	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053de:	e060      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fe fb0d 	bl	8003a04 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053ee:	e058      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80053f0:	f7fd fb2c 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80053f4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80053f6:	e054      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053f8:	4b2c      	ldr	r3, [pc, #176]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8005404:	4b29      	ldr	r3, [pc, #164]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	e006      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005410:	4b26      	ldr	r3, [pc, #152]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	0e1b      	lsrs	r3, r3, #24
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	4a24      	ldr	r2, [pc, #144]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8005420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005426:	e03c      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800542c:	e039      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800542e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005432:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005436:	430b      	orrs	r3, r1
 8005438:	d131      	bne.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800543a:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800543c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005444:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005446:	4b19      	ldr	r3, [pc, #100]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d106      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800545a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
 8005460:	e01f      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005462:	4b12      	ldr	r3, [pc, #72]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800546c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005470:	d112      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005478:	d10e      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800547c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005488:	d102      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800548a:	23fa      	movs	r3, #250	; 0xfa
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800548e:	e008      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005490:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005496:	e004      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
 800549c:	e001      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80054a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3738      	adds	r7, #56	; 0x38
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	46020c00 	.word	0x46020c00
 80054b0:	08008080 	.word	0x08008080
 80054b4:	00f42400 	.word	0x00f42400

080054b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80054c0:	4b47      	ldr	r3, [pc, #284]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a46      	ldr	r2, [pc, #280]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 80054c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054cc:	f7fb fd14 	bl	8000ef8 <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054d2:	e008      	b.n	80054e6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054d4:	f7fb fd10 	bl	8000ef8 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e077      	b.n	80055d6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054e6:	4b3e      	ldr	r3, [pc, #248]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80054f2:	4b3b      	ldr	r3, [pc, #236]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054fa:	f023 0303 	bic.w	r3, r3, #3
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6811      	ldr	r1, [r2, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6852      	ldr	r2, [r2, #4]
 8005506:	3a01      	subs	r2, #1
 8005508:	0212      	lsls	r2, r2, #8
 800550a:	430a      	orrs	r2, r1
 800550c:	4934      	ldr	r1, [pc, #208]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 800550e:	4313      	orrs	r3, r2
 8005510:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005512:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 8005514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005516:	4b33      	ldr	r3, [pc, #204]	; (80055e4 <RCCEx_PLL2_Config+0x12c>)
 8005518:	4013      	ands	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6892      	ldr	r2, [r2, #8]
 800551e:	3a01      	subs	r2, #1
 8005520:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	68d2      	ldr	r2, [r2, #12]
 8005528:	3a01      	subs	r2, #1
 800552a:	0252      	lsls	r2, r2, #9
 800552c:	b292      	uxth	r2, r2
 800552e:	4311      	orrs	r1, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6912      	ldr	r2, [r2, #16]
 8005534:	3a01      	subs	r2, #1
 8005536:	0412      	lsls	r2, r2, #16
 8005538:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800553c:	4311      	orrs	r1, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6952      	ldr	r2, [r2, #20]
 8005542:	3a01      	subs	r2, #1
 8005544:	0612      	lsls	r2, r2, #24
 8005546:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800554a:	430a      	orrs	r2, r1
 800554c:	4924      	ldr	r1, [pc, #144]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 800554e:	4313      	orrs	r3, r2
 8005550:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005552:	4b23      	ldr	r3, [pc, #140]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	f023 020c 	bic.w	r2, r3, #12
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	4920      	ldr	r1, [pc, #128]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 8005560:	4313      	orrs	r3, r2
 8005562:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005564:	4b1e      	ldr	r3, [pc, #120]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	491c      	ldr	r1, [pc, #112]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 800556e:	4313      	orrs	r3, r2
 8005570:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005572:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	4a1a      	ldr	r2, [pc, #104]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 8005578:	f023 0310 	bic.w	r3, r3, #16
 800557c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800557e:	4b18      	ldr	r3, [pc, #96]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005586:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	69d2      	ldr	r2, [r2, #28]
 800558e:	00d2      	lsls	r2, r2, #3
 8005590:	4913      	ldr	r1, [pc, #76]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 8005592:	4313      	orrs	r3, r2
 8005594:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005596:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	4a11      	ldr	r2, [pc, #68]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 800559c:	f043 0310 	orr.w	r3, r3, #16
 80055a0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80055a2:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a0e      	ldr	r2, [pc, #56]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 80055a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055ae:	f7fb fca3 	bl	8000ef8 <HAL_GetTick>
 80055b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055b4:	e008      	b.n	80055c8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055b6:	f7fb fc9f 	bl	8000ef8 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e006      	b.n	80055d6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055c8:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <RCCEx_PLL2_Config+0x128>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0

}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	46020c00 	.word	0x46020c00
 80055e4:	80800000 	.word	0x80800000

080055e8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80055f0:	4b47      	ldr	r3, [pc, #284]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a46      	ldr	r2, [pc, #280]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80055f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055fc:	f7fb fc7c 	bl	8000ef8 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005602:	e008      	b.n	8005616 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005604:	f7fb fc78 	bl	8000ef8 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e077      	b.n	8005706 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005616:	4b3e      	ldr	r3, [pc, #248]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005622:	4b3b      	ldr	r3, [pc, #236]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6852      	ldr	r2, [r2, #4]
 8005636:	3a01      	subs	r2, #1
 8005638:	0212      	lsls	r2, r2, #8
 800563a:	430a      	orrs	r2, r1
 800563c:	4934      	ldr	r1, [pc, #208]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 800563e:	4313      	orrs	r3, r2
 8005640:	630b      	str	r3, [r1, #48]	; 0x30
 8005642:	4b33      	ldr	r3, [pc, #204]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 8005644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005646:	4b33      	ldr	r3, [pc, #204]	; (8005714 <RCCEx_PLL3_Config+0x12c>)
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6892      	ldr	r2, [r2, #8]
 800564e:	3a01      	subs	r2, #1
 8005650:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	68d2      	ldr	r2, [r2, #12]
 8005658:	3a01      	subs	r2, #1
 800565a:	0252      	lsls	r2, r2, #9
 800565c:	b292      	uxth	r2, r2
 800565e:	4311      	orrs	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6912      	ldr	r2, [r2, #16]
 8005664:	3a01      	subs	r2, #1
 8005666:	0412      	lsls	r2, r2, #16
 8005668:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800566c:	4311      	orrs	r1, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6952      	ldr	r2, [r2, #20]
 8005672:	3a01      	subs	r2, #1
 8005674:	0612      	lsls	r2, r2, #24
 8005676:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800567a:	430a      	orrs	r2, r1
 800567c:	4924      	ldr	r1, [pc, #144]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 800567e:	4313      	orrs	r3, r2
 8005680:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005682:	4b23      	ldr	r3, [pc, #140]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f023 020c 	bic.w	r2, r3, #12
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	4920      	ldr	r1, [pc, #128]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 8005690:	4313      	orrs	r3, r2
 8005692:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005694:	4b1e      	ldr	r3, [pc, #120]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 8005696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	491c      	ldr	r1, [pc, #112]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	4a1a      	ldr	r2, [pc, #104]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80056a8:	f023 0310 	bic.w	r3, r3, #16
 80056ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056ae:	4b18      	ldr	r3, [pc, #96]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80056b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	69d2      	ldr	r2, [r2, #28]
 80056be:	00d2      	lsls	r2, r2, #3
 80056c0:	4913      	ldr	r1, [pc, #76]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	4a11      	ldr	r2, [pc, #68]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80056cc:	f043 0310 	orr.w	r3, r3, #16
 80056d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056de:	f7fb fc0b 	bl	8000ef8 <HAL_GetTick>
 80056e2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056e4:	e008      	b.n	80056f8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056e6:	f7fb fc07 	bl	8000ef8 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e006      	b.n	8005706 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <RCCEx_PLL3_Config+0x128>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0f0      	beq.n	80056e6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	46020c00 	.word	0x46020c00
 8005714:	80800000 	.word	0x80800000

08005718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e049      	b.n	80057be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f841 	bl	80057c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f000 fa88 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d001      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e072      	b.n	80058da <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a35      	ldr	r2, [pc, #212]	; (80058e8 <HAL_TIM_Base_Start_IT+0x10c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d040      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a34      	ldr	r2, [pc, #208]	; (80058ec <HAL_TIM_Base_Start_IT+0x110>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d03b      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d036      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005832:	d031      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <HAL_TIM_Base_Start_IT+0x114>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02c      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a2c      	ldr	r2, [pc, #176]	; (80058f4 <HAL_TIM_Base_Start_IT+0x118>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d027      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <HAL_TIM_Base_Start_IT+0x11c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d022      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a29      	ldr	r2, [pc, #164]	; (80058fc <HAL_TIM_Base_Start_IT+0x120>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d01d      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a27      	ldr	r2, [pc, #156]	; (8005900 <HAL_TIM_Base_Start_IT+0x124>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d018      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a26      	ldr	r2, [pc, #152]	; (8005904 <HAL_TIM_Base_Start_IT+0x128>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a24      	ldr	r2, [pc, #144]	; (8005908 <HAL_TIM_Base_Start_IT+0x12c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00e      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a23      	ldr	r2, [pc, #140]	; (800590c <HAL_TIM_Base_Start_IT+0x130>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d009      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a21      	ldr	r2, [pc, #132]	; (8005910 <HAL_TIM_Base_Start_IT+0x134>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xbc>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a20      	ldr	r2, [pc, #128]	; (8005914 <HAL_TIM_Base_Start_IT+0x138>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d115      	bne.n	80058c4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <HAL_TIM_Base_Start_IT+0x13c>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d015      	beq.n	80058d6 <HAL_TIM_Base_Start_IT+0xfa>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d011      	beq.n	80058d6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	e008      	b.n	80058d6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	e000      	b.n	80058d8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	50012c00 	.word	0x50012c00
 80058f0:	40000400 	.word	0x40000400
 80058f4:	50000400 	.word	0x50000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	50000800 	.word	0x50000800
 8005900:	40000c00 	.word	0x40000c00
 8005904:	50000c00 	.word	0x50000c00
 8005908:	40013400 	.word	0x40013400
 800590c:	50013400 	.word	0x50013400
 8005910:	40014000 	.word	0x40014000
 8005914:	50014000 	.word	0x50014000
 8005918:	00010007 	.word	0x00010007

0800591c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b02      	cmp	r3, #2
 8005930:	d122      	bne.n	8005978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b02      	cmp	r3, #2
 800593e:	d11b      	bne.n	8005978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0202 	mvn.w	r2, #2
 8005948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f965 	bl	8005c2e <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f957 	bl	8005c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f968 	bl	8005c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b04      	cmp	r3, #4
 8005984:	d122      	bne.n	80059cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b04      	cmp	r3, #4
 8005992:	d11b      	bne.n	80059cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0204 	mvn.w	r2, #4
 800599c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f93b 	bl	8005c2e <HAL_TIM_IC_CaptureCallback>
 80059b8:	e005      	b.n	80059c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f92d 	bl	8005c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f93e 	bl	8005c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d122      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d11b      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0208 	mvn.w	r2, #8
 80059f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2204      	movs	r2, #4
 80059f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f911 	bl	8005c2e <HAL_TIM_IC_CaptureCallback>
 8005a0c:	e005      	b.n	8005a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f903 	bl	8005c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f914 	bl	8005c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d122      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d11b      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0210 	mvn.w	r2, #16
 8005a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2208      	movs	r2, #8
 8005a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8e7 	bl	8005c2e <HAL_TIM_IC_CaptureCallback>
 8005a60:	e005      	b.n	8005a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f8d9 	bl	8005c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f8ea 	bl	8005c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d10e      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d107      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0201 	mvn.w	r2, #1
 8005a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fa ffd4 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d10e      	bne.n	8005acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d107      	bne.n	8005acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f9d4 	bl	8005e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ada:	d10e      	bne.n	8005afa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b80      	cmp	r3, #128	; 0x80
 8005ae8:	d107      	bne.n	8005afa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f9c7 	bl	8005e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d10e      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b40      	cmp	r3, #64	; 0x40
 8005b14:	d107      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f898 	bl	8005c56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d10e      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	d107      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f06f 0220 	mvn.w	r2, #32
 8005b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f987 	bl	8005e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b60:	d10f      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b70:	d107      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f98d 	bl	8005e9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b90:	d10f      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba0:	d107      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f97f 	bl	8005eb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc0:	d10f      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd0:	d107      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f971 	bl	8005ec4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bf0:	d10f      	bne.n	8005c12 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c00:	d107      	bne.n	8005c12 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f963 	bl	8005ed8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a68      	ldr	r2, [pc, #416]	; (8005e20 <TIM_Base_SetConfig+0x1b4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d02b      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a67      	ldr	r2, [pc, #412]	; (8005e24 <TIM_Base_SetConfig+0x1b8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d027      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d023      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c9a:	d01f      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a62      	ldr	r2, [pc, #392]	; (8005e28 <TIM_Base_SetConfig+0x1bc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d01b      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a61      	ldr	r2, [pc, #388]	; (8005e2c <TIM_Base_SetConfig+0x1c0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d017      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a60      	ldr	r2, [pc, #384]	; (8005e30 <TIM_Base_SetConfig+0x1c4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a5f      	ldr	r2, [pc, #380]	; (8005e34 <TIM_Base_SetConfig+0x1c8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a5e      	ldr	r2, [pc, #376]	; (8005e38 <TIM_Base_SetConfig+0x1cc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a5d      	ldr	r2, [pc, #372]	; (8005e3c <TIM_Base_SetConfig+0x1d0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a5c      	ldr	r2, [pc, #368]	; (8005e40 <TIM_Base_SetConfig+0x1d4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_Base_SetConfig+0x70>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a5b      	ldr	r2, [pc, #364]	; (8005e44 <TIM_Base_SetConfig+0x1d8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d108      	bne.n	8005cee <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a4b      	ldr	r2, [pc, #300]	; (8005e20 <TIM_Base_SetConfig+0x1b4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d043      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a4a      	ldr	r2, [pc, #296]	; (8005e24 <TIM_Base_SetConfig+0x1b8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d03f      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d03b      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d0c:	d037      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a45      	ldr	r2, [pc, #276]	; (8005e28 <TIM_Base_SetConfig+0x1bc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d033      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a44      	ldr	r2, [pc, #272]	; (8005e2c <TIM_Base_SetConfig+0x1c0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02f      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a43      	ldr	r2, [pc, #268]	; (8005e30 <TIM_Base_SetConfig+0x1c4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d02b      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a42      	ldr	r2, [pc, #264]	; (8005e34 <TIM_Base_SetConfig+0x1c8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d027      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a41      	ldr	r2, [pc, #260]	; (8005e38 <TIM_Base_SetConfig+0x1cc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d023      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a40      	ldr	r2, [pc, #256]	; (8005e3c <TIM_Base_SetConfig+0x1d0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01f      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a3f      	ldr	r2, [pc, #252]	; (8005e40 <TIM_Base_SetConfig+0x1d4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01b      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a3e      	ldr	r2, [pc, #248]	; (8005e44 <TIM_Base_SetConfig+0x1d8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d017      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <TIM_Base_SetConfig+0x1dc>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <TIM_Base_SetConfig+0x1e0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00f      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a3b      	ldr	r2, [pc, #236]	; (8005e50 <TIM_Base_SetConfig+0x1e4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00b      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a3a      	ldr	r2, [pc, #232]	; (8005e54 <TIM_Base_SetConfig+0x1e8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a39      	ldr	r2, [pc, #228]	; (8005e58 <TIM_Base_SetConfig+0x1ec>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d003      	beq.n	8005d7e <TIM_Base_SetConfig+0x112>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a38      	ldr	r2, [pc, #224]	; (8005e5c <TIM_Base_SetConfig+0x1f0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d108      	bne.n	8005d90 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a1a      	ldr	r2, [pc, #104]	; (8005e20 <TIM_Base_SetConfig+0x1b4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d023      	beq.n	8005e04 <TIM_Base_SetConfig+0x198>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a19      	ldr	r2, [pc, #100]	; (8005e24 <TIM_Base_SetConfig+0x1b8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d01f      	beq.n	8005e04 <TIM_Base_SetConfig+0x198>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <TIM_Base_SetConfig+0x1d4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d01b      	beq.n	8005e04 <TIM_Base_SetConfig+0x198>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <TIM_Base_SetConfig+0x1d8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d017      	beq.n	8005e04 <TIM_Base_SetConfig+0x198>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <TIM_Base_SetConfig+0x1dc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <TIM_Base_SetConfig+0x198>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <TIM_Base_SetConfig+0x1e0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00f      	beq.n	8005e04 <TIM_Base_SetConfig+0x198>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a1a      	ldr	r2, [pc, #104]	; (8005e50 <TIM_Base_SetConfig+0x1e4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_Base_SetConfig+0x198>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a19      	ldr	r2, [pc, #100]	; (8005e54 <TIM_Base_SetConfig+0x1e8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_Base_SetConfig+0x198>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <TIM_Base_SetConfig+0x1ec>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0x198>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <TIM_Base_SetConfig+0x1f0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d103      	bne.n	8005e0c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	615a      	str	r2, [r3, #20]
}
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	50012c00 	.word	0x50012c00
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	50000400 	.word	0x50000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	50000800 	.word	0x50000800
 8005e38:	40000c00 	.word	0x40000c00
 8005e3c:	50000c00 	.word	0x50000c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	50013400 	.word	0x50013400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	50014000 	.word	0x50014000
 8005e50:	40014400 	.word	0x40014400
 8005e54:	50014400 	.word	0x50014400
 8005e58:	40014800 	.word	0x40014800
 8005e5c:	50014800 	.word	0x50014800

08005e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e042      	b.n	8005f84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fa fdcd 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2224      	movs	r2, #36	; 0x24
 8005f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fc22 	bl	8006778 <UART_SetConfig>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e022      	b.n	8005f84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fdb8 	bl	8006abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fe3f 	bl	8006c00 <UART_CheckIdleState>
 8005f82:	4603      	mov	r3, r0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b091      	sub	sp, #68	; 0x44
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	f040 809b 	bne.w	80060dc <HAL_UART_Transmit_IT+0x150>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <HAL_UART_Transmit_IT+0x26>
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e093      	b.n	80060de <HAL_UART_Transmit_IT+0x152>
    }

    __HAL_LOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_UART_Transmit_IT+0x38>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e08c      	b.n	80060de <HAL_UART_Transmit_IT+0x152>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d107      	bne.n	8005fea <HAL_UART_Transmit_IT+0x5e>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fe8:	609a      	str	r2, [r3, #8]
    }

    huart->pTxBuffPtr  = pData;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	88fa      	ldrh	r2, [r7, #6]
 8005ffc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2221      	movs	r2, #33	; 0x21
 8006012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800601a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601e:	d12e      	bne.n	800607e <HAL_UART_Transmit_IT+0xf2>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006028:	d107      	bne.n	800603a <HAL_UART_Transmit_IT+0xae>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <HAL_UART_Transmit_IT+0xae>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a2d      	ldr	r2, [pc, #180]	; (80060ec <HAL_UART_Transmit_IT+0x160>)
 8006036:	675a      	str	r2, [r3, #116]	; 0x74
 8006038:	e002      	b.n	8006040 <HAL_UART_Transmit_IT+0xb4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4a2c      	ldr	r2, [pc, #176]	; (80060f0 <HAL_UART_Transmit_IT+0x164>)
 800603e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800605e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006068:	637a      	str	r2, [r7, #52]	; 0x34
 800606a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800606e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e5      	bne.n	8006048 <HAL_UART_Transmit_IT+0xbc>
 800607c:	e02c      	b.n	80060d8 <HAL_UART_Transmit_IT+0x14c>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	d107      	bne.n	8006098 <HAL_UART_Transmit_IT+0x10c>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <HAL_UART_Transmit_IT+0x10c>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_UART_Transmit_IT+0x168>)
 8006094:	675a      	str	r2, [r3, #116]	; 0x74
 8006096:	e002      	b.n	800609e <HAL_UART_Transmit_IT+0x112>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a17      	ldr	r2, [pc, #92]	; (80060f8 <HAL_UART_Transmit_IT+0x16c>)
 800609c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	613b      	str	r3, [r7, #16]
   return(result);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c4:	623b      	str	r3, [r7, #32]
 80060c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	69f9      	ldr	r1, [r7, #28]
 80060ca:	6a3a      	ldr	r2, [r7, #32]
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e6      	bne.n	80060a6 <HAL_UART_Transmit_IT+0x11a>
    }

    return HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	e000      	b.n	80060de <HAL_UART_Transmit_IT+0x152>
  }
  else
  {
    return HAL_BUSY;
 80060dc:	2302      	movs	r3, #2
  }
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3744      	adds	r7, #68	; 0x44
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	080073cf 	.word	0x080073cf
 80060f0:	080072ef 	.word	0x080072ef
 80060f4:	0800722d 	.word	0x0800722d
 80060f8:	08007175 	.word	0x08007175

080060fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08a      	sub	sp, #40	; 0x28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006110:	2b20      	cmp	r3, #32
 8006112:	d156      	bne.n	80061c2 <HAL_UART_Receive_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_UART_Receive_IT+0x24>
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e04f      	b.n	80061c4 <HAL_UART_Receive_IT+0xc8>
    }

    __HAL_LOCK(huart);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_UART_Receive_IT+0x36>
 800612e:	2302      	movs	r3, #2
 8006130:	e048      	b.n	80061c4 <HAL_UART_Receive_IT+0xc8>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d107      	bne.n	800615e <HAL_UART_Receive_IT+0x62>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615c:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1a      	ldr	r2, [pc, #104]	; (80061cc <HAL_UART_Receive_IT+0xd0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d024      	beq.n	80061b2 <HAL_UART_Receive_IT+0xb6>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a18      	ldr	r2, [pc, #96]	; (80061d0 <HAL_UART_Receive_IT+0xd4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01f      	beq.n	80061b2 <HAL_UART_Receive_IT+0xb6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d018      	beq.n	80061b2 <HAL_UART_Receive_IT+0xb6>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	613b      	str	r3, [r7, #16]
   return(result);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	623b      	str	r3, [r7, #32]
 80061a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	69f9      	ldr	r1, [r7, #28]
 80061a4:	6a3a      	ldr	r2, [r7, #32]
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e6      	bne.n	8006180 <HAL_UART_Receive_IT+0x84>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	461a      	mov	r2, r3
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fe35 	bl	8006e28 <UART_Start_Receive_IT>
 80061be:	4603      	mov	r3, r0
 80061c0:	e000      	b.n	80061c4 <HAL_UART_Receive_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80061c2:	2302      	movs	r3, #2
  }
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3728      	adds	r7, #40	; 0x28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	46002400 	.word	0x46002400
 80061d0:	56002400 	.word	0x56002400

080061d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b0ae      	sub	sp, #184	; 0xb8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006202:	4013      	ands	r3, r2
 8006204:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8006208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11b      	bne.n	8006248 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006210:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b00      	cmp	r3, #0
 800621a:	d015      	beq.n	8006248 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800621c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800622c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8271 	beq.w	8006720 <HAL_UART_IRQHandler+0x54c>
      {
        huart->RxISR(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
      }
      return;
 8006246:	e26b      	b.n	8006720 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80f9 	beq.w	8006444 <HAL_UART_IRQHandler+0x270>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006252:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006256:	4b78      	ldr	r3, [pc, #480]	; (8006438 <HAL_UART_IRQHandler+0x264>)
 8006258:	4013      	ands	r3, r2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800625e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006262:	4b76      	ldr	r3, [pc, #472]	; (800643c <HAL_UART_IRQHandler+0x268>)
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80ec 	beq.w	8006444 <HAL_UART_IRQHandler+0x270>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800626c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d011      	beq.n	800629c <HAL_UART_IRQHandler+0xc8>
 8006278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800627c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2201      	movs	r2, #1
 800628a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006292:	f043 0201 	orr.w	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800629c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d011      	beq.n	80062cc <HAL_UART_IRQHandler+0xf8>
 80062a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2202      	movs	r2, #2
 80062ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c2:	f043 0204 	orr.w	r2, r3, #4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d011      	beq.n	80062fc <HAL_UART_IRQHandler+0x128>
 80062d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2204      	movs	r2, #4
 80062ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f2:	f043 0202 	orr.w	r2, r3, #2
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b00      	cmp	r3, #0
 8006306:	d017      	beq.n	8006338 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006318:	4b47      	ldr	r3, [pc, #284]	; (8006438 <HAL_UART_IRQHandler+0x264>)
 800631a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2208      	movs	r2, #8
 8006326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800632e:	f043 0208 	orr.w	r2, r3, #8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800633c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006340:	2b00      	cmp	r3, #0
 8006342:	d012      	beq.n	800636a <HAL_UART_IRQHandler+0x196>
 8006344:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006348:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00c      	beq.n	800636a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006358:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006360:	f043 0220 	orr.w	r2, r3, #32
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 81d7 	beq.w	8006724 <HAL_UART_IRQHandler+0x550>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d013      	beq.n	80063aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006382:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d105      	bne.n	800639a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800638e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d005      	beq.n	80063ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d029      	beq.n	8006422 <HAL_UART_IRQHandler+0x24e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fe54 	bl	800707c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d11b      	bne.n	800641a <HAL_UART_IRQHandler+0x246>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d013      	beq.n	8006412 <HAL_UART_IRQHandler+0x23e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ee:	4a14      	ldr	r2, [pc, #80]	; (8006440 <HAL_UART_IRQHandler+0x26c>)
 80063f0:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fa ff0a 	bl	8001210 <HAL_DMA_Abort_IT>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d017      	beq.n	8006432 <HAL_UART_IRQHandler+0x25e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800640c:	4610      	mov	r0, r2
 800640e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	e00f      	b.n	8006432 <HAL_UART_IRQHandler+0x25e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f99a 	bl	800674c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006418:	e00b      	b.n	8006432 <HAL_UART_IRQHandler+0x25e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f996 	bl	800674c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	e007      	b.n	8006432 <HAL_UART_IRQHandler+0x25e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f992 	bl	800674c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006430:	e178      	b.n	8006724 <HAL_UART_IRQHandler+0x550>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006432:	bf00      	nop
    return;
 8006434:	e176      	b.n	8006724 <HAL_UART_IRQHandler+0x550>
 8006436:	bf00      	nop
 8006438:	10000001 	.word	0x10000001
 800643c:	04000120 	.word	0x04000120
 8006440:	08007149 	.word	0x08007149

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 8120 	bne.w	800668e <HAL_UART_IRQHandler+0x4ba>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800644e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8119 	beq.w	800668e <HAL_UART_IRQHandler+0x4ba>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800645c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8112 	beq.w	800668e <HAL_UART_IRQHandler+0x4ba>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2210      	movs	r2, #16
 8006470:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	f040 808b 	bne.w	8006598 <HAL_UART_IRQHandler+0x3c4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800648e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8148 	beq.w	8006728 <HAL_UART_IRQHandler+0x554>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800649e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80064a2:	429a      	cmp	r2, r3
 80064a4:	f080 8140 	bcs.w	8006728 <HAL_UART_IRQHandler+0x554>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80064ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b8:	2b81      	cmp	r3, #129	; 0x81
 80064ba:	d05f      	beq.n	800657c <HAL_UART_IRQHandler+0x3a8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064e2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e2      	bne.n	80064bc <HAL_UART_IRQHandler+0x2e8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800651a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800651c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e3      	bne.n	80064f6 <HAL_UART_IRQHandler+0x322>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800654a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800654c:	f023 0310 	bic.w	r3, r3, #16
 8006550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800655e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006560:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800656c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e4      	bne.n	800653c <HAL_UART_IRQHandler+0x368>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006576:	4618      	mov	r0, r3
 8006578:	f7fa fdce 	bl	8001118 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006588:	b29b      	uxth	r3, r3
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	b29b      	uxth	r3, r3
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f8e5 	bl	8006760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006596:	e0c7      	b.n	8006728 <HAL_UART_IRQHandler+0x554>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80b9 	beq.w	800672c <HAL_UART_IRQHandler+0x558>
          && (nb_rx_data > 0U))
 80065ba:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80b4 	beq.w	800672c <HAL_UART_IRQHandler+0x558>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065e6:	647b      	str	r3, [r7, #68]	; 0x44
 80065e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e4      	bne.n	80065c4 <HAL_UART_IRQHandler+0x3f0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	623b      	str	r3, [r7, #32]
   return(result);
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006622:	633a      	str	r2, [r7, #48]	; 0x30
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e1      	bne.n	80065fa <HAL_UART_IRQHandler+0x426>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	60fb      	str	r3, [r7, #12]
   return(result);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0310 	bic.w	r3, r3, #16
 800665e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	69b9      	ldr	r1, [r7, #24]
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	617b      	str	r3, [r7, #20]
   return(result);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e4      	bne.n	800664a <HAL_UART_IRQHandler+0x476>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006680:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f86a 	bl	8006760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800668c:	e04e      	b.n	800672c <HAL_UART_IRQHandler+0x558>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800668e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d014      	beq.n	80066c4 <HAL_UART_IRQHandler+0x4f0>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800669a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <HAL_UART_IRQHandler+0x4de>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d008      	beq.n	80066c4 <HAL_UART_IRQHandler+0x4f0>
  {
    if (huart->TxISR != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d03a      	beq.n	8006730 <HAL_UART_IRQHandler+0x55c>
    {
      huart->TxISR(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
    }
    return;
 80066c2:	e035      	b.n	8006730 <HAL_UART_IRQHandler+0x55c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <HAL_UART_IRQHandler+0x510>
 80066d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_UART_IRQHandler+0x510>
  {
    UART_EndTransmit_IT(huart);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 feeb 	bl	80074b8 <UART_EndTransmit_IT>
    return;
 80066e2:	e026      	b.n	8006732 <HAL_UART_IRQHandler+0x55e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d009      	beq.n	8006704 <HAL_UART_IRQHandler+0x530>
 80066f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_UART_IRQHandler+0x530>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fb6d 	bl	8007ddc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006702:	e016      	b.n	8006732 <HAL_UART_IRQHandler+0x55e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006704:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d010      	beq.n	8006732 <HAL_UART_IRQHandler+0x55e>
 8006710:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006714:	2b00      	cmp	r3, #0
 8006716:	da0c      	bge.n	8006732 <HAL_UART_IRQHandler+0x55e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 fb55 	bl	8007dc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800671e:	e008      	b.n	8006732 <HAL_UART_IRQHandler+0x55e>
      return;
 8006720:	bf00      	nop
 8006722:	e006      	b.n	8006732 <HAL_UART_IRQHandler+0x55e>
    return;
 8006724:	bf00      	nop
 8006726:	e004      	b.n	8006732 <HAL_UART_IRQHandler+0x55e>
      return;
 8006728:	bf00      	nop
 800672a:	e002      	b.n	8006732 <HAL_UART_IRQHandler+0x55e>
      return;
 800672c:	bf00      	nop
 800672e:	e000      	b.n	8006732 <HAL_UART_IRQHandler+0x55e>
    return;
 8006730:	bf00      	nop
  }
}
 8006732:	37b8      	adds	r7, #184	; 0xb8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800677c:	b094      	sub	sp, #80	; 0x50
 800677e:	af00      	add	r7, sp, #0
 8006780:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b7e      	ldr	r3, [pc, #504]	; (8006988 <UART_SetConfig+0x210>)
 800678e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	431a      	orrs	r2, r3
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	431a      	orrs	r2, r3
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4977      	ldr	r1, [pc, #476]	; (800698c <UART_SetConfig+0x214>)
 80067b0:	4019      	ands	r1, r3
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b8:	430b      	orrs	r3, r1
 80067ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	68d9      	ldr	r1, [r3, #12]
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	ea40 0301 	orr.w	r3, r0, r1
 80067d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4b6a      	ldr	r3, [pc, #424]	; (8006988 <UART_SetConfig+0x210>)
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d009      	beq.n	80067f8 <UART_SetConfig+0x80>
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b69      	ldr	r3, [pc, #420]	; (8006990 <UART_SetConfig+0x218>)
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d004      	beq.n	80067f8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f4:	4313      	orrs	r3, r2
 80067f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8006802:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680c:	430b      	orrs	r3, r1
 800680e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	f023 000f 	bic.w	r0, r3, #15
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	ea40 0301 	orr.w	r3, r0, r1
 8006826:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	4b59      	ldr	r3, [pc, #356]	; (8006994 <UART_SetConfig+0x21c>)
 800682e:	429a      	cmp	r2, r3
 8006830:	d102      	bne.n	8006838 <UART_SetConfig+0xc0>
 8006832:	2301      	movs	r3, #1
 8006834:	64bb      	str	r3, [r7, #72]	; 0x48
 8006836:	e029      	b.n	800688c <UART_SetConfig+0x114>
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4b56      	ldr	r3, [pc, #344]	; (8006998 <UART_SetConfig+0x220>)
 800683e:	429a      	cmp	r2, r3
 8006840:	d102      	bne.n	8006848 <UART_SetConfig+0xd0>
 8006842:	2302      	movs	r3, #2
 8006844:	64bb      	str	r3, [r7, #72]	; 0x48
 8006846:	e021      	b.n	800688c <UART_SetConfig+0x114>
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4b53      	ldr	r3, [pc, #332]	; (800699c <UART_SetConfig+0x224>)
 800684e:	429a      	cmp	r2, r3
 8006850:	d102      	bne.n	8006858 <UART_SetConfig+0xe0>
 8006852:	2304      	movs	r3, #4
 8006854:	64bb      	str	r3, [r7, #72]	; 0x48
 8006856:	e019      	b.n	800688c <UART_SetConfig+0x114>
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b50      	ldr	r3, [pc, #320]	; (80069a0 <UART_SetConfig+0x228>)
 800685e:	429a      	cmp	r2, r3
 8006860:	d102      	bne.n	8006868 <UART_SetConfig+0xf0>
 8006862:	2308      	movs	r3, #8
 8006864:	64bb      	str	r3, [r7, #72]	; 0x48
 8006866:	e011      	b.n	800688c <UART_SetConfig+0x114>
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b4d      	ldr	r3, [pc, #308]	; (80069a4 <UART_SetConfig+0x22c>)
 800686e:	429a      	cmp	r2, r3
 8006870:	d102      	bne.n	8006878 <UART_SetConfig+0x100>
 8006872:	2310      	movs	r3, #16
 8006874:	64bb      	str	r3, [r7, #72]	; 0x48
 8006876:	e009      	b.n	800688c <UART_SetConfig+0x114>
 8006878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4b42      	ldr	r3, [pc, #264]	; (8006988 <UART_SetConfig+0x210>)
 800687e:	429a      	cmp	r2, r3
 8006880:	d102      	bne.n	8006888 <UART_SetConfig+0x110>
 8006882:	2320      	movs	r3, #32
 8006884:	64bb      	str	r3, [r7, #72]	; 0x48
 8006886:	e001      	b.n	800688c <UART_SetConfig+0x114>
 8006888:	2300      	movs	r3, #0
 800688a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	4b3d      	ldr	r3, [pc, #244]	; (8006988 <UART_SetConfig+0x210>)
 8006892:	429a      	cmp	r2, r3
 8006894:	d005      	beq.n	80068a2 <UART_SetConfig+0x12a>
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b3d      	ldr	r3, [pc, #244]	; (8006990 <UART_SetConfig+0x218>)
 800689c:	429a      	cmp	r2, r3
 800689e:	f040 8085 	bne.w	80069ac <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80068a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068a4:	2200      	movs	r2, #0
 80068a6:	623b      	str	r3, [r7, #32]
 80068a8:	627a      	str	r2, [r7, #36]	; 0x24
 80068aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80068ae:	f7fd fcdb 	bl	8004268 <HAL_RCCEx_GetPeriphCLKFreq>
 80068b2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80068b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80e8 	beq.w	8006a8c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	4a39      	ldr	r2, [pc, #228]	; (80069a8 <UART_SetConfig+0x230>)
 80068c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ce:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	4413      	add	r3, r2
 80068da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068dc:	429a      	cmp	r2, r3
 80068de:	d305      	bcc.n	80068ec <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d903      	bls.n	80068f4 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80068f2:	e048      	b.n	8006986 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f6:	2200      	movs	r2, #0
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	61fa      	str	r2, [r7, #28]
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	4a29      	ldr	r2, [pc, #164]	; (80069a8 <UART_SetConfig+0x230>)
 8006902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006906:	b29b      	uxth	r3, r3
 8006908:	2200      	movs	r2, #0
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	617a      	str	r2, [r7, #20]
 800690e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006912:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006916:	f7f9 fcad 	bl	8000274 <__aeabi_uldivmod>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4610      	mov	r0, r2
 8006920:	4619      	mov	r1, r3
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	020b      	lsls	r3, r1, #8
 800692c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006930:	0202      	lsls	r2, r0, #8
 8006932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006934:	6849      	ldr	r1, [r1, #4]
 8006936:	0849      	lsrs	r1, r1, #1
 8006938:	2000      	movs	r0, #0
 800693a:	460c      	mov	r4, r1
 800693c:	4605      	mov	r5, r0
 800693e:	eb12 0804 	adds.w	r8, r2, r4
 8006942:	eb43 0905 	adc.w	r9, r3, r5
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	60fa      	str	r2, [r7, #12]
 8006950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006954:	4640      	mov	r0, r8
 8006956:	4649      	mov	r1, r9
 8006958:	f7f9 fc8c 	bl	8000274 <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4613      	mov	r3, r2
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800696a:	d308      	bcc.n	800697e <UART_SetConfig+0x206>
 800696c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006972:	d204      	bcs.n	800697e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800697a:	60da      	str	r2, [r3, #12]
 800697c:	e003      	b.n	8006986 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8006984:	e082      	b.n	8006a8c <UART_SetConfig+0x314>
 8006986:	e081      	b.n	8006a8c <UART_SetConfig+0x314>
 8006988:	46002400 	.word	0x46002400
 800698c:	cfff69f3 	.word	0xcfff69f3
 8006990:	56002400 	.word	0x56002400
 8006994:	40013800 	.word	0x40013800
 8006998:	40004400 	.word	0x40004400
 800699c:	40004800 	.word	0x40004800
 80069a0:	40004c00 	.word	0x40004c00
 80069a4:	40005000 	.word	0x40005000
 80069a8:	08008140 	.word	0x08008140
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b4:	d13c      	bne.n	8006a30 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80069b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b8:	2200      	movs	r2, #0
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069c2:	f7fd fc51 	bl	8004268 <HAL_RCCEx_GetPeriphCLKFreq>
 80069c6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d05e      	beq.n	8006a8c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	4a39      	ldr	r2, [pc, #228]	; (8006ab8 <UART_SetConfig+0x340>)
 80069d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d8:	461a      	mov	r2, r3
 80069da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80069e0:	005a      	lsls	r2, r3, #1
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	441a      	add	r2, r3
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2b0f      	cmp	r3, #15
 80069f8:	d916      	bls.n	8006a28 <UART_SetConfig+0x2b0>
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a00:	d212      	bcs.n	8006a28 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f023 030f 	bic.w	r3, r3, #15
 8006a0a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006a24:	60da      	str	r2, [r3, #12]
 8006a26:	e031      	b.n	8006a8c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a2e:	e02d      	b.n	8006a8c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a32:	2200      	movs	r2, #0
 8006a34:	469a      	mov	sl, r3
 8006a36:	4693      	mov	fp, r2
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	f7fd fc14 	bl	8004268 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a40:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d021      	beq.n	8006a8c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	4a1a      	ldr	r2, [pc, #104]	; (8006ab8 <UART_SetConfig+0x340>)
 8006a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a52:	461a      	mov	r2, r3
 8006a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a56:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	441a      	add	r2, r3
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6e:	2b0f      	cmp	r3, #15
 8006a70:	d909      	bls.n	8006a86 <UART_SetConfig+0x30e>
 8006a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a78:	d205      	bcs.n	8006a86 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60da      	str	r2, [r3, #12]
 8006a84:	e002      	b.n	8006a8c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2201      	movs	r2, #1
 8006a98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3750      	adds	r7, #80	; 0x50
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ab6:	bf00      	nop
 8006ab8:	08008140 	.word	0x08008140

08006abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00a      	beq.n	8006b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01a      	beq.n	8006bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bba:	d10a      	bne.n	8006bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c10:	f7fa f972 	bl	8000ef8 <HAL_GetTick>
 8006c14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d10e      	bne.n	8006c42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f82f 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e025      	b.n	8006c8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d10e      	bne.n	8006c6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f819 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e00f      	b.n	8006c8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b09c      	sub	sp, #112	; 0x70
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca6:	e0a9      	b.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cae:	f000 80a5 	beq.w	8006dfc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fa f921 	bl	8000ef8 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d140      	bne.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ce8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e6      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	663b      	str	r3, [r7, #96]	; 0x60
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e069      	b.n	8006e1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d051      	beq.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d66:	d149      	bne.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d90:	637b      	str	r3, [r7, #52]	; 0x34
 8006d92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d98:	e841 2300 	strex	r3, r2, [r1]
 8006d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e6      	bne.n	8006d72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	613b      	str	r3, [r7, #16]
   return(result);
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dc4:	623a      	str	r2, [r7, #32]
 8006dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	69f9      	ldr	r1, [r7, #28]
 8006dca:	6a3a      	ldr	r2, [r7, #32]
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e5      	bne.n	8006da4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e010      	b.n	8006e1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69da      	ldr	r2, [r3, #28]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4013      	ands	r3, r2
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	bf0c      	ite	eq
 8006e0c:	2301      	moveq	r3, #1
 8006e0e:	2300      	movne	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	f43f af46 	beq.w	8006ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3770      	adds	r7, #112	; 0x70
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b0a3      	sub	sp, #140	; 0x8c
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	88fa      	ldrh	r2, [r7, #6]
 8006e48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5a:	d10e      	bne.n	8006e7a <UART_Start_Receive_IT+0x52>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d105      	bne.n	8006e70 <UART_Start_Receive_IT+0x48>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e6e:	e02d      	b.n	8006ecc <UART_Start_Receive_IT+0xa4>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	22ff      	movs	r2, #255	; 0xff
 8006e74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e78:	e028      	b.n	8006ecc <UART_Start_Receive_IT+0xa4>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10d      	bne.n	8006e9e <UART_Start_Receive_IT+0x76>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d104      	bne.n	8006e94 <UART_Start_Receive_IT+0x6c>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e92:	e01b      	b.n	8006ecc <UART_Start_Receive_IT+0xa4>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	227f      	movs	r2, #127	; 0x7f
 8006e98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e9c:	e016      	b.n	8006ecc <UART_Start_Receive_IT+0xa4>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ea6:	d10d      	bne.n	8006ec4 <UART_Start_Receive_IT+0x9c>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <UART_Start_Receive_IT+0x92>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	227f      	movs	r2, #127	; 0x7f
 8006eb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006eb8:	e008      	b.n	8006ecc <UART_Start_Receive_IT+0xa4>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	223f      	movs	r2, #63	; 0x3f
 8006ebe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ec2:	e003      	b.n	8006ecc <UART_Start_Receive_IT+0xa4>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2222      	movs	r2, #34	; 0x22
 8006ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006eee:	f043 0301 	orr.w	r3, r3, #1
 8006ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3308      	adds	r3, #8
 8006efc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006f00:	673a      	str	r2, [r7, #112]	; 0x70
 8006f02:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006f06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e3      	bne.n	8006edc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1c:	d153      	bne.n	8006fc6 <UART_Start_Receive_IT+0x19e>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d34d      	bcc.n	8006fc6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f32:	d107      	bne.n	8006f44 <UART_Start_Receive_IT+0x11c>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d103      	bne.n	8006f44 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4a4b      	ldr	r2, [pc, #300]	; (800706c <UART_Start_Receive_IT+0x244>)
 8006f40:	671a      	str	r2, [r3, #112]	; 0x70
 8006f42:	e002      	b.n	8006f4a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4a4a      	ldr	r2, [pc, #296]	; (8007070 <UART_Start_Receive_IT+0x248>)
 8006f48:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01a      	beq.n	8006f90 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f7e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e4      	bne.n	8006f5a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3308      	adds	r3, #8
 8006fae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006fb0:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fb2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e5      	bne.n	8006f90 <UART_Start_Receive_IT+0x168>
 8006fc4:	e04a      	b.n	800705c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fce:	d107      	bne.n	8006fe0 <UART_Start_Receive_IT+0x1b8>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d103      	bne.n	8006fe0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4a26      	ldr	r2, [pc, #152]	; (8007074 <UART_Start_Receive_IT+0x24c>)
 8006fdc:	671a      	str	r2, [r3, #112]	; 0x70
 8006fde:	e002      	b.n	8006fe6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4a25      	ldr	r2, [pc, #148]	; (8007078 <UART_Start_Receive_IT+0x250>)
 8006fe4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d019      	beq.n	800702a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800700a:	677b      	str	r3, [r7, #116]	; 0x74
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800701a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_Start_Receive_IT+0x1ce>
 8007028:	e018      	b.n	800705c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	613b      	str	r3, [r7, #16]
   return(result);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f043 0320 	orr.w	r3, r3, #32
 800703e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007048:	623b      	str	r3, [r7, #32]
 800704a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	6a3a      	ldr	r2, [r7, #32]
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	61bb      	str	r3, [r7, #24]
   return(result);
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e6      	bne.n	800702a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	378c      	adds	r7, #140	; 0x8c
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	08007ac9 	.word	0x08007ac9
 8007070:	080077d1 	.word	0x080077d1
 8007074:	0800766f 	.word	0x0800766f
 8007078:	0800750f 	.word	0x0800750f

0800707c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b095      	sub	sp, #84	; 0x54
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a2:	643b      	str	r3, [r7, #64]	; 0x40
 80070a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e6      	bne.n	8007084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3308      	adds	r3, #8
 80070bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e3      	bne.n	80070b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d118      	bne.n	8007128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	60bb      	str	r3, [r7, #8]
   return(result);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f023 0310 	bic.w	r3, r3, #16
 800710a:	647b      	str	r3, [r7, #68]	; 0x44
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	613b      	str	r3, [r7, #16]
   return(result);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e6      	bne.n	80070f6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800713c:	bf00      	nop
 800713e:	3754      	adds	r7, #84	; 0x54
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007154:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f7ff faf0 	bl	800674c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b08f      	sub	sp, #60	; 0x3c
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007182:	2b21      	cmp	r3, #33	; 0x21
 8007184:	d14c      	bne.n	8007220 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d132      	bne.n	80071f8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071a6:	637b      	str	r3, [r7, #52]	; 0x34
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e6      	bne.n	8007192 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6979      	ldr	r1, [r7, #20]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	613b      	str	r3, [r7, #16]
   return(result);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e6      	bne.n	80071c4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80071f6:	e013      	b.n	8007220 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007214:	b29b      	uxth	r3, r3
 8007216:	3b01      	subs	r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007220:	bf00      	nop
 8007222:	373c      	adds	r7, #60	; 0x3c
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b091      	sub	sp, #68	; 0x44
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723a:	2b21      	cmp	r3, #33	; 0x21
 800723c:	d151      	bne.n	80072e2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d132      	bne.n	80072b0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	623b      	str	r3, [r7, #32]
   return(result);
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800725e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	633b      	str	r3, [r7, #48]	; 0x30
 800726a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800726e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e6      	bne.n	800724a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	60fb      	str	r3, [r7, #12]
   return(result);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007290:	637b      	str	r3, [r7, #52]	; 0x34
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	69b9      	ldr	r1, [r7, #24]
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	617b      	str	r3, [r7, #20]
   return(result);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e6      	bne.n	800727c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80072ae:	e018      	b.n	80072e2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ca:	1c9a      	adds	r2, r3, #2
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80072e2:	bf00      	nop
 80072e4:	3744      	adds	r7, #68	; 0x44
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b091      	sub	sp, #68	; 0x44
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fc:	2b21      	cmp	r3, #33	; 0x21
 80072fe:	d160      	bne.n	80073c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007306:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007308:	e057      	b.n	80073ba <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d133      	bne.n	800737e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3308      	adds	r3, #8
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	623b      	str	r3, [r7, #32]
   return(result);
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800732c:	63bb      	str	r3, [r7, #56]	; 0x38
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3308      	adds	r3, #8
 8007334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007336:	633a      	str	r2, [r7, #48]	; 0x30
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800733c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1e5      	bne.n	8007316 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	60fb      	str	r3, [r7, #12]
   return(result);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800735e:	637b      	str	r3, [r7, #52]	; 0x34
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	69b9      	ldr	r1, [r7, #24]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	617b      	str	r3, [r7, #20]
   return(result);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e6      	bne.n	800734a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800737c:	e021      	b.n	80073c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007388:	2b00      	cmp	r3, #0
 800738a:	d013      	beq.n	80073b4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80073b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80073b6:	3b01      	subs	r3, #1
 80073b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80073ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1a4      	bne.n	800730a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80073c0:	e7ff      	b.n	80073c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80073c2:	bf00      	nop
 80073c4:	3744      	adds	r7, #68	; 0x44
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b091      	sub	sp, #68	; 0x44
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073dc:	2b21      	cmp	r3, #33	; 0x21
 80073de:	d165      	bne.n	80074ac <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80073e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80073e8:	e05c      	b.n	80074a4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d133      	bne.n	800745e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	61fb      	str	r3, [r7, #28]
   return(result);
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800741c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e5      	bne.n	80073f6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	60bb      	str	r3, [r7, #8]
   return(result);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800743e:	633b      	str	r3, [r7, #48]	; 0x30
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	61bb      	str	r3, [r7, #24]
 800744a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6979      	ldr	r1, [r7, #20]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	613b      	str	r3, [r7, #16]
   return(result);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e6      	bne.n	800742a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800745c:	e026      	b.n	80074ac <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b00      	cmp	r3, #0
 800746a:	d018      	beq.n	800749e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007470:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007480:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007486:	1c9a      	adds	r2, r3, #2
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800749e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80074a0:	3b01      	subs	r3, #1
 80074a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80074a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d19f      	bne.n	80073ea <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80074aa:	e7ff      	b.n	80074ac <UART_TxISR_16BIT_FIFOEN+0xde>
 80074ac:	bf00      	nop
 80074ae:	3744      	adds	r7, #68	; 0x44
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d4:	61fb      	str	r3, [r7, #28]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6979      	ldr	r1, [r7, #20]
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	613b      	str	r3, [r7, #16]
   return(result);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e6      	bne.n	80074c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7f9 fa91 	bl	8000a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007506:	bf00      	nop
 8007508:	3720      	adds	r7, #32
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b096      	sub	sp, #88	; 0x58
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800751c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007526:	2b22      	cmp	r3, #34	; 0x22
 8007528:	f040 8095 	bne.w	8007656 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007536:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800753a:	b2d9      	uxtb	r1, r3
 800753c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007546:	400a      	ands	r2, r1
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d178      	bne.n	8007666 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007588:	653b      	str	r3, [r7, #80]	; 0x50
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007592:	647b      	str	r3, [r7, #68]	; 0x44
 8007594:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3308      	adds	r3, #8
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	623b      	str	r3, [r7, #32]
   return(result);
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3308      	adds	r3, #8
 80075c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075c6:	633a      	str	r2, [r7, #48]	; 0x30
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e5      	bne.n	80075a6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d12e      	bne.n	800764e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	60fb      	str	r3, [r7, #12]
   return(result);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0310 	bic.w	r3, r3, #16
 800760a:	64bb      	str	r3, [r7, #72]	; 0x48
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	69b9      	ldr	r1, [r7, #24]
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	e841 2300 	strex	r3, r2, [r1]
 8007620:	617b      	str	r3, [r7, #20]
   return(result);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e6      	bne.n	80075f6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f003 0310 	and.w	r3, r3, #16
 8007632:	2b10      	cmp	r3, #16
 8007634:	d103      	bne.n	800763e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2210      	movs	r2, #16
 800763c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff f88a 	bl	8006760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800764c:	e00b      	b.n	8007666 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff f872 	bl	8006738 <HAL_UART_RxCpltCallback>
}
 8007654:	e007      	b.n	8007666 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699a      	ldr	r2, [r3, #24]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0208 	orr.w	r2, r2, #8
 8007664:	619a      	str	r2, [r3, #24]
}
 8007666:	bf00      	nop
 8007668:	3758      	adds	r7, #88	; 0x58
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b096      	sub	sp, #88	; 0x58
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800767c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	2b22      	cmp	r3, #34	; 0x22
 8007688:	f040 8095 	bne.w	80077b6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800769a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800769c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80076a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076a4:	4013      	ands	r3, r2
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076aa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b0:	1c9a      	adds	r2, r3, #2
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d178      	bne.n	80077c6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f2:	643b      	str	r3, [r7, #64]	; 0x40
 80076f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e6      	bne.n	80076d4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	61fb      	str	r3, [r7, #28]
   return(result);
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	f023 0301 	bic.w	r3, r3, #1
 800771c:	64bb      	str	r3, [r7, #72]	; 0x48
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800772c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e5      	bne.n	8007706 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d12e      	bne.n	80077ae <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	60bb      	str	r3, [r7, #8]
   return(result);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f023 0310 	bic.w	r3, r3, #16
 800776a:	647b      	str	r3, [r7, #68]	; 0x44
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6979      	ldr	r1, [r7, #20]
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	613b      	str	r3, [r7, #16]
   return(result);
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e6      	bne.n	8007756 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f003 0310 	and.w	r3, r3, #16
 8007792:	2b10      	cmp	r3, #16
 8007794:	d103      	bne.n	800779e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2210      	movs	r2, #16
 800779c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fe ffda 	bl	8006760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077ac:	e00b      	b.n	80077c6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fe ffc2 	bl	8006738 <HAL_UART_RxCpltCallback>
}
 80077b4:	e007      	b.n	80077c6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0208 	orr.w	r2, r2, #8
 80077c4:	619a      	str	r2, [r3, #24]
}
 80077c6:	bf00      	nop
 80077c8:	3758      	adds	r7, #88	; 0x58
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b0a6      	sub	sp, #152	; 0x98
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077de:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007806:	2b22      	cmp	r3, #34	; 0x22
 8007808:	f040 814f 	bne.w	8007aaa <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007812:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007816:	e0f6      	b.n	8007a06 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007822:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007826:	b2d9      	uxtb	r1, r3
 8007828:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800782c:	b2da      	uxtb	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007832:	400a      	ands	r2, r1
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800785e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d053      	beq.n	8007912 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800786a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d011      	beq.n	800789a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2201      	movs	r2, #1
 8007888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007890:	f043 0201 	orr.w	r2, r3, #1
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800789a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d011      	beq.n	80078ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80078a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2202      	movs	r2, #2
 80078b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c0:	f043 0204 	orr.w	r2, r3, #4
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078ce:	f003 0304 	and.w	r3, r3, #4
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d011      	beq.n	80078fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80078d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00b      	beq.n	80078fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2204      	movs	r2, #4
 80078e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f0:	f043 0202 	orr.w	r2, r3, #2
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d006      	beq.n	8007912 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7fe ff21 	bl	800674c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d173      	bne.n	8007a06 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800792c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800792e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007940:	66bb      	str	r3, [r7, #104]	; 0x68
 8007942:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007946:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800794e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e4      	bne.n	800791e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3308      	adds	r3, #8
 800795a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800796a:	f023 0301 	bic.w	r3, r3, #1
 800796e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007978:	657a      	str	r2, [r7, #84]	; 0x54
 800797a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800797e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e3      	bne.n	8007954 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d12e      	bne.n	8007a00 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	f023 0310 	bic.w	r3, r3, #16
 80079bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079c6:	643b      	str	r3, [r7, #64]	; 0x40
 80079c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e6      	bne.n	80079a8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d103      	bne.n	80079f0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2210      	movs	r2, #16
 80079ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7fe feb1 	bl	8006760 <HAL_UARTEx_RxEventCallback>
 80079fe:	e002      	b.n	8007a06 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7fe fe99 	bl	8006738 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d006      	beq.n	8007a1c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f47f aefe 	bne.w	8007818 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a26:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d045      	beq.n	8007aba <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d23e      	bcs.n	8007aba <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a52:	673b      	str	r3, [r7, #112]	; 0x70
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a14      	ldr	r2, [pc, #80]	; (8007ac4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007a74:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f043 0320 	orr.w	r3, r3, #32
 8007a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6979      	ldr	r1, [r7, #20]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e6      	bne.n	8007a76 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aa8:	e007      	b.n	8007aba <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	699a      	ldr	r2, [r3, #24]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f042 0208 	orr.w	r2, r2, #8
 8007ab8:	619a      	str	r2, [r3, #24]
}
 8007aba:	bf00      	nop
 8007abc:	3798      	adds	r7, #152	; 0x98
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	0800750f 	.word	0x0800750f

08007ac8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b0a8      	sub	sp, #160	; 0xa0
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ad6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afe:	2b22      	cmp	r3, #34	; 0x22
 8007b00:	f040 8153 	bne.w	8007daa <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b0a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b0e:	e0fa      	b.n	8007d06 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b22:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007b26:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b38:	1c9a      	adds	r2, r3, #2
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d053      	beq.n	8007c0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d011      	beq.n	8007b96 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2201      	movs	r2, #1
 8007b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b8c:	f043 0201 	orr.w	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d011      	beq.n	8007bc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bbc:	f043 0204 	orr.w	r2, r3, #4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d011      	beq.n	8007bf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2204      	movs	r2, #4
 8007be4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bec:	f043 0202 	orr.w	r2, r3, #2
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7fe fda3 	bl	800674c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d175      	bne.n	8007d06 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c3e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e4      	bne.n	8007c1a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3308      	adds	r3, #8
 8007c56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c66:	f023 0301 	bic.w	r3, r3, #1
 8007c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3308      	adds	r3, #8
 8007c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c78:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e1      	bne.n	8007c50 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d12e      	bne.n	8007d00 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb8:	f023 0310 	bic.w	r3, r3, #16
 8007cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007cc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e6      	bne.n	8007ca8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b10      	cmp	r3, #16
 8007ce6:	d103      	bne.n	8007cf0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2210      	movs	r2, #16
 8007cee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7fe fd31 	bl	8006760 <HAL_UARTEx_RxEventCallback>
 8007cfe:	e002      	b.n	8007d06 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7fe fd19 	bl	8006738 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d006      	beq.n	8007d1c <UART_RxISR_16BIT_FIFOEN+0x254>
 8007d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f47f aefa 	bne.w	8007b10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d22:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d26:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d045      	beq.n	8007dba <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d34:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d23e      	bcs.n	8007dba <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3308      	adds	r3, #8
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d52:	677b      	str	r3, [r7, #116]	; 0x74
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d5c:	633a      	str	r2, [r7, #48]	; 0x30
 8007d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e5      	bne.n	8007d3c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a14      	ldr	r2, [pc, #80]	; (8007dc4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007d74:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f043 0320 	orr.w	r3, r3, #32
 8007d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d94:	61fb      	str	r3, [r7, #28]
 8007d96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	69b9      	ldr	r1, [r7, #24]
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	617b      	str	r3, [r7, #20]
   return(result);
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e6      	bne.n	8007d76 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007da8:	e007      	b.n	8007dba <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699a      	ldr	r2, [r3, #24]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f042 0208 	orr.w	r2, r2, #8
 8007db8:	619a      	str	r2, [r3, #24]
}
 8007dba:	bf00      	nop
 8007dbc:	37a0      	adds	r7, #160	; 0xa0
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	0800766f 	.word	0x0800766f

08007dc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e027      	b.n	8007e56 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2224      	movs	r2, #36	; 0x24
 8007e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0201 	bic.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e76:	2302      	movs	r3, #2
 8007e78:	e02d      	b.n	8007ed6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2224      	movs	r2, #36	; 0x24
 8007e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0201 	bic.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f850 	bl	8007f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e02d      	b.n	8007f52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2224      	movs	r2, #36	; 0x24
 8007f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0201 	bic.w	r2, r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f812 	bl	8007f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d108      	bne.n	8007f7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f7c:	e031      	b.n	8007fe2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f7e:	2308      	movs	r3, #8
 8007f80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f82:	2308      	movs	r3, #8
 8007f84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	0e5b      	lsrs	r3, r3, #25
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	0f5b      	lsrs	r3, r3, #29
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	7b3a      	ldrb	r2, [r7, #12]
 8007faa:	4911      	ldr	r1, [pc, #68]	; (8007ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8007fac:	5c8a      	ldrb	r2, [r1, r2]
 8007fae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fb2:	7b3a      	ldrb	r2, [r7, #12]
 8007fb4:	490f      	ldr	r1, [pc, #60]	; (8007ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8007fb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	7b7a      	ldrb	r2, [r7, #13]
 8007fc8:	4909      	ldr	r1, [pc, #36]	; (8007ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8007fca:	5c8a      	ldrb	r2, [r1, r2]
 8007fcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fd0:	7b7a      	ldrb	r2, [r7, #13]
 8007fd2:	4908      	ldr	r1, [pc, #32]	; (8007ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8007fd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007fe2:	bf00      	nop
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	08008158 	.word	0x08008158
 8007ff4:	08008160 	.word	0x08008160

08007ff8 <__libc_init_array>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	4d0d      	ldr	r5, [pc, #52]	; (8008030 <__libc_init_array+0x38>)
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	4c0d      	ldr	r4, [pc, #52]	; (8008034 <__libc_init_array+0x3c>)
 8008000:	1b64      	subs	r4, r4, r5
 8008002:	10a4      	asrs	r4, r4, #2
 8008004:	42a6      	cmp	r6, r4
 8008006:	d109      	bne.n	800801c <__libc_init_array+0x24>
 8008008:	4d0b      	ldr	r5, [pc, #44]	; (8008038 <__libc_init_array+0x40>)
 800800a:	2600      	movs	r6, #0
 800800c:	4c0b      	ldr	r4, [pc, #44]	; (800803c <__libc_init_array+0x44>)
 800800e:	f000 f81f 	bl	8008050 <_init>
 8008012:	1b64      	subs	r4, r4, r5
 8008014:	10a4      	asrs	r4, r4, #2
 8008016:	42a6      	cmp	r6, r4
 8008018:	d105      	bne.n	8008026 <__libc_init_array+0x2e>
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008020:	3601      	adds	r6, #1
 8008022:	4798      	blx	r3
 8008024:	e7ee      	b.n	8008004 <__libc_init_array+0xc>
 8008026:	f855 3b04 	ldr.w	r3, [r5], #4
 800802a:	3601      	adds	r6, #1
 800802c:	4798      	blx	r3
 800802e:	e7f2      	b.n	8008016 <__libc_init_array+0x1e>
 8008030:	08008170 	.word	0x08008170
 8008034:	08008170 	.word	0x08008170
 8008038:	08008170 	.word	0x08008170
 800803c:	08008174 	.word	0x08008174

08008040 <memset>:
 8008040:	4402      	add	r2, r0
 8008042:	4603      	mov	r3, r0
 8008044:	4293      	cmp	r3, r2
 8008046:	d100      	bne.n	800804a <memset+0xa>
 8008048:	4770      	bx	lr
 800804a:	f803 1b01 	strb.w	r1, [r3], #1
 800804e:	e7f9      	b.n	8008044 <memset+0x4>

08008050 <_init>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr

0800805c <_fini>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr

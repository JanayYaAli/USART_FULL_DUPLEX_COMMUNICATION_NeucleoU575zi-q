
USART_FULL_DUPLEX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005750  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000031  20000000  08005a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000158  20000034  08005aa5  00020034  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000018c  08005aa5  0002018c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
  9 .debug_info   000157e0  00000000  00000000  00020067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002b58  00000000  00000000  00035847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001228  00000000  00000000  000383a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000010d0  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032b96  00000000  00000000  0003a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000176d9  00000000  00000000  0006d22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013f9f1  00000000  00000000  00084907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c42f8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004b50  00000000  00000000  001c4348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000034 	.word	0x20000034
 8000250:	00000000 	.word	0x00000000
 8000254:	0800596c 	.word	0x0800596c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000038 	.word	0x20000038
 8000270:	0800596c 	.word	0x0800596c

08000274 <SystemClock_Config>:
#include "main.h"

void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b09e      	sub	sp, #120	; 0x78
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2260      	movs	r2, #96	; 0x60
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f005 fb6a 	bl	800595c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	463b      	mov	r3, r7
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]
 8000296:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000298:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800029c:	f001 f850 	bl	8001340 <HAL_PWREx_ControlVoltageScaling>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002a6:	f000 fa91 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002aa:	2310      	movs	r3, #16
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002b2:	2310      	movs	r3, #16
 80002b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002be:	2301      	movs	r3, #1
 80002c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80002c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80002c8:	2303      	movs	r3, #3
 80002ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002cc:	230a      	movs	r3, #10
 80002ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80002d8:	2301      	movs	r3, #1
 80002da:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80002dc:	230c      	movs	r3, #12
 80002de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 f91b 	bl	8001524 <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002f4:	f000 fa6a 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	231f      	movs	r3, #31
 80002fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2303      	movs	r3, #3
 80002fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000310:	463b      	mov	r3, r7
 8000312:	2104      	movs	r1, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f001 ffdb 	bl	80022d0 <HAL_RCC_ClockConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000320:	f000 fa54 	bl	80007cc <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3778      	adds	r7, #120	; 0x78
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_GPIO_Init>:
#include"main.h"
void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	; 0x28
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000342:	4b65      	ldr	r3, [pc, #404]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 8000344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000348:	4a63      	ldr	r2, [pc, #396]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000352:	4b61      	ldr	r3, [pc, #388]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 8000354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	613b      	str	r3, [r7, #16]
 800035e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	4b5d      	ldr	r3, [pc, #372]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 8000362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000366:	4a5c      	ldr	r2, [pc, #368]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000370:	4b59      	ldr	r3, [pc, #356]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 8000372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037e:	4b56      	ldr	r3, [pc, #344]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 8000380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000384:	4a54      	ldr	r2, [pc, #336]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 8000386:	f043 0302 	orr.w	r3, r3, #2
 800038a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800038e:	4b52      	ldr	r3, [pc, #328]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 8000390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000394:	f003 0302 	and.w	r3, r3, #2
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800039c:	4b4e      	ldr	r3, [pc, #312]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 800039e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003a2:	4a4d      	ldr	r2, [pc, #308]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 80003a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80003ac:	4b4a      	ldr	r3, [pc, #296]	; (80004d8 <MX_GPIO_Init+0x1ac>)
 80003ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2104      	movs	r1, #4
 80003be:	4847      	ldr	r0, [pc, #284]	; (80004dc <MX_GPIO_Init+0x1b0>)
 80003c0:	f000 ff5c 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2180      	movs	r1, #128	; 0x80
 80003c8:	4845      	ldr	r0, [pc, #276]	; (80004e0 <MX_GPIO_Init+0x1b4>)
 80003ca:	f000 ff57 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2120      	movs	r1, #32
 80003d2:	4844      	ldr	r0, [pc, #272]	; (80004e4 <MX_GPIO_Init+0x1b8>)
 80003d4:	f000 ff52 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80003d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003de:	4b42      	ldr	r3, [pc, #264]	; (80004e8 <MX_GPIO_Init+0x1bc>)
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	4619      	mov	r1, r3
 80003ec:	483c      	ldr	r0, [pc, #240]	; (80004e0 <MX_GPIO_Init+0x1b4>)
 80003ee:	f000 fd6d 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80003f2:	2304      	movs	r3, #4
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003f6:	2303      	movs	r3, #3
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80003fe:	f107 0314 	add.w	r3, r7, #20
 8000402:	4619      	mov	r1, r3
 8000404:	4836      	ldr	r0, [pc, #216]	; (80004e0 <MX_GPIO_Init+0x1b4>)
 8000406:	f000 fd61 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800040a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4619      	mov	r1, r3
 800041e:	4831      	ldr	r0, [pc, #196]	; (80004e4 <MX_GPIO_Init+0x1b8>)
 8000420:	f000 fd54 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800042a:	2303      	movs	r3, #3
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4619      	mov	r1, r3
 8000438:	482a      	ldr	r0, [pc, #168]	; (80004e4 <MX_GPIO_Init+0x1b8>)
 800043a:	f000 fd47 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800043e:	2304      	movs	r3, #4
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2300      	movs	r3, #0
 800044c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	4821      	ldr	r0, [pc, #132]	; (80004dc <MX_GPIO_Init+0x1b0>)
 8000456:	f000 fd39 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045e:	2301      	movs	r3, #1
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	4619      	mov	r1, r3
 8000470:	481b      	ldr	r0, [pc, #108]	; (80004e0 <MX_GPIO_Init+0x1b4>)
 8000472:	f000 fd2b 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000476:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047c:	2302      	movs	r3, #2
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000488:	230a      	movs	r3, #10
 800048a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	4619      	mov	r1, r3
 8000492:	4816      	ldr	r0, [pc, #88]	; (80004ec <MX_GPIO_Init+0x1c0>)
 8000494:	f000 fd1a 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800049e:	2303      	movs	r3, #3
 80004a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	4619      	mov	r1, r3
 80004ac:	480f      	ldr	r0, [pc, #60]	; (80004ec <MX_GPIO_Init+0x1c0>)
 80004ae:	f000 fd0d 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80004b2:	2320      	movs	r3, #32
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2300      	movs	r3, #0
 80004c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <MX_GPIO_Init+0x1b8>)
 80004ca:	f000 fcff 	bl	8000ecc <HAL_GPIO_Init>

}
 80004ce:	bf00      	nop
 80004d0:	3728      	adds	r7, #40	; 0x28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	46020c00 	.word	0x46020c00
 80004dc:	42021800 	.word	0x42021800
 80004e0:	42020800 	.word	0x42020800
 80004e4:	42020400 	.word	0x42020400
 80004e8:	10110000 	.word	0x10110000
 80004ec:	42020000 	.word	0x42020000

080004f0 <SystemPower_Config>:
#include"main.h"
void SystemPower_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80004f4:	f000 fff6 	bl	80014e4 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004f8:	f001 f804 	bl	8001504 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80004fc:	2002      	movs	r0, #2
 80004fe:	f000 ffa1 	bl	8001444 <HAL_PWREx_ConfigSupply>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8000508:	f000 f960 	bl	80007cc <Error_Handler>
  }
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <MX_USART1_Init>:
#include"main.h"
USART_HandleTypeDef husart1;
USART_HandleTypeDef husart2;

 void MX_USART1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_USART1_Init+0x94>)
 8000516:	4a24      	ldr	r2, [pc, #144]	; (80005a8 <MX_USART1_Init+0x98>)
 8000518:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = BAUDRATE;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_USART1_Init+0x94>)
 800051c:	4a23      	ldr	r2, [pc, #140]	; (80005ac <MX_USART1_Init+0x9c>)
 800051e:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_USART1_Init+0x94>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000526:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <MX_USART1_Init+0x94>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_USART1_Init+0x94>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000532:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <MX_USART1_Init+0x94>)
 8000534:	220c      	movs	r2, #12
 8000536:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_USART1_Init+0x94>)
 800053a:	2200      	movs	r2, #0
 800053c:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_USART1_Init+0x94>)
 8000540:	2200      	movs	r2, #0
 8000542:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_USART1_Init+0x94>)
 8000546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800054a:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_USART1_Init+0x94>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_USART1_Init+0x94>)
 8000554:	2200      	movs	r2, #0
 8000556:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000558:	4812      	ldr	r0, [pc, #72]	; (80005a4 <MX_USART1_Init+0x94>)
 800055a:	f003 fd8d 	bl	8004078 <HAL_USART_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8000564:	f000 f932 	bl	80007cc <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_7_8) != HAL_OK)
 8000568:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <MX_USART1_Init+0x94>)
 800056e:	f005 f90b 	bl	8005788 <HAL_USARTEx_SetTxFifoThreshold>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_USART1_Init+0x6c>
  {
    Error_Handler();
 8000578:	f000 f928 	bl	80007cc <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_7_8) != HAL_OK)
 800057c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000580:	4808      	ldr	r0, [pc, #32]	; (80005a4 <MX_USART1_Init+0x94>)
 8000582:	f005 f93f 	bl	8005804 <HAL_USARTEx_SetRxFifoThreshold>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_USART1_Init+0x80>
  {
    Error_Handler();
 800058c:	f000 f91e 	bl	80007cc <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_USART1_Init+0x94>)
 8000592:	f005 f8c0 	bl	8005716 <HAL_USARTEx_DisableFifoMode>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_USART1_Init+0x90>
  {
    Error_Handler();
 800059c:	f000 f916 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000050 	.word	0x20000050
 80005a8:	40013800 	.word	0x40013800
 80005ac:	002625a0 	.word	0x002625a0

080005b0 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <MX_USART2_Init+0xa4>)
 80005b6:	4a28      	ldr	r2, [pc, #160]	; (8000658 <MX_USART2_Init+0xa8>)
 80005b8:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = BAUDRATE;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <MX_USART2_Init+0xa4>)
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <MX_USART2_Init+0xac>)
 80005be:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_USART2_Init+0xa4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <MX_USART2_Init+0xa4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_USART2_Init+0xa4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <MX_USART2_Init+0xa4>)
 80005d4:	220c      	movs	r2, #12
 80005d6:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80005d8:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_USART2_Init+0xa4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_USART2_Init+0xa4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_USART2_Init+0xa4>)
 80005e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ea:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_USART2_Init+0xa4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_USART2_Init+0xa4>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80005f8:	4816      	ldr	r0, [pc, #88]	; (8000654 <MX_USART2_Init+0xa4>)
 80005fa:	f003 fd3d 	bl	8004078 <HAL_USART_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8000604:	f000 f8e2 	bl	80007cc <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_7_8) != HAL_OK)
 8000608:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800060c:	4811      	ldr	r0, [pc, #68]	; (8000654 <MX_USART2_Init+0xa4>)
 800060e:	f005 f8bb 	bl	8005788 <HAL_USARTEx_SetTxFifoThreshold>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_USART2_Init+0x6c>
  {
    Error_Handler();
 8000618:	f000 f8d8 	bl	80007cc <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_7_8) != HAL_OK)
 800061c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <MX_USART2_Init+0xa4>)
 8000622:	f005 f8ef 	bl	8005804 <HAL_USARTEx_SetRxFifoThreshold>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_USART2_Init+0x80>
  {
    Error_Handler();
 800062c:	f000 f8ce 	bl	80007cc <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <MX_USART2_Init+0xa4>)
 8000632:	f005 f870 	bl	8005716 <HAL_USARTEx_DisableFifoMode>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_USART2_Init+0x90>
  {
    Error_Handler();
 800063c:	f000 f8c6 	bl	80007cc <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_USART2_Init+0xa4>)
 8000642:	f005 f813 	bl	800566c <HAL_USARTEx_EnableSlaveMode>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_USART2_Init+0xa0>
  {
    Error_Handler();
 800064c:	f000 f8be 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000b0 	.word	0x200000b0
 8000658:	40004400 	.word	0x40004400
 800065c:	002625a0 	.word	0x002625a0

08000660 <main>:
uint8_t FE_error = 0;
uint8_t ORE_error = 0;
uint8_t NE_error = 0;
static void MX_ICACHE_Init(void);

int main(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_Init();
 8000664:	f000 fab6 	bl	8000bd4 <HAL_Init>
	SystemClock_Config();
 8000668:	f7ff fe04 	bl	8000274 <SystemClock_Config>
	SystemPower_Config();
 800066c:	f7ff ff40 	bl	80004f0 <SystemPower_Config>
	MX_GPIO_Init();
 8000670:	f7ff fe5c 	bl	800032c <MX_GPIO_Init>
	MX_USART1_Init();
 8000674:	f7ff ff4c 	bl	8000510 <MX_USART1_Init>
	MX_USART2_Init();
 8000678:	f7ff ff9a 	bl	80005b0 <MX_USART2_Init>
	MX_ICACHE_Init();
 800067c:	f000 f880 	bl	8000780 <MX_ICACHE_Init>
	//clear the recieve buffer
	memset(master_rxdata, 0, sizeof(master_rxdata));
 8000680:	2214      	movs	r2, #20
 8000682:	2100      	movs	r1, #0
 8000684:	4834      	ldr	r0, [pc, #208]	; (8000758 <main+0xf8>)
 8000686:	f005 f969 	bl	800595c <memset>
	memset(slave_rxdata, 0, sizeof(slave_rxdata));
 800068a:	2214      	movs	r2, #20
 800068c:	2100      	movs	r1, #0
 800068e:	4833      	ldr	r0, [pc, #204]	; (800075c <main+0xfc>)
 8000690:	f005 f964 	bl	800595c <memset>

	if (HAL_USART_TransmitReceive_IT(&husart2, slave_txdata, slave_rxdata,
 8000694:	2314      	movs	r3, #20
 8000696:	4a31      	ldr	r2, [pc, #196]	; (800075c <main+0xfc>)
 8000698:	4931      	ldr	r1, [pc, #196]	; (8000760 <main+0x100>)
 800069a:	4832      	ldr	r0, [pc, #200]	; (8000764 <main+0x104>)
 800069c:	f003 fd36 	bl	800410c <HAL_USART_TransmitReceive_IT>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0x4a>
			sizeof(slave_rxdata)) != HAL_OK) {
		Error_Handler();
 80006a6:	f000 f891 	bl	80007cc <Error_Handler>
	}
	if (HAL_USART_TransmitReceive_IT(&husart1, master_txdata, master_rxdata,
 80006aa:	2314      	movs	r3, #20
 80006ac:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <main+0xf8>)
 80006ae:	492e      	ldr	r1, [pc, #184]	; (8000768 <main+0x108>)
 80006b0:	482e      	ldr	r0, [pc, #184]	; (800076c <main+0x10c>)
 80006b2:	f003 fd2b 	bl	800410c <HAL_USART_TransmitReceive_IT>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <main+0x60>
			sizeof(master_rxdata)) != HAL_OK) {
		Error_Handler();
 80006bc:	f000 f886 	bl	80007cc <Error_Handler>

	}

	/*framing error*/
	if (__HAL_USART_GET_FLAG(&husart1, USART_FLAG_FE) == TRUE
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <main+0x10c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d006      	beq.n	80006dc <main+0x7c>
			|| __HAL_USART_GET_FLAG(&husart2, USART_FLAG_FE) == TRUE)
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <main+0x104>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f003 0302 	and.w	r3, r3, #2
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d107      	bne.n	80006ec <main+0x8c>

			{
		FE_error++;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <main+0x110>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <main+0x110>)
 80006e6:	701a      	strb	r2, [r3, #0]
		Error_Handler();
 80006e8:	f000 f870 	bl	80007cc <Error_Handler>
	}

	/*Overrun error*/

	if (__HAL_USART_GET_FLAG(&husart1, USART_FLAG_ORE) == TRUE
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <main+0x10c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b08      	cmp	r3, #8
 80006f8:	d006      	beq.n	8000708 <main+0xa8>
			|| __HAL_USART_GET_FLAG(&husart2, USART_FLAG_ORE) == TRUE)
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <main+0x104>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	2b08      	cmp	r3, #8
 8000706:	d107      	bne.n	8000718 <main+0xb8>

			{
		ORE_error++;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <main+0x114>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <main+0x114>)
 8000712:	701a      	strb	r2, [r3, #0]
		Error_Handler();
 8000714:	f000 f85a 	bl	80007cc <Error_Handler>

	}
	/*Noise error*/

	if (__HAL_USART_GET_FLAG(&husart1, USART_FLAG_NE) == TRUE
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <main+0x10c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	2b04      	cmp	r3, #4
 8000724:	d006      	beq.n	8000734 <main+0xd4>
			|| __HAL_USART_GET_FLAG(&husart2, USART_FLAG_NE) == TRUE)
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <main+0x104>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	2b04      	cmp	r3, #4
 8000732:	d107      	bne.n	8000744 <main+0xe4>

			{
		NE_error++;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <main+0x118>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <main+0x118>)
 800073e:	701a      	strb	r2, [r3, #0]
		Error_Handler();
 8000740:	f000 f844 	bl	80007cc <Error_Handler>

	}

	while (1) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <main+0x11c>)
 8000748:	f000 fdb0 	bl	80012ac <HAL_GPIO_TogglePin>

		HAL_Delay(1000);
 800074c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000750:	f000 fa8e 	bl	8000c70 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000754:	e7f6      	b.n	8000744 <main+0xe4>
 8000756:	bf00      	nop
 8000758:	20000110 	.word	0x20000110
 800075c:	20000124 	.word	0x20000124
 8000760:	20000014 	.word	0x20000014
 8000764:	200000b0 	.word	0x200000b0
 8000768:	20000000 	.word	0x20000000
 800076c:	20000050 	.word	0x20000050
 8000770:	20000138 	.word	0x20000138
 8000774:	20000139 	.word	0x20000139
 8000778:	2000013a 	.word	0x2000013a
 800077c:	42020800 	.word	0x42020800

08000780 <MX_ICACHE_Init>:
	}

}

static void MX_ICACHE_Init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK) {
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fdab 	bl	80012e0 <HAL_ICACHE_ConfigAssociativityMode>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ICACHE_Init+0x14>
		Error_Handler();
 8000790:	f000 f81c 	bl	80007cc <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK) {
 8000794:	f000 fdc4 	bl	8001320 <HAL_ICACHE_Enable>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ICACHE_Init+0x22>
		Error_Handler();
 800079e:	f000 f815 	bl	80007cc <Error_Handler>
	}

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80007ba:	f000 fa39 	bl	8000c30 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40014800 	.word	0x40014800

080007cc <Error_Handler>:

void Error_Handler(void) {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_MspInit+0x34>)
 80007e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007e4:	4a09      	ldr	r2, [pc, #36]	; (800080c <HAL_MspInit+0x34>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_MspInit+0x34>)
 80007f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80007fc:	2004      	movs	r0, #4
 80007fe:	f000 fb08 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	46020c00 	.word	0x46020c00

08000810 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0be      	sub	sp, #248	; 0xf8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	22c8      	movs	r2, #200	; 0xc8
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f005 f893 	bl	800595c <memset>
  if(husart->Instance==USART1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a54      	ldr	r2, [pc, #336]	; (800098c <HAL_USART_MspInit+0x17c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d14e      	bne.n	80008de <HAL_USART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000840:	f04f 0201 	mov.w	r2, #1
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800084c:	2300      	movs	r3, #0
 800084e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	4618      	mov	r0, r3
 8000856:	f002 f935 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_USART_MspInit+0x54>
    {
      Error_Handler();
 8000860:	f7ff ffb4 	bl	80007cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000864:	4b4a      	ldr	r3, [pc, #296]	; (8000990 <HAL_USART_MspInit+0x180>)
 8000866:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800086a:	4a49      	ldr	r2, [pc, #292]	; (8000990 <HAL_USART_MspInit+0x180>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000874:	4b46      	ldr	r3, [pc, #280]	; (8000990 <HAL_USART_MspInit+0x180>)
 8000876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b43      	ldr	r3, [pc, #268]	; (8000990 <HAL_USART_MspInit+0x180>)
 8000884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000888:	4a41      	ldr	r2, [pc, #260]	; (8000990 <HAL_USART_MspInit+0x180>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000892:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <HAL_USART_MspInit+0x180>)
 8000894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80008a0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80008a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ba:	2307      	movs	r3, #7
 80008bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4833      	ldr	r0, [pc, #204]	; (8000994 <HAL_USART_MspInit+0x184>)
 80008c8:	f000 fb00 	bl	8000ecc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	203d      	movs	r0, #61	; 0x3d
 80008d2:	f000 faa9 	bl	8000e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008d6:	203d      	movs	r0, #61	; 0x3d
 80008d8:	f000 fac0 	bl	8000e5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008dc:	e051      	b.n	8000982 <HAL_USART_MspInit+0x172>
  else if(husart->Instance==USART2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <HAL_USART_MspInit+0x188>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d14c      	bne.n	8000982 <HAL_USART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e8:	f04f 0202 	mov.w	r2, #2
 80008ec:	f04f 0300 	mov.w	r3, #0
 80008f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 f8e1 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <HAL_USART_MspInit+0xfc>
      Error_Handler();
 8000908:	f7ff ff60 	bl	80007cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_USART_MspInit+0x180>)
 800090e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_USART_MspInit+0x180>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_USART_MspInit+0x180>)
 800091e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_USART_MspInit+0x180>)
 800092c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000930:	4a17      	ldr	r2, [pc, #92]	; (8000990 <HAL_USART_MspInit+0x180>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_USART_MspInit+0x180>)
 800093c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000948:	231c      	movs	r3, #28
 800094a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000960:	2307      	movs	r3, #7
 8000962:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800096a:	4619      	mov	r1, r3
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <HAL_USART_MspInit+0x184>)
 800096e:	f000 faad 	bl	8000ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	203e      	movs	r0, #62	; 0x3e
 8000978:	f000 fa56 	bl	8000e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800097c:	203e      	movs	r0, #62	; 0x3e
 800097e:	f000 fa6d 	bl	8000e5c <HAL_NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	37f8      	adds	r7, #248	; 0xf8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40013800 	.word	0x40013800
 8000990:	46020c00 	.word	0x46020c00
 8000994:	42020000 	.word	0x42020000
 8000998:	40004400 	.word	0x40004400

0800099c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80009ac:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <HAL_InitTick+0xcc>)
 80009ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009b2:	4a2d      	ldr	r2, [pc, #180]	; (8000a68 <HAL_InitTick+0xcc>)
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <HAL_InitTick+0xcc>)
 80009be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ca:	f107 0210 	add.w	r2, r7, #16
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 ffb7 	bl	8002948 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009da:	f001 ffa1 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 80009de:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e2:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <HAL_InitTick+0xd0>)
 80009e4:	fba2 2303 	umull	r2, r3, r2, r3
 80009e8:	0c9b      	lsrs	r3, r3, #18
 80009ea:	3b01      	subs	r3, #1
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_InitTick+0xd4>)
 80009f0:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <HAL_InitTick+0xd8>)
 80009f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <HAL_InitTick+0xd4>)
 80009f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009fa:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80009fc:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <HAL_InitTick+0xd4>)
 80009fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a00:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <HAL_InitTick+0xd4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_InitTick+0xd4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000a0e:	4818      	ldr	r0, [pc, #96]	; (8000a70 <HAL_InitTick+0xd4>)
 8000a10:	f002 ff48 	bl	80038a4 <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d118      	bne.n	8000a54 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000a22:	4813      	ldr	r0, [pc, #76]	; (8000a70 <HAL_InitTick+0xd4>)
 8000a24:	f002 ffa0 	bl	8003968 <HAL_TIM_Base_Start_IT>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10e      	bne.n	8000a54 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d808      	bhi.n	8000a4e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2047      	movs	r0, #71	; 0x47
 8000a42:	f000 f9f1 	bl	8000e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a46:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <HAL_InitTick+0xdc>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	e002      	b.n	8000a54 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000a54:	2047      	movs	r0, #71	; 0x47
 8000a56:	f000 fa01 	bl	8000e5c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3738      	adds	r7, #56	; 0x38
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	46020c00 	.word	0x46020c00
 8000a6c:	431bde83 	.word	0x431bde83
 8000a70:	2000013c 	.word	0x2000013c
 8000a74:	40014800 	.word	0x40014800
 8000a78:	2000002c 	.word	0x2000002c

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <USART1_IRQHandler+0x10>)
 8000ada:	f003 fc41 	bl	8004360 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000050 	.word	0x20000050

08000ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART2_IRQHandler+0x10>)
 8000aee:	f003 fc37 	bl	8004360 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000b0 	.word	0x200000b0

08000afc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <TIM17_IRQHandler+0x10>)
 8000b02:	f002 ffd1 	bl	8003aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000013c 	.word	0x2000013c

08000b10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SystemInit+0x68>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <SystemInit+0x68>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <SystemInit+0x6c>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <SystemInit+0x6c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <SystemInit+0x6c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <SystemInit+0x6c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <SystemInit+0x6c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <SystemInit+0x6c>)
 8000b42:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b46:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b4a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <SystemInit+0x6c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <SystemInit+0x6c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <SystemInit+0x6c>)
 8000b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <SystemInit+0x6c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SystemInit+0x68>)
 8000b66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b6a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	46020c00 	.word	0x46020c00

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b86:	e003      	b.n	8000b90 <LoopCopyDataInit>

08000b88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b8e:	3104      	adds	r1, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b98:	d3f6      	bcc.n	8000b88 <CopyDataInit>
	ldr	r2, =_sbss
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b9c:	e002      	b.n	8000ba4 <LoopFillZerobss>

08000b9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ba0:	f842 3b04 	str.w	r3, [r2], #4

08000ba4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <LoopForever+0x16>)
	cmp	r2, r3
 8000ba6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ba8:	d3f9      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000baa:	f7ff ffb1 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f004 feb1 	bl	8005914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fd55 	bl	8000660 <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000bb8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000bbc:	08005a74 	.word	0x08005a74
	ldr	r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bc4:	20000031 	.word	0x20000031
	ldr	r2, =_sbss
 8000bc8:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8000bcc:	2000018c 	.word	0x2000018c

08000bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_Init+0x4c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_Init+0x4c>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f914 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000bea:	f001 fd63 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_Init+0x50>)
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	490b      	ldr	r1, [pc, #44]	; (8000c28 <HAL_Init+0x54>)
 8000bfa:	5ccb      	ldrb	r3, [r1, r3]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x58>)
 8000c02:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c04:	2007      	movs	r0, #7
 8000c06:	f7ff fec9 	bl	800099c <HAL_InitTick>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e002      	b.n	8000c1a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fde0 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000
 8000c24:	46020c00 	.word	0x46020c00
 8000c28:	08005984 	.word	0x08005984
 8000c2c:	20000028 	.word	0x20000028

08000c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000030 	.word	0x20000030
 8000c54:	20000188 	.word	0x20000188

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000188 	.word	0x20000188

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000030 	.word	0x20000030

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff4c 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e36:	f7ff ff63 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f7ff ffb3 	bl	8000dac <NVIC_EncodePriority>
 8000e46:	4602      	mov	r2, r0
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff82 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff56 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e019      	b.n	8000ebe <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d004      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2220      	movs	r2, #32
 8000e9a:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e00e      	b.n	8000ebe <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ede:	e1ba      	b.n	8001256 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 81aa 	beq.w	8001250 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a55      	ldr	r2, [pc, #340]	; (8001054 <HAL_GPIO_Init+0x188>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d15d      	bne.n	8000fc0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0201 	and.w	r2, r3, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f34:	4a48      	ldr	r2, [pc, #288]	; (8001058 <HAL_GPIO_Init+0x18c>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f3c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f3e:	4a46      	ldr	r2, [pc, #280]	; (8001058 <HAL_GPIO_Init+0x18c>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4413      	add	r3, r2
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220b      	movs	r2, #11
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	69f9      	ldr	r1, [r7, #28]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2202      	movs	r2, #2
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e067      	b.n	8001090 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x104>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b12      	cmp	r3, #18
 8000fce:	d145      	bne.n	800105c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	f003 020f 	and.w	r2, r3, #15
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	4313      	orrs	r3, r2
 800100c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69f9      	ldr	r1, [r7, #28]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	4013      	ands	r3, r2
 8001032:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	4313      	orrs	r3, r2
 8001048:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	e01e      	b.n	8001090 <HAL_GPIO_Init+0x1c4>
 8001052:	bf00      	nop
 8001054:	46020000 	.word	0x46020000
 8001058:	080059dc 	.word	0x080059dc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	4013      	ands	r3, r2
 8001072:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	4313      	orrs	r3, r2
 8001088:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d00b      	beq.n	80010b0 <HAL_GPIO_Init+0x1e4>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a4:	2b11      	cmp	r3, #17
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b12      	cmp	r3, #18
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80010e6:	2201      	movs	r2, #1
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	f003 0201 	and.w	r2, r3, #1
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	4313      	orrs	r3, r2
 800110a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d017      	beq.n	800114a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	4013      	ands	r3, r2
 8001130:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	4313      	orrs	r3, r2
 8001142:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d07c      	beq.n	8001250 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001156:	4a47      	ldr	r2, [pc, #284]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3318      	adds	r3, #24
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	4013      	ands	r3, r2
 8001178:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	0a9a      	lsrs	r2, r3, #10
 800117e:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <HAL_GPIO_Init+0x3ac>)
 8001180:	4013      	ands	r3, r2
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	4093      	lsls	r3, r2
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	4313      	orrs	r3, r2
 8001190:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001192:	4938      	ldr	r1, [pc, #224]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3318      	adds	r3, #24
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011a0:	4b34      	ldr	r3, [pc, #208]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80011c4:	4a2b      	ldr	r2, [pc, #172]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80011ee:	4a21      	ldr	r2, [pc, #132]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 80011f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	4013      	ands	r3, r2
 8001204:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 8001224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001228:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	4013      	ands	r3, r2
 8001232:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_GPIO_Init+0x3a8>)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	fa22 f303 	lsr.w	r3, r2, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	f47f ae3d 	bne.w	8000ee0 <HAL_GPIO_Init+0x14>
  }
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3724      	adds	r7, #36	; 0x24
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	46022000 	.word	0x46022000
 8001278:	002f7f7f 	.word	0x002f7f7f

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4013      	ands	r3, r2
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43d9      	mvns	r1, r3
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	400b      	ands	r3, r1
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e007      	b.n	800130e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 0204 	bic.w	r2, r3, #4
 8001306:	4905      	ldr	r1, [pc, #20]	; (800131c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40030400 	.word	0x40030400

08001320 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_ICACHE_Enable+0x1c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_ICACHE_Enable+0x1c>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40030400 	.word	0x40030400

08001340 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001350:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	429a      	cmp	r2, r3
 8001358:	d101      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e057      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001364:	d90a      	bls.n	800137c <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	4a2a      	ldr	r2, [pc, #168]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	60d3      	str	r3, [r2, #12]
 800137a:	e007      	b.n	800138c <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001384:	4925      	ldr	r1, [pc, #148]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4313      	orrs	r3, r2
 800138a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	099b      	lsrs	r3, r3, #6
 8001398:	2232      	movs	r2, #50	; 0x32
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	4a21      	ldr	r2, [pc, #132]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	099b      	lsrs	r3, r3, #6
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80013aa:	e002      	b.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x84>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f3      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01b      	beq.n	8001402 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	2232      	movs	r2, #50	; 0x32
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	099b      	lsrs	r3, r3, #6
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80013e8:	e002      	b.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0xc2>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f3      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e000      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	46020800 	.word	0x46020800
 8001420:	20000028 	.word	0x20000028
 8001424:	10624dd3 	.word	0x10624dd3

08001428 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_PWREx_GetVoltageRange+0x18>)
 800142e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	46020800 	.word	0x46020800

08001444 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_PWREx_ConfigSupply+0x94>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a22      	ldr	r2, [pc, #136]	; (80014dc <HAL_PWREx_ConfigSupply+0x98>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	099b      	lsrs	r3, r3, #6
 8001458:	2232      	movs	r2, #50	; 0x32
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <HAL_PWREx_ConfigSupply+0x98>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	099b      	lsrs	r3, r3, #6
 8001466:	3301      	adds	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d113      	bne.n	8001498 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8001476:	f023 0302 	bic.w	r3, r3, #2
 800147a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800147c:	e002      	b.n	8001484 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3b01      	subs	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8001486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b02      	cmp	r3, #2
 800148e:	d116      	bne.n	80014be <HAL_PWREx_ConfigSupply+0x7a>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f3      	bne.n	800147e <HAL_PWREx_ConfigSupply+0x3a>
 8001496:	e012      	b.n	80014be <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_PWREx_ConfigSupply+0x9c>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_PWREx_ConfigSupply+0x9c>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014a4:	e002      	b.n	80014ac <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_PWREx_ConfigSupply+0x9c>)
 80014ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <HAL_PWREx_ConfigSupply+0x7a>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f3      	bne.n	80014a6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e000      	b.n	80014ca <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000028 	.word	0x20000028
 80014dc:	10624dd3 	.word	0x10624dd3
 80014e0:	46020800 	.word	0x46020800

080014e4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_PWREx_EnableVddIO2+0x1c>)
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_PWREx_EnableVddIO2+0x1c>)
 80014ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014f2:	6113      	str	r3, [r2, #16]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	46020800 	.word	0x46020800

08001504 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	46020800 	.word	0x46020800

08001524 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	; 0x38
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	f000 bec3 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153e:	4b9c      	ldr	r3, [pc, #624]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001548:	4b99      	ldr	r3, [pc, #612]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8172 	beq.w	8001844 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_RCC_OscConfig+0x52>
 8001566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001568:	2b0c      	cmp	r3, #12
 800156a:	f040 80e4 	bne.w	8001736 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	2b01      	cmp	r3, #1
 8001572:	f040 80e0 	bne.w	8001736 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001576:	4b8e      	ldr	r3, [pc, #568]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <HAL_RCC_OscConfig+0x6c>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	f000 be9a 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001594:	4b86      	ldr	r3, [pc, #536]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <HAL_RCC_OscConfig+0x86>
 80015a0:	4b83      	ldr	r3, [pc, #524]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80015a8:	e005      	b.n	80015b6 <HAL_RCC_OscConfig+0x92>
 80015aa:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80015ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d255      	bcs.n	8001666 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10a      	bne.n	80015d6 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 f9f7 	bl	80029b8 <RCC_SetFlashLatencyFromMSIRange>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f000 be77 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80015d6:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80015dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015e0:	6093      	str	r3, [r2, #8]
 80015e2:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	4970      	ldr	r1, [pc, #448]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80015fc:	d309      	bcc.n	8001612 <HAL_RCC_OscConfig+0xee>
 80015fe:	4b6c      	ldr	r3, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f023 021f 	bic.w	r2, r3, #31
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4969      	ldr	r1, [pc, #420]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800160c:	4313      	orrs	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
 8001610:	e07e      	b.n	8001710 <HAL_RCC_OscConfig+0x1ec>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	2b00      	cmp	r3, #0
 8001618:	da0a      	bge.n	8001630 <HAL_RCC_OscConfig+0x10c>
 800161a:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	015b      	lsls	r3, r3, #5
 8001628:	4961      	ldr	r1, [pc, #388]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800162a:	4313      	orrs	r3, r2
 800162c:	60cb      	str	r3, [r1, #12]
 800162e:	e06f      	b.n	8001710 <HAL_RCC_OscConfig+0x1ec>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001638:	d30a      	bcc.n	8001650 <HAL_RCC_OscConfig+0x12c>
 800163a:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	4959      	ldr	r1, [pc, #356]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800164a:	4313      	orrs	r3, r2
 800164c:	60cb      	str	r3, [r1, #12]
 800164e:	e05f      	b.n	8001710 <HAL_RCC_OscConfig+0x1ec>
 8001650:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	03db      	lsls	r3, r3, #15
 800165e:	4954      	ldr	r1, [pc, #336]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001660:	4313      	orrs	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
 8001664:	e054      	b.n	8001710 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001666:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	4a51      	ldr	r2, [pc, #324]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800166c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001670:	6093      	str	r3, [r2, #8]
 8001672:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	494c      	ldr	r1, [pc, #304]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800168c:	d309      	bcc.n	80016a2 <HAL_RCC_OscConfig+0x17e>
 800168e:	4b48      	ldr	r3, [pc, #288]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f023 021f 	bic.w	r2, r3, #31
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4945      	ldr	r1, [pc, #276]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800169c:	4313      	orrs	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
 80016a0:	e028      	b.n	80016f4 <HAL_RCC_OscConfig+0x1d0>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	da0a      	bge.n	80016c0 <HAL_RCC_OscConfig+0x19c>
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	015b      	lsls	r3, r3, #5
 80016b8:	493d      	ldr	r1, [pc, #244]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60cb      	str	r3, [r1, #12]
 80016be:	e019      	b.n	80016f4 <HAL_RCC_OscConfig+0x1d0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c8:	d30a      	bcc.n	80016e0 <HAL_RCC_OscConfig+0x1bc>
 80016ca:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	029b      	lsls	r3, r3, #10
 80016d8:	4935      	ldr	r1, [pc, #212]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	60cb      	str	r3, [r1, #12]
 80016de:	e009      	b.n	80016f4 <HAL_RCC_OscConfig+0x1d0>
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	03db      	lsls	r3, r3, #15
 80016ee:	4930      	ldr	r1, [pc, #192]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80016f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10a      	bne.n	8001710 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 f95a 	bl	80029b8 <RCC_SetFlashLatencyFromMSIRange>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	f000 bdda 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001710:	f001 f8d8 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_RCC_OscConfig+0x290>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f93f 	bl	800099c <HAL_InitTick>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 808a 	beq.w	8001842 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800172e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001732:	f000 bdc7 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d066      	beq.n	800180c <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800174a:	f7ff fa85 	bl	8000c58 <HAL_GetTick>
 800174e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001750:	e009      	b.n	8001766 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001752:	f7ff fa81 	bl	8000c58 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d902      	bls.n	8001766 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	f000 bdaf 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0ef      	beq.n	8001752 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177c:	6093      	str	r3, [r2, #8]
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	4909      	ldr	r1, [pc, #36]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001798:	d30e      	bcc.n	80017b8 <HAL_RCC_OscConfig+0x294>
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f023 021f 	bic.w	r2, r3, #31
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4902      	ldr	r1, [pc, #8]	; (80017b0 <HAL_RCC_OscConfig+0x28c>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
 80017ac:	e04a      	b.n	8001844 <HAL_RCC_OscConfig+0x320>
 80017ae:	bf00      	nop
 80017b0:	46020c00 	.word	0x46020c00
 80017b4:	2000002c 	.word	0x2000002c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da0a      	bge.n	80017d6 <HAL_RCC_OscConfig+0x2b2>
 80017c0:	4b9b      	ldr	r3, [pc, #620]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	015b      	lsls	r3, r3, #5
 80017ce:	4998      	ldr	r1, [pc, #608]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
 80017d4:	e036      	b.n	8001844 <HAL_RCC_OscConfig+0x320>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017de:	d30a      	bcc.n	80017f6 <HAL_RCC_OscConfig+0x2d2>
 80017e0:	4b93      	ldr	r3, [pc, #588]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	029b      	lsls	r3, r3, #10
 80017ee:	4990      	ldr	r1, [pc, #576]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
 80017f4:	e026      	b.n	8001844 <HAL_RCC_OscConfig+0x320>
 80017f6:	4b8e      	ldr	r3, [pc, #568]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	03db      	lsls	r3, r3, #15
 8001804:	498a      	ldr	r1, [pc, #552]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001806:	4313      	orrs	r3, r2
 8001808:	60cb      	str	r3, [r1, #12]
 800180a:	e01b      	b.n	8001844 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800180c:	4b88      	ldr	r3, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a87      	ldr	r2, [pc, #540]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001818:	f7ff fa1e 	bl	8000c58 <HAL_GetTick>
 800181c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800181e:	e009      	b.n	8001834 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001820:	f7ff fa1a 	bl	8000c58 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d902      	bls.n	8001834 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	f000 bd48 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001834:	4b7e      	ldr	r3, [pc, #504]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1ef      	bne.n	8001820 <HAL_RCC_OscConfig+0x2fc>
 8001840:	e000      	b.n	8001844 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001842:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8094 	beq.w	800197a <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001854:	2b08      	cmp	r3, #8
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x340>
 8001858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d110      	bne.n	8001880 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	2b03      	cmp	r3, #3
 8001862:	d10d      	bne.n	8001880 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 8083 	beq.w	8001978 <HAL_RCC_OscConfig+0x454>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d17e      	bne.n	8001978 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	f000 bd22 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x374>
 800188a:	4b69      	ldr	r3, [pc, #420]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a68      	ldr	r2, [pc, #416]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e041      	b.n	800191c <HAL_RCC_OscConfig+0x3f8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a0:	d112      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3a4>
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a62      	ldr	r2, [pc, #392]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b60      	ldr	r3, [pc, #384]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a5f      	ldr	r2, [pc, #380]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e029      	b.n	800191c <HAL_RCC_OscConfig+0x3f8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80018d0:	d112      	bne.n	80018f8 <HAL_RCC_OscConfig+0x3d4>
 80018d2:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a56      	ldr	r2, [pc, #344]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b54      	ldr	r3, [pc, #336]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a53      	ldr	r2, [pc, #332]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b51      	ldr	r3, [pc, #324]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a50      	ldr	r2, [pc, #320]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e011      	b.n	800191c <HAL_RCC_OscConfig+0x3f8>
 80018f8:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a46      	ldr	r2, [pc, #280]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001916:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800191a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d014      	beq.n	800194e <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8001924:	f7ff f998 	bl	8000c58 <HAL_GetTick>
 8001928:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	e009      	b.n	8001940 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f994 	bl	8000c58 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d902      	bls.n	8001940 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	f000 bcc2 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ef      	beq.n	800192c <HAL_RCC_OscConfig+0x408>
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800194e:	f7ff f983 	bl	8000c58 <HAL_GetTick>
 8001952:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001954:	e009      	b.n	800196a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001956:	f7ff f97f 	bl	8000c58 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b64      	cmp	r3, #100	; 0x64
 8001962:	d902      	bls.n	800196a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	f000 bcad 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ef      	bne.n	8001956 <HAL_RCC_OscConfig+0x432>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d066      	beq.n	8001a54 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001988:	2b04      	cmp	r3, #4
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x474>
 800198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d11a      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	2b02      	cmp	r3, #2
 8001996:	d117      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_RCC_OscConfig+0x48e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f000 bc89 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	491b      	ldr	r1, [pc, #108]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c6:	e045      	b.n	8001a54 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d024      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80019dc:	f7ff f93c 	bl	8000c58 <HAL_GetTick>
 80019e0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e2:	e009      	b.n	80019f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff f938 	bl	8000c58 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d902      	bls.n	80019f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	f000 bc66 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0ef      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	4907      	ldr	r1, [pc, #28]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	610b      	str	r3, [r1, #16]
 8001a18:	e01c      	b.n	8001a54 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_RCC_OscConfig+0x50c>)
 8001a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a24:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a26:	f7ff f917 	bl	8000c58 <HAL_GetTick>
 8001a2a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a2c:	e00c      	b.n	8001a48 <HAL_RCC_OscConfig+0x524>
 8001a2e:	bf00      	nop
 8001a30:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff f910 	bl	8000c58 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d902      	bls.n	8001a48 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	f000 bc3e 	b.w	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a48:	4baf      	ldr	r3, [pc, #700]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1ef      	bne.n	8001a34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80c7 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a68:	4ba7      	ldr	r3, [pc, #668]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d111      	bne.n	8001a9a <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4ba4      	ldr	r3, [pc, #656]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7c:	4aa2      	ldr	r2, [pc, #648]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001a86:	4ba0      	ldr	r3, [pc, #640]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a9a:	4b9c      	ldr	r3, [pc, #624]	; (8001d0c <HAL_RCC_OscConfig+0x7e8>)
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001aa6:	4b99      	ldr	r3, [pc, #612]	; (8001d0c <HAL_RCC_OscConfig+0x7e8>)
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	4a98      	ldr	r2, [pc, #608]	; (8001d0c <HAL_RCC_OscConfig+0x7e8>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f8d1 	bl	8000c58 <HAL_GetTick>
 8001ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff f8cd 	bl	8000c58 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e3fb      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001acc:	4b8f      	ldr	r3, [pc, #572]	; (8001d0c <HAL_RCC_OscConfig+0x7e8>)
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d05f      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001ae0:	4b89      	ldr	r3, [pc, #548]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae6:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d037      	beq.n	8001b66 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e3da      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01b      	beq.n	8001b50 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b18:	4b7b      	ldr	r3, [pc, #492]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b1e:	4a7a      	ldr	r2, [pc, #488]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001b20:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001b24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001b28:	f7ff f896 	bl	8000c58 <HAL_GetTick>
 8001b2c:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7ff f892 	bl	8000c58 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e3c0      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b42:	4b71      	ldr	r3, [pc, #452]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ef      	bne.n	8001b30 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001b50:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	496a      	ldr	r1, [pc, #424]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	4b68      	ldr	r3, [pc, #416]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b6c:	4a66      	ldr	r2, [pc, #408]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001b76:	f7ff f86f 	bl	8000c58 <HAL_GetTick>
 8001b7a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f86b 	bl	8000c58 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e399      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b90:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0ef      	beq.n	8001b7e <HAL_RCC_OscConfig+0x65a>
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba6:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001ba8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001bac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001bb0:	f7ff f852 	bl	8000c58 <HAL_GetTick>
 8001bb4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f84e 	bl	8000c58 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e37c      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bca:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ef      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be6:	4a48      	ldr	r2, [pc, #288]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8112 	beq.w	8001e22 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c04:	4b40      	ldr	r3, [pc, #256]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d111      	bne.n	8001c36 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c18:	4a3b      	ldr	r2, [pc, #236]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001c30:	2301      	movs	r3, #1
 8001c32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c36:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <HAL_RCC_OscConfig+0x7e8>)
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001c42:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <HAL_RCC_OscConfig+0x7e8>)
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	4a31      	ldr	r2, [pc, #196]	; (8001d0c <HAL_RCC_OscConfig+0x7e8>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f803 	bl	8000c58 <HAL_GetTick>
 8001c52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7fe ffff 	bl	8000c58 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e32d      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_RCC_OscConfig+0x7e8>)
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01f      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d010      	beq.n	8001cae <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c92:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca2:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cac:	e018      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_RCC_OscConfig+0x7e4>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d058      	beq.n	8001d9a <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8001ce8:	f7fe ffb6 	bl	8000c58 <HAL_GetTick>
 8001cec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cee:	e00f      	b.n	8001d10 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7fe ffb2 	bl	8000c58 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d906      	bls.n	8001d10 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e2de      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
 8001d06:	bf00      	nop
 8001d08:	46020c00 	.word	0x46020c00
 8001d0c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d10:	4b9c      	ldr	r3, [pc, #624]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0e8      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d2a:	4b96      	ldr	r3, [pc, #600]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d30:	4a94      	ldr	r2, [pc, #592]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7fe ff8c 	bl	8000c58 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e2b8      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d52:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ed      	beq.n	8001d3c <HAL_RCC_OscConfig+0x818>
 8001d60:	e053      	b.n	8001e0a <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d62:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d68:	4a86      	ldr	r2, [pc, #536]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7fe ff70 	bl	8000c58 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e29c      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d8a:	4b7e      	ldr	r3, [pc, #504]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ed      	bne.n	8001d74 <HAL_RCC_OscConfig+0x850>
 8001d98:	e037      	b.n	8001e0a <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001d9a:	f7fe ff5d 	bl	8000c58 <HAL_GetTick>
 8001d9e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7fe ff59 	bl	8000c58 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e285      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db8:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ed      	bne.n	8001da2 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01a      	beq.n	8001e0a <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001dd4:	4b6b      	ldr	r3, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dda:	4a6a      	ldr	r2, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001de0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7fe ff37 	bl	8000c58 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e263      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001dfc:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ed      	bne.n	8001de6 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e18:	4a5a      	ldr	r2, [pc, #360]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001e1a:	f023 0304 	bic.w	r3, r3, #4
 8001e1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d036      	beq.n	8001e9c <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001e3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e40:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e42:	f7fe ff09 	bl	8000c58 <HAL_GetTick>
 8001e46:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e4a:	f7fe ff05 	bl	8000c58 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e233      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x926>
 8001e68:	e018      	b.n	8001e9c <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a45      	ldr	r2, [pc, #276]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e74:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e76:	f7fe feef 	bl	8000c58 <HAL_GetTick>
 8001e7a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e7e:	f7fe feeb 	bl	8000c58 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e219      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e90:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d036      	beq.n	8001f16 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d019      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001eb0:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a33      	ldr	r2, [pc, #204]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ebc:	f7fe fecc 	bl	8000c58 <HAL_GetTick>
 8001ec0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001ec4:	f7fe fec8 	bl	8000c58 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1f6      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x9a0>
 8001ee2:	e018      	b.n	8001f16 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ef0:	f7fe feb2 	bl	8000c58 <HAL_GetTick>
 8001ef4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001ef8:	f7fe feae 	bl	8000c58 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1dc      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d07f      	beq.n	8002022 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d062      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001f30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f34:	6093      	str	r3, [r2, #8]
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	4910      	ldr	r1, [pc, #64]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001f50:	d309      	bcc.n	8001f66 <HAL_RCC_OscConfig+0xa42>
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f023 021f 	bic.w	r2, r3, #31
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
 8001f64:	e02a      	b.n	8001fbc <HAL_RCC_OscConfig+0xa98>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	da0c      	bge.n	8001f88 <HAL_RCC_OscConfig+0xa64>
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	015b      	lsls	r3, r3, #5
 8001f7c:	4901      	ldr	r1, [pc, #4]	; (8001f84 <HAL_RCC_OscConfig+0xa60>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60cb      	str	r3, [r1, #12]
 8001f82:	e01b      	b.n	8001fbc <HAL_RCC_OscConfig+0xa98>
 8001f84:	46020c00 	.word	0x46020c00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f90:	d30a      	bcc.n	8001fa8 <HAL_RCC_OscConfig+0xa84>
 8001f92:	4ba5      	ldr	r3, [pc, #660]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	49a1      	ldr	r1, [pc, #644]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60cb      	str	r3, [r1, #12]
 8001fa6:	e009      	b.n	8001fbc <HAL_RCC_OscConfig+0xa98>
 8001fa8:	4b9f      	ldr	r3, [pc, #636]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	03db      	lsls	r3, r3, #15
 8001fb6:	499c      	ldr	r1, [pc, #624]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001fbc:	4b9a      	ldr	r3, [pc, #616]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a99      	ldr	r2, [pc, #612]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001fc8:	f7fe fe46 	bl	8000c58 <HAL_GetTick>
 8001fcc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001fd0:	f7fe fe42 	bl	8000c58 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e170      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001fe2:	4b91      	ldr	r3, [pc, #580]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xaac>
 8001fee:	e018      	b.n	8002022 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001ff0:	4b8d      	ldr	r3, [pc, #564]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a8c      	ldr	r2, [pc, #560]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8001ff6:	f023 0310 	bic.w	r3, r3, #16
 8001ffa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ffc:	f7fe fe2c 	bl	8000c58 <HAL_GetTick>
 8002000:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002004:	f7fe fe28 	bl	8000c58 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e156      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002016:	4b84      	ldr	r3, [pc, #528]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 814b 	beq.w	80022c2 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002032:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b0c      	cmp	r3, #12
 800203c:	f000 80fa 	beq.w	8002234 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	2b02      	cmp	r3, #2
 8002046:	f040 80cc 	bne.w	80021e2 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800204a:	4b77      	ldr	r3, [pc, #476]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a76      	ldr	r2, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002054:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002056:	f7fe fdff 	bl	8000c58 <HAL_GetTick>
 800205a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe fdfb 	bl	8000c58 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e129      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002070:	4b6d      	ldr	r3, [pc, #436]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d111      	bne.n	80020ae <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800208c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800209c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80020ae:	4b5f      	ldr	r3, [pc, #380]	; (800222c <HAL_RCC_OscConfig+0xd08>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80020c2:	4b5a      	ldr	r3, [pc, #360]	; (800222c <HAL_RCC_OscConfig+0xd08>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	4a59      	ldr	r2, [pc, #356]	; (800222c <HAL_RCC_OscConfig+0xd08>)
 80020c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020cc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80020ce:	4b56      	ldr	r3, [pc, #344]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020e2:	3a01      	subs	r2, #1
 80020e4:	0212      	lsls	r2, r2, #8
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020ec:	430a      	orrs	r2, r1
 80020ee:	494e      	ldr	r1, [pc, #312]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	628b      	str	r3, [r1, #40]	; 0x28
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80020f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f8:	4b4d      	ldr	r3, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0xd0c>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002100:	3a01      	subs	r2, #1
 8002102:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800210a:	3a01      	subs	r2, #1
 800210c:	0252      	lsls	r2, r2, #9
 800210e:	b292      	uxth	r2, r2
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002116:	3a01      	subs	r2, #1
 8002118:	0412      	lsls	r2, r2, #16
 800211a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002124:	3a01      	subs	r2, #1
 8002126:	0612      	lsls	r2, r2, #24
 8002128:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800212c:	430a      	orrs	r2, r1
 800212e:	493e      	ldr	r1, [pc, #248]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002130:	4313      	orrs	r3, r2
 8002132:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002134:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800213a:	f023 0310 	bic.w	r3, r3, #16
 800213e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002148:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002150:	00d2      	lsls	r2, r2, #3
 8002152:	4935      	ldr	r1, [pc, #212]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002154:	4313      	orrs	r3, r2
 8002156:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	4a32      	ldr	r2, [pc, #200]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f023 020c 	bic.w	r2, r3, #12
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	492d      	ldr	r1, [pc, #180]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002172:	4313      	orrs	r3, r2
 8002174:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002176:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_RCC_OscConfig+0xd08>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4a2a      	ldr	r2, [pc, #168]	; (800222c <HAL_RCC_OscConfig+0xd08>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800218a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002198:	4a23      	ldr	r2, [pc, #140]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800219a:	f023 0304 	bic.w	r3, r3, #4
 800219e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021a2:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	4a20      	ldr	r2, [pc, #128]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ac:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80021b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80021ba:	f7fe fd4d 	bl	8000c58 <HAL_GetTick>
 80021be:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7fe fd49 	bl	8000c58 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e077      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0xc9e>
 80021e0:	e06f      	b.n	80022c2 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80021ee:	f7fe fd33 	bl	8000c58 <HAL_GetTick>
 80021f2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fd2f 	bl	8000c58 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e05d      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	4a03      	ldr	r2, [pc, #12]	; (8002228 <HAL_RCC_OscConfig+0xd04>)
 800221a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800221e:	f023 0303 	bic.w	r3, r3, #3
 8002222:	6293      	str	r3, [r2, #40]	; 0x28
 8002224:	e04d      	b.n	80022c2 <HAL_RCC_OscConfig+0xd9e>
 8002226:	bf00      	nop
 8002228:	46020c00 	.word	0x46020c00
 800222c:	46020800 	.word	0x46020800
 8002230:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_OscConfig+0xda8>)
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0xda8>)
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002244:	2b01      	cmp	r3, #1
 8002246:	d03a      	beq.n	80022be <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0203 	and.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d133      	bne.n	80022be <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d12a      	bne.n	80022be <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	0b1b      	lsrs	r3, r3, #12
 800226c:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d122      	bne.n	80022be <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002282:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d11a      	bne.n	80022be <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	0a5b      	lsrs	r3, r3, #9
 800228c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d111      	bne.n	80022be <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d108      	bne.n	80022be <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	0e1b      	lsrs	r3, r3, #24
 80022b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3738      	adds	r7, #56	; 0x38
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	46020c00 	.word	0x46020c00

080022d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e1d9      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b9b      	ldr	r3, [pc, #620]	; (8002554 <HAL_RCC_ClockConfig+0x284>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b98      	ldr	r3, [pc, #608]	; (8002554 <HAL_RCC_ClockConfig+0x284>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 020f 	bic.w	r2, r3, #15
 80022fa:	4996      	ldr	r1, [pc, #600]	; (8002554 <HAL_RCC_ClockConfig+0x284>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b94      	ldr	r3, [pc, #592]	; (8002554 <HAL_RCC_ClockConfig+0x284>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e1c1      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800232c:	429a      	cmp	r2, r3
 800232e:	d908      	bls.n	8002342 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002330:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4986      	ldr	r1, [pc, #536]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 800233e:	4313      	orrs	r3, r2
 8002340:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d012      	beq.n	8002374 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	4b81      	ldr	r3, [pc, #516]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800235c:	429a      	cmp	r2, r3
 800235e:	d909      	bls.n	8002374 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002360:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	497a      	ldr	r1, [pc, #488]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002370:	4313      	orrs	r3, r2
 8002372:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	4b74      	ldr	r3, [pc, #464]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800238c:	429a      	cmp	r2, r3
 800238e:	d908      	bls.n	80023a2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b71      	ldr	r3, [pc, #452]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	496e      	ldr	r1, [pc, #440]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d010      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	4b69      	ldr	r3, [pc, #420]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d908      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80023be:	4b66      	ldr	r3, [pc, #408]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	f023 020f 	bic.w	r2, r3, #15
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4963      	ldr	r1, [pc, #396]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80d2 	beq.w	8002582 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d143      	bne.n	8002472 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 80023ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d110      	bne.n	800241a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023f8:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 80023fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fe:	4a56      	ldr	r2, [pc, #344]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002408:	4b53      	ldr	r3, [pc, #332]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 800240a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800241a:	f7fe fc1d 	bl	8000c58 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002420:	4b4e      	ldr	r3, [pc, #312]	; (800255c <HAL_RCC_ClockConfig+0x28c>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00f      	beq.n	800244c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800242e:	f7fe fc13 	bl	8000c58 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e12b      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002440:	4b46      	ldr	r3, [pc, #280]	; (800255c <HAL_RCC_ClockConfig+0x28c>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002458:	4a3f      	ldr	r2, [pc, #252]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 800245a:	f023 0304 	bic.w	r3, r3, #4
 800245e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002462:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d121      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e112      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d115      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e106      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0fa      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a2:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0f2      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4926      	ldr	r1, [pc, #152]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80024c4:	f7fe fbc8 	bl	8000c58 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d112      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fbc0 	bl	8000c58 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0d6      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d1ee      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x204>
 80024f6:	e044      	b.n	8002582 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d112      	bne.n	8002526 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002502:	f7fe fba9 	bl	8000c58 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0bf      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d1ee      	bne.n	8002502 <HAL_RCC_ClockConfig+0x232>
 8002524:	e02d      	b.n	8002582 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d123      	bne.n	8002576 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fb92 	bl	8000c58 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0a8      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <HAL_RCC_ClockConfig+0x288>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ee      	bne.n	8002530 <HAL_RCC_ClockConfig+0x260>
 8002552:	e016      	b.n	8002582 <HAL_RCC_ClockConfig+0x2b2>
 8002554:	40022000 	.word	0x40022000
 8002558:	46020c00 	.word	0x46020c00
 800255c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7fe fb7a 	bl	8000c58 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e090      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d1ee      	bne.n	8002560 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d010      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	429a      	cmp	r2, r3
 800259c:	d208      	bcs.n	80025b0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800259e:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	f023 020f 	bic.w	r2, r3, #15
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	493d      	ldr	r1, [pc, #244]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <HAL_RCC_ClockConfig+0x3d4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d210      	bcs.n	80025e0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <HAL_RCC_ClockConfig+0x3d4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 020f 	bic.w	r2, r3, #15
 80025c6:	4937      	ldr	r1, [pc, #220]	; (80026a4 <HAL_RCC_ClockConfig+0x3d4>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_RCC_ClockConfig+0x3d4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e05b      	b.n	8002698 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d010      	beq.n	800260e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d208      	bcs.n	800260e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4925      	ldr	r1, [pc, #148]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 800260a:	4313      	orrs	r3, r2
 800260c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002628:	429a      	cmp	r2, r3
 800262a:	d209      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	4919      	ldr	r1, [pc, #100]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 800263c:	4313      	orrs	r3, r2
 800263e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002658:	429a      	cmp	r2, r3
 800265a:	d208      	bcs.n	800266e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	490d      	ldr	r1, [pc, #52]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800266e:	f000 f821 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8002672:	4602      	mov	r2, r0
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x3d0>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	490a      	ldr	r1, [pc, #40]	; (80026a8 <HAL_RCC_ClockConfig+0x3d8>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x3dc>)
 8002686:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x3e0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe f985 	bl	800099c <HAL_InitTick>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]

  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	46020c00 	.word	0x46020c00
 80026a4:	40022000 	.word	0x40022000
 80026a8:	08005984 	.word	0x08005984
 80026ac:	20000028 	.word	0x20000028
 80026b0:	2000002c 	.word	0x2000002c

080026b4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b08b      	sub	sp, #44	; 0x2c
 80026b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c2:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026cc:	4b78      	ldr	r3, [pc, #480]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x34>
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	d121      	bne.n	8002726 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d11e      	bne.n	8002726 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80026e8:	4b71      	ldr	r3, [pc, #452]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80026f4:	4b6e      	ldr	r3, [pc, #440]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026fa:	0b1b      	lsrs	r3, r3, #12
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	e005      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	0f1b      	lsrs	r3, r3, #28
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002710:	4a68      	ldr	r2, [pc, #416]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d110      	bne.n	8002742 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002724:	e00d      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002726:	4b62      	ldr	r3, [pc, #392]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b04      	cmp	r3, #4
 8002730:	d102      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002734:	623b      	str	r3, [r7, #32]
 8002736:	e004      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d101      	bne.n	8002742 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800273e:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002740:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	f040 80ac 	bne.w	80028a2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800274a:	4b59      	ldr	r3, [pc, #356]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002754:	4b56      	ldr	r3, [pc, #344]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3301      	adds	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002762:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	08db      	lsrs	r3, r3, #3
 8002774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8086 	beq.w	800289e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d003      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0xec>
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d022      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x130>
 800279e:	e043      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6a44 	vldr	s13, [pc, #272]	; 80028bc <HAL_RCC_GetSysClockFreq+0x208>
 80027ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b2:	4b3f      	ldr	r3, [pc, #252]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80027c2:	ed97 6a01 	vldr	s12, [r7, #4]
 80027c6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x20c>
 80027ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80027d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027de:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80027e2:	e046      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ee:	eddf 6a33 	vldr	s13, [pc, #204]	; 80028bc <HAL_RCC_GetSysClockFreq+0x208>
 80027f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f6:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002806:	ed97 6a01 	vldr	s12, [r7, #4]
 800280a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x20c>
 800280e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002812:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800281a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800281e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002822:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002826:	e024      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002850:	ed97 6a01 	vldr	s12, [r7, #4]
 8002854:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x20c>
 8002858:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800285c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002864:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002870:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	0e1b      	lsrs	r3, r3, #24
 8002878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800287c:	3301      	adds	r3, #1
 800287e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800288a:	edd7 6a07 	vldr	s13, [r7, #28]
 800288e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002896:	ee17 3a90 	vmov	r3, s15
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	e001      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80028a2:	6a3b      	ldr	r3, [r7, #32]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	372c      	adds	r7, #44	; 0x2c
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	46020c00 	.word	0x46020c00
 80028b4:	0800599c 	.word	0x0800599c
 80028b8:	00f42400 	.word	0x00f42400
 80028bc:	4b742400 	.word	0x4b742400
 80028c0:	46000000 	.word	0x46000000

080028c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80028c8:	f7ff fef4 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_RCC_GetHCLKFreq+0x28>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	4906      	ldr	r1, [pc, #24]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80028d8:	5ccb      	ldrb	r3, [r1, r3]
 80028da:	fa22 f303 	lsr.w	r3, r2, r3
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80028e0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80028e4:	681b      	ldr	r3, [r3, #0]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	46020c00 	.word	0x46020c00
 80028f0:	08005984 	.word	0x08005984
 80028f4:	20000028 	.word	0x20000028

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80028fc:	f7ff ffe2 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	46020c00 	.word	0x46020c00
 800291c:	08005994 	.word	0x08005994

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002924:	f7ff ffce 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	46020c00 	.word	0x46020c00
 8002944:	08005994 	.word	0x08005994

08002948 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	221f      	movs	r2, #31
 8002956:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_RCC_GetClockConfig+0x68>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_GetClockConfig+0x68>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f003 020f 	and.w	r2, r3, #15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_RCC_GetClockConfig+0x68>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_RCC_GetClockConfig+0x68>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_GetClockConfig+0x68>)
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_RCC_GetClockConfig+0x6c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 020f 	and.w	r2, r3, #15
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	601a      	str	r2, [r3, #0]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	46020c00 	.word	0x46020c00
 80029b4:	40022000 	.word	0x40022000

080029b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029c0:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029ce:	f7fe fd2b 	bl	8001428 <HAL_PWREx_GetVoltageRange>
 80029d2:	6178      	str	r0, [r7, #20]
 80029d4:	e019      	b.n	8002a0a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b39      	ldr	r3, [pc, #228]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80029d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029dc:	4a37      	ldr	r2, [pc, #220]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029e6:	4b35      	ldr	r3, [pc, #212]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80029e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029f4:	f7fe fd18 	bl	8001428 <HAL_PWREx_GetVoltageRange>
 80029f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4b30      	ldr	r3, [pc, #192]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a00:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a02:	f023 0304 	bic.w	r3, r3, #4
 8002a06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a10:	d003      	beq.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a18:	d109      	bne.n	8002a2e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a20:	d202      	bcs.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002a22:	2301      	movs	r3, #1
 8002a24:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a26:	e033      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a2c:	e030      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a34:	d208      	bcs.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d102      	bne.n	8002a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002a3e:	2303      	movs	r3, #3
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	e025      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e035      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4e:	d90f      	bls.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a5c:	d902      	bls.n	8002a64 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e015      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002a64:	2301      	movs	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e012      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	e00f      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a76:	d109      	bne.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7e:	d102      	bne.n	8002a86 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002a80:	2301      	movs	r3, #1
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	e004      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002a86:	2302      	movs	r3, #2
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	e001      	b.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 020f 	bic.w	r2, r3, #15
 8002a98:	4909      	ldr	r1, [pc, #36]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d001      	beq.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	46020c00 	.word	0x46020c00
 8002ac0:	40022000 	.word	0x40022000

08002ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac8:	b0ba      	sub	sp, #232	; 0xe8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002adc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f002 0401 	and.w	r4, r2, #1
 8002ae8:	2500      	movs	r5, #0
 8002aea:	ea54 0305 	orrs.w	r3, r4, r5
 8002aee:	d00b      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002af0:	4bcb      	ldr	r3, [pc, #812]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af6:	f023 0103 	bic.w	r1, r3, #3
 8002afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b00:	4ac7      	ldr	r2, [pc, #796]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b02:	430b      	orrs	r3, r1
 8002b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f002 0802 	and.w	r8, r2, #2
 8002b14:	f04f 0900 	mov.w	r9, #0
 8002b18:	ea58 0309 	orrs.w	r3, r8, r9
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002b1e:	4bc0      	ldr	r3, [pc, #768]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b24:	f023 010c 	bic.w	r1, r3, #12
 8002b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	4abc      	ldr	r2, [pc, #752]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b30:	430b      	orrs	r3, r1
 8002b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f002 0a04 	and.w	sl, r2, #4
 8002b42:	f04f 0b00 	mov.w	fp, #0
 8002b46:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b4a:	d00b      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002b4c:	4bb4      	ldr	r3, [pc, #720]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b52:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	4ab0      	ldr	r2, [pc, #704]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f002 0308 	and.w	r3, r2, #8
 8002b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4313      	orrs	r3, r2
 8002b82:	d00b      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002b84:	4ba6      	ldr	r3, [pc, #664]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	4aa2      	ldr	r2, [pc, #648]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b96:	430b      	orrs	r3, r1
 8002b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f002 0310 	and.w	r3, r2, #16
 8002ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bb2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	d00b      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002bbc:	4b98      	ldr	r3, [pc, #608]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bcc:	4a94      	ldr	r2, [pc, #592]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f002 0320 	and.w	r3, r2, #32
 8002be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002bea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	d00b      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002bf4:	4b8a      	ldr	r3, [pc, #552]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bfa:	f023 0107 	bic.w	r1, r3, #7
 8002bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c04:	4a86      	ldr	r2, [pc, #536]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c06:	430b      	orrs	r3, r1
 8002c08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002c2c:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c32:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3c:	4a78      	ldr	r2, [pc, #480]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c5a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4313      	orrs	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002c64:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c74:	4a6a      	ldr	r2, [pc, #424]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c76:	430b      	orrs	r3, r1
 8002c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002c88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002c92:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002c9c:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ca2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a5c      	ldr	r2, [pc, #368]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	d00b      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002cd4:	4b52      	ldr	r3, [pc, #328]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cda:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	4a4e      	ldr	r2, [pc, #312]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002cf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002d06:	460b      	mov	r3, r1
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002d0c:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d12:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1c:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4313      	orrs	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d54:	4a32      	ldr	r2, [pc, #200]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d56:	430b      	orrs	r3, r1
 8002d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d72:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002d76:	460b      	mov	r3, r1
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d90:	430b      	orrs	r3, r1
 8002d92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002da2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002da4:	2300      	movs	r3, #0
 8002da6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002da8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002dac:	460b      	mov	r3, r1
 8002dae:	4313      	orrs	r3, r2
 8002db0:	d04f      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	2b80      	cmp	r3, #128	; 0x80
 8002dbc:	d02d      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d827      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002dc2:	2b60      	cmp	r3, #96	; 0x60
 8002dc4:	d02e      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002dc6:	2b60      	cmp	r3, #96	; 0x60
 8002dc8:	d823      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d006      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d81f      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d011      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002dda:	e01a      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002de8:	e01d      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dee:	3308      	adds	r3, #8
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fc27 	bl	8003644 <RCCEx_PLL2_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dfc:	e013      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e02:	332c      	adds	r3, #44	; 0x2c
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fcb5 	bl	8003774 <RCCEx_PLL3_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e10:	e009      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002e18:	e005      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8002e1a:	bf00      	nop
 8002e1c:	e003      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002e1e:	bf00      	nop
 8002e20:	46020c00 	.word	0x46020c00
        break;
 8002e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002e2e:	4bb6      	ldr	r3, [pc, #728]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002e30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e34:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002e38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	4ab1      	ldr	r2, [pc, #708]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002e42:	430b      	orrs	r3, r1
 8002e44:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002e48:	e003      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002e4e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e60:	2300      	movs	r3, #0
 8002e62:	677b      	str	r3, [r7, #116]	; 0x74
 8002e64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	d053      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7a:	d033      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e80:	d82c      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e86:	d02f      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e8c:	d826      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e98:	d820      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8002e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea2:	d011      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002ea4:	e01a      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ea6:	4b98      	ldr	r3, [pc, #608]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	4a97      	ldr	r2, [pc, #604]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002eb2:	e01a      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002eb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eb8:	3308      	adds	r3, #8
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fbc2 	bl	8003644 <RCCEx_PLL2_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002ec6:	e010      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ecc:	332c      	adds	r3, #44	; 0x2c
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fc50 	bl	8003774 <RCCEx_PLL3_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002eda:	e006      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002ee2:	e002      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10d      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002ef2:	4b85      	ldr	r3, [pc, #532]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002ef4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002ef8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f04:	4a80      	ldr	r2, [pc, #512]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f06:	430b      	orrs	r3, r1
 8002f08:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002f0c:	e003      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f12:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f24:	2300      	movs	r3, #0
 8002f26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f28:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	d046      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f3a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002f3e:	d028      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f40:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002f44:	d821      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4a:	d022      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f50:	d81b      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002f52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f56:	d01c      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f5c:	d815      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f68:	d80f      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d00e      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002f74:	e009      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fb61 	bl	8003644 <RCCEx_PLL2_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002f88:	e004      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002f90:	e000      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8002f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f94:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002f9c:	4b5a      	ldr	r3, [pc, #360]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fae:	4a56      	ldr	r2, [pc, #344]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fb6:	e003      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002fbc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8002fce:	2300      	movs	r3, #0
 8002fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8002fd2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	d03f      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d81e      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	0800302f 	.word	0x0800302f
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003013 	.word	0x08003013
 8002ffc:	0800302f 	.word	0x0800302f
 8003000:	0800302f 	.word	0x0800302f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003004:	4b40      	ldr	r3, [pc, #256]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	4a3f      	ldr	r2, [pc, #252]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003010:	e00e      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003016:	332c      	adds	r3, #44	; 0x2c
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fbab 	bl	8003774 <RCCEx_PLL3_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003024:	e004      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800302c:	e000      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800302e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003030:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003038:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800303a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800303e:	f023 0107 	bic.w	r1, r3, #7
 8003042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800304c:	430b      	orrs	r3, r1
 800304e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003052:	e003      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003058:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800305c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003068:	65bb      	str	r3, [r7, #88]	; 0x58
 800306a:	2300      	movs	r3, #0
 800306c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003072:	460b      	mov	r3, r1
 8003074:	4313      	orrs	r3, r2
 8003076:	d04d      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800307c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003080:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003084:	d028      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800308a:	d821      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800308c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003090:	d024      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003092:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003096:	d81b      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800309c:	d00e      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800309e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030a2:	d815      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01b      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d110      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	4a15      	ldr	r2, [pc, #84]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80030ba:	e012      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030c0:	332c      	adds	r3, #44	; 0x2c
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fb56 	bl	8003774 <RCCEx_PLL3_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80030ce:	e008      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80030d6:	e004      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80030d8:	bf00      	nop
 80030da:	e002      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80030dc:	bf00      	nop
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80030e0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80030e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d110      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80030f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030fc:	4a02      	ldr	r2, [pc, #8]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030fe:	430b      	orrs	r3, r1
 8003100:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003104:	e006      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003106:	bf00      	nop
 8003108:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003110:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003120:	653b      	str	r3, [r7, #80]	; 0x50
 8003122:	2300      	movs	r3, #0
 8003124:	657b      	str	r3, [r7, #84]	; 0x54
 8003126:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800312a:	460b      	mov	r3, r1
 800312c:	4313      	orrs	r3, r2
 800312e:	f000 80b5 	beq.w	800329c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003132:	2300      	movs	r3, #0
 8003134:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003138:	4b9d      	ldr	r3, [pc, #628]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d113      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	4b9a      	ldr	r3, [pc, #616]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314c:	4a98      	ldr	r2, [pc, #608]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003156:	4b96      	ldr	r3, [pc, #600]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800316e:	4b91      	ldr	r3, [pc, #580]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	4a90      	ldr	r2, [pc, #576]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800317a:	f7fd fd6d 	bl	8000c58 <HAL_GetTick>
 800317e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003182:	e00b      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003184:	f7fd fd68 	bl	8000c58 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d903      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800319a:	e005      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800319c:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ed      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80031a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d165      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031b0:	4b7f      	ldr	r3, [pc, #508]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d023      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80031c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01b      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031d6:	4b76      	ldr	r3, [pc, #472]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031e4:	4b72      	ldr	r3, [pc, #456]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ea:	4a71      	ldr	r2, [pc, #452]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031f4:	4b6e      	ldr	r3, [pc, #440]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031fa:	4a6d      	ldr	r2, [pc, #436]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003204:	4a6a      	ldr	r2, [pc, #424]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d019      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fd fd1d 	bl	8000c58 <HAL_GetTick>
 800321e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003222:	e00d      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fd fd18 	bl	8000c58 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	f241 3388 	movw	r3, #5000	; 0x1388
 8003234:	429a      	cmp	r2, r3
 8003236:	d903      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800323e:	e006      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003240:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ea      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800324e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10d      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003256:	4b56      	ldr	r3, [pc, #344]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800325c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003264:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003268:	4a51      	ldr	r2, [pc, #324]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800326a:	430b      	orrs	r3, r1
 800326c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003270:	e008      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003272:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003276:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800327a:	e003      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003280:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003284:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328c:	4b48      	ldr	r3, [pc, #288]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800328e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003292:	4a47      	ldr	r2, [pc, #284]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800329c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80032aa:	2300      	movs	r3, #0
 80032ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80032b2:	460b      	mov	r3, r1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	d042      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80032b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80032c4:	d022      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80032c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80032ca:	d81b      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80032cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d0:	d011      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80032d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d6:	d815      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d019      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80032dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e0:	d110      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032e6:	3308      	adds	r3, #8
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f9ab 	bl	8003644 <RCCEx_PLL2_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80032f4:	e00d      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f6:	4b2e      	ldr	r3, [pc, #184]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	4a2d      	ldr	r2, [pc, #180]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003300:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003302:	e006      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800330a:	e002      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800330c:	bf00      	nop
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003310:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003312:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10d      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003320:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003328:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800332c:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800332e:	430b      	orrs	r3, r1
 8003330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003334:	e003      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800333a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800333e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800334a:	643b      	str	r3, [r7, #64]	; 0x40
 800334c:	2300      	movs	r3, #0
 800334e:	647b      	str	r3, [r7, #68]	; 0x44
 8003350:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003354:	460b      	mov	r3, r1
 8003356:	4313      	orrs	r3, r2
 8003358:	d032      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800335a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800335e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003366:	d00b      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336c:	d804      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d007      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800337e:	e004      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003380:	bf00      	nop
 8003382:	e002      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003388:	bf00      	nop
    }
    if (ret == HAL_OK)
 800338a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d112      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003394:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003398:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800339c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033a4:	4a02      	ldr	r2, [pc, #8]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80033a6:	430b      	orrs	r3, r1
 80033a8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80033ac:	e008      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80033ae:	bf00      	nop
 80033b0:	46020c00 	.word	0x46020c00
 80033b4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80033bc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80033c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80033cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ce:	2300      	movs	r3, #0
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80033d6:	460b      	mov	r3, r1
 80033d8:	4313      	orrs	r3, r2
 80033da:	d00c      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80033dc:	4b98      	ldr	r3, [pc, #608]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80033de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80033e2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80033e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033ee:	4a94      	ldr	r2, [pc, #592]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80033f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
 8003404:	2300      	movs	r3, #0
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
 8003408:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800340c:	460b      	mov	r3, r1
 800340e:	4313      	orrs	r3, r2
 8003410:	d019      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800341a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341e:	d105      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003420:	4b87      	ldr	r3, [pc, #540]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	4a86      	ldr	r2, [pc, #536]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800342c:	4b84      	ldr	r3, [pc, #528]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800342e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003432:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800343a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800343e:	4a80      	ldr	r2, [pc, #512]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003440:	430b      	orrs	r3, r1
 8003442:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
 8003454:	2300      	movs	r3, #0
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003458:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800345c:	460b      	mov	r3, r1
 800345e:	4313      	orrs	r3, r2
 8003460:	d00c      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003462:	4b77      	ldr	r3, [pc, #476]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800346c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003470:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003474:	4972      	ldr	r1, [pc, #456]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800347c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003488:	623b      	str	r3, [r7, #32]
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003492:	460b      	mov	r3, r1
 8003494:	4313      	orrs	r3, r2
 8003496:	d00c      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003498:	4b69      	ldr	r3, [pc, #420]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800349a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034aa:	4965      	ldr	r1, [pc, #404]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80034b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80034c8:	460b      	mov	r3, r1
 80034ca:	4313      	orrs	r3, r2
 80034cc:	d00c      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80034ce:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d4:	f023 0218 	bic.w	r2, r3, #24
 80034d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034e0:	4957      	ldr	r1, [pc, #348]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80034fe:	460b      	mov	r3, r1
 8003500:	4313      	orrs	r3, r2
 8003502:	d032      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003504:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800350c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003510:	d105      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003512:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	4a4a      	ldr	r2, [pc, #296]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800351e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003526:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800352a:	d108      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800352c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003530:	3308      	adds	r3, #8
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f886 	bl	8003644 <RCCEx_PLL2_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800353e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003548:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800354c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003550:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003558:	4939      	ldr	r1, [pc, #228]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003562:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003566:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800356a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003580:	460b      	mov	r3, r1
 8003582:	4313      	orrs	r3, r2
 8003584:	d03a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800358a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003592:	d00e      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8003594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003598:	d815      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d017      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800359e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a2:	d110      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	4a25      	ldr	r2, [pc, #148]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ae:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80035b0:	e00e      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035b6:	3308      	adds	r3, #8
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f843 	bl	8003644 <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80035c4:	e004      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80035ce:	bf00      	nop
    }
    if (ret == HAL_OK)
 80035d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ea:	4915      	ldr	r1, [pc, #84]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80035f2:	e003      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80035f8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80035fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003612:	460b      	mov	r3, r1
 8003614:	4313      	orrs	r3, r2
 8003616:	d00c      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800361a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800361e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800362a:	4905      	ldr	r1, [pc, #20]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003632:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8003636:	4618      	mov	r0, r3
 8003638:	37e8      	adds	r7, #232	; 0xe8
 800363a:	46bd      	mov	sp, r7
 800363c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003640:	46020c00 	.word	0x46020c00

08003644 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800364c:	4b47      	ldr	r3, [pc, #284]	; (800376c <RCCEx_PLL2_Config+0x128>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a46      	ldr	r2, [pc, #280]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003656:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003658:	f7fd fafe 	bl	8000c58 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800365e:	e008      	b.n	8003672 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003660:	f7fd fafa 	bl	8000c58 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e077      	b.n	8003762 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003672:	4b3e      	ldr	r3, [pc, #248]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800367e:	4b3b      	ldr	r3, [pc, #236]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6811      	ldr	r1, [r2, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6852      	ldr	r2, [r2, #4]
 8003692:	3a01      	subs	r2, #1
 8003694:	0212      	lsls	r2, r2, #8
 8003696:	430a      	orrs	r2, r1
 8003698:	4934      	ldr	r1, [pc, #208]	; (800376c <RCCEx_PLL2_Config+0x128>)
 800369a:	4313      	orrs	r3, r2
 800369c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800369e:	4b33      	ldr	r3, [pc, #204]	; (800376c <RCCEx_PLL2_Config+0x128>)
 80036a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a2:	4b33      	ldr	r3, [pc, #204]	; (8003770 <RCCEx_PLL2_Config+0x12c>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6892      	ldr	r2, [r2, #8]
 80036aa:	3a01      	subs	r2, #1
 80036ac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68d2      	ldr	r2, [r2, #12]
 80036b4:	3a01      	subs	r2, #1
 80036b6:	0252      	lsls	r2, r2, #9
 80036b8:	b292      	uxth	r2, r2
 80036ba:	4311      	orrs	r1, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6912      	ldr	r2, [r2, #16]
 80036c0:	3a01      	subs	r2, #1
 80036c2:	0412      	lsls	r2, r2, #16
 80036c4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6952      	ldr	r2, [r2, #20]
 80036ce:	3a01      	subs	r2, #1
 80036d0:	0612      	lsls	r2, r2, #24
 80036d2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80036d6:	430a      	orrs	r2, r1
 80036d8:	4924      	ldr	r1, [pc, #144]	; (800376c <RCCEx_PLL2_Config+0x128>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80036de:	4b23      	ldr	r3, [pc, #140]	; (800376c <RCCEx_PLL2_Config+0x128>)
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f023 020c 	bic.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	4920      	ldr	r1, [pc, #128]	; (800376c <RCCEx_PLL2_Config+0x128>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <RCCEx_PLL2_Config+0x128>)
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	491c      	ldr	r1, [pc, #112]	; (800376c <RCCEx_PLL2_Config+0x128>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	4a1a      	ldr	r2, [pc, #104]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003704:	f023 0310 	bic.w	r3, r3, #16
 8003708:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <RCCEx_PLL2_Config+0x128>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003712:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	69d2      	ldr	r2, [r2, #28]
 800371a:	00d2      	lsls	r2, r2, #3
 800371c:	4913      	ldr	r1, [pc, #76]	; (800376c <RCCEx_PLL2_Config+0x128>)
 800371e:	4313      	orrs	r3, r2
 8003720:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4a11      	ldr	r2, [pc, #68]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003728:	f043 0310 	orr.w	r3, r3, #16
 800372c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800372e:	4b0f      	ldr	r3, [pc, #60]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a0e      	ldr	r2, [pc, #56]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003738:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800373a:	f7fd fa8d 	bl	8000c58 <HAL_GetTick>
 800373e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003740:	e008      	b.n	8003754 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003742:	f7fd fa89 	bl	8000c58 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e006      	b.n	8003762 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <RCCEx_PLL2_Config+0x128>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0

}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	46020c00 	.word	0x46020c00
 8003770:	80800000 	.word	0x80800000

08003774 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800377c:	4b47      	ldr	r3, [pc, #284]	; (800389c <RCCEx_PLL3_Config+0x128>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a46      	ldr	r2, [pc, #280]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003788:	f7fd fa66 	bl	8000c58 <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800378e:	e008      	b.n	80037a2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003790:	f7fd fa62 	bl	8000c58 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e077      	b.n	8003892 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037a2:	4b3e      	ldr	r3, [pc, #248]	; (800389c <RCCEx_PLL3_Config+0x128>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80037ae:	4b3b      	ldr	r3, [pc, #236]	; (800389c <RCCEx_PLL3_Config+0x128>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6811      	ldr	r1, [r2, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6852      	ldr	r2, [r2, #4]
 80037c2:	3a01      	subs	r2, #1
 80037c4:	0212      	lsls	r2, r2, #8
 80037c6:	430a      	orrs	r2, r1
 80037c8:	4934      	ldr	r1, [pc, #208]	; (800389c <RCCEx_PLL3_Config+0x128>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	630b      	str	r3, [r1, #48]	; 0x30
 80037ce:	4b33      	ldr	r3, [pc, #204]	; (800389c <RCCEx_PLL3_Config+0x128>)
 80037d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d2:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <RCCEx_PLL3_Config+0x12c>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6892      	ldr	r2, [r2, #8]
 80037da:	3a01      	subs	r2, #1
 80037dc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68d2      	ldr	r2, [r2, #12]
 80037e4:	3a01      	subs	r2, #1
 80037e6:	0252      	lsls	r2, r2, #9
 80037e8:	b292      	uxth	r2, r2
 80037ea:	4311      	orrs	r1, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6912      	ldr	r2, [r2, #16]
 80037f0:	3a01      	subs	r2, #1
 80037f2:	0412      	lsls	r2, r2, #16
 80037f4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80037f8:	4311      	orrs	r1, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6952      	ldr	r2, [r2, #20]
 80037fe:	3a01      	subs	r2, #1
 8003800:	0612      	lsls	r2, r2, #24
 8003802:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003806:	430a      	orrs	r2, r1
 8003808:	4924      	ldr	r1, [pc, #144]	; (800389c <RCCEx_PLL3_Config+0x128>)
 800380a:	4313      	orrs	r3, r2
 800380c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800380e:	4b23      	ldr	r3, [pc, #140]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f023 020c 	bic.w	r2, r3, #12
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	4920      	ldr	r1, [pc, #128]	; (800389c <RCCEx_PLL3_Config+0x128>)
 800381c:	4313      	orrs	r3, r2
 800381e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	491c      	ldr	r1, [pc, #112]	; (800389c <RCCEx_PLL3_Config+0x128>)
 800382a:	4313      	orrs	r3, r2
 800382c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a1a      	ldr	r2, [pc, #104]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003834:	f023 0310 	bic.w	r3, r3, #16
 8003838:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <RCCEx_PLL3_Config+0x128>)
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003842:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	69d2      	ldr	r2, [r2, #28]
 800384a:	00d2      	lsls	r2, r2, #3
 800384c:	4913      	ldr	r1, [pc, #76]	; (800389c <RCCEx_PLL3_Config+0x128>)
 800384e:	4313      	orrs	r3, r2
 8003850:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a11      	ldr	r2, [pc, #68]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003858:	f043 0310 	orr.w	r3, r3, #16
 800385c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a0e      	ldr	r2, [pc, #56]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800386a:	f7fd f9f5 	bl	8000c58 <HAL_GetTick>
 800386e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003870:	e008      	b.n	8003884 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003872:	f7fd f9f1 	bl	8000c58 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e006      	b.n	8003892 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <RCCEx_PLL3_Config+0x128>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	46020c00 	.word	0x46020c00
 80038a0:	80800000 	.word	0x80800000

080038a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e049      	b.n	800394a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f841 	bl	8003952 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	4619      	mov	r1, r3
 80038e2:	4610      	mov	r0, r2
 80038e4:	f000 fa88 	bl	8003df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d001      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e072      	b.n	8003a66 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a35      	ldr	r2, [pc, #212]	; (8003a74 <HAL_TIM_Base_Start_IT+0x10c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d040      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a34      	ldr	r2, [pc, #208]	; (8003a78 <HAL_TIM_Base_Start_IT+0x110>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d03b      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d036      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039be:	d031      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <HAL_TIM_Base_Start_IT+0x114>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d02c      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <HAL_TIM_Base_Start_IT+0x118>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d027      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <HAL_TIM_Base_Start_IT+0x11c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d022      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <HAL_TIM_Base_Start_IT+0x120>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d01d      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <HAL_TIM_Base_Start_IT+0x124>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d018      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <HAL_TIM_Base_Start_IT+0x128>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <HAL_TIM_Base_Start_IT+0x12c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00e      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a23      	ldr	r2, [pc, #140]	; (8003a98 <HAL_TIM_Base_Start_IT+0x130>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d009      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <HAL_TIM_Base_Start_IT+0x134>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xbc>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <HAL_TIM_Base_Start_IT+0x138>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d115      	bne.n	8003a50 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <HAL_TIM_Base_Start_IT+0x13c>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d015      	beq.n	8003a62 <HAL_TIM_Base_Start_IT+0xfa>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d011      	beq.n	8003a62 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4e:	e008      	b.n	8003a62 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e000      	b.n	8003a64 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	50012c00 	.word	0x50012c00
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	50000400 	.word	0x50000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	50000800 	.word	0x50000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	50000c00 	.word	0x50000c00
 8003a94:	40013400 	.word	0x40013400
 8003a98:	50013400 	.word	0x50013400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	50014000 	.word	0x50014000
 8003aa4:	00010007 	.word	0x00010007

08003aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0202 	mvn.w	r2, #2
 8003ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f965 	bl	8003dba <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f957 	bl	8003da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f968 	bl	8003dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0204 	mvn.w	r2, #4
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f93b 	bl	8003dba <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f92d 	bl	8003da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f93e 	bl	8003dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0208 	mvn.w	r2, #8
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2204      	movs	r2, #4
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f911 	bl	8003dba <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f903 	bl	8003da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f914 	bl	8003dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d122      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d11b      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0210 	mvn.w	r2, #16
 8003bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8e7 	bl	8003dba <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8d9 	bl	8003da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f8ea 	bl	8003dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0201 	mvn.w	r2, #1
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fc fdbe 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	2b80      	cmp	r3, #128	; 0x80
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9d4 	bl	8004000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c66:	d10e      	bne.n	8003c86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d107      	bne.n	8003c86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f9c7 	bl	8004014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d10e      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d107      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f898 	bl	8003de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d10e      	bne.n	8003cde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d107      	bne.n	8003cde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f06f 0220 	mvn.w	r2, #32
 8003cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f987 	bl	8003fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cec:	d10f      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cfc:	d107      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f98d 	bl	8004028 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1c:	d10f      	bne.n	8003d3e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2c:	d107      	bne.n	8003d3e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f97f 	bl	800403c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4c:	d10f      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5c:	d107      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f971 	bl	8004050 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d7c:	d10f      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d8c:	d107      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f963 	bl	8004064 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a68      	ldr	r2, [pc, #416]	; (8003fac <TIM_Base_SetConfig+0x1b4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d02b      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a67      	ldr	r2, [pc, #412]	; (8003fb0 <TIM_Base_SetConfig+0x1b8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d027      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1e:	d023      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e26:	d01f      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a62      	ldr	r2, [pc, #392]	; (8003fb4 <TIM_Base_SetConfig+0x1bc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d01b      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a61      	ldr	r2, [pc, #388]	; (8003fb8 <TIM_Base_SetConfig+0x1c0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d017      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a60      	ldr	r2, [pc, #384]	; (8003fbc <TIM_Base_SetConfig+0x1c4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a5f      	ldr	r2, [pc, #380]	; (8003fc0 <TIM_Base_SetConfig+0x1c8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00f      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <TIM_Base_SetConfig+0x1cc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a5d      	ldr	r2, [pc, #372]	; (8003fc8 <TIM_Base_SetConfig+0x1d0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a5c      	ldr	r2, [pc, #368]	; (8003fcc <TIM_Base_SetConfig+0x1d4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_Base_SetConfig+0x70>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a5b      	ldr	r2, [pc, #364]	; (8003fd0 <TIM_Base_SetConfig+0x1d8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d108      	bne.n	8003e7a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4b      	ldr	r2, [pc, #300]	; (8003fac <TIM_Base_SetConfig+0x1b4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d043      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <TIM_Base_SetConfig+0x1b8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d03f      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e90:	d03b      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e98:	d037      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a45      	ldr	r2, [pc, #276]	; (8003fb4 <TIM_Base_SetConfig+0x1bc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d033      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a44      	ldr	r2, [pc, #272]	; (8003fb8 <TIM_Base_SetConfig+0x1c0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d02f      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a43      	ldr	r2, [pc, #268]	; (8003fbc <TIM_Base_SetConfig+0x1c4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d02b      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a42      	ldr	r2, [pc, #264]	; (8003fc0 <TIM_Base_SetConfig+0x1c8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d027      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a41      	ldr	r2, [pc, #260]	; (8003fc4 <TIM_Base_SetConfig+0x1cc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d023      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a40      	ldr	r2, [pc, #256]	; (8003fc8 <TIM_Base_SetConfig+0x1d0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01f      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a3f      	ldr	r2, [pc, #252]	; (8003fcc <TIM_Base_SetConfig+0x1d4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01b      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a3e      	ldr	r2, [pc, #248]	; (8003fd0 <TIM_Base_SetConfig+0x1d8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d017      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a3d      	ldr	r2, [pc, #244]	; (8003fd4 <TIM_Base_SetConfig+0x1dc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <TIM_Base_SetConfig+0x1e0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00f      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a3b      	ldr	r2, [pc, #236]	; (8003fdc <TIM_Base_SetConfig+0x1e4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a3a      	ldr	r2, [pc, #232]	; (8003fe0 <TIM_Base_SetConfig+0x1e8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a39      	ldr	r2, [pc, #228]	; (8003fe4 <TIM_Base_SetConfig+0x1ec>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_Base_SetConfig+0x112>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <TIM_Base_SetConfig+0x1f0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <TIM_Base_SetConfig+0x1b4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d023      	beq.n	8003f90 <TIM_Base_SetConfig+0x198>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <TIM_Base_SetConfig+0x1b8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d01f      	beq.n	8003f90 <TIM_Base_SetConfig+0x198>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a1e      	ldr	r2, [pc, #120]	; (8003fcc <TIM_Base_SetConfig+0x1d4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01b      	beq.n	8003f90 <TIM_Base_SetConfig+0x198>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <TIM_Base_SetConfig+0x1d8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d017      	beq.n	8003f90 <TIM_Base_SetConfig+0x198>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <TIM_Base_SetConfig+0x1dc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <TIM_Base_SetConfig+0x198>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a1b      	ldr	r2, [pc, #108]	; (8003fd8 <TIM_Base_SetConfig+0x1e0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00f      	beq.n	8003f90 <TIM_Base_SetConfig+0x198>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a1a      	ldr	r2, [pc, #104]	; (8003fdc <TIM_Base_SetConfig+0x1e4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x198>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <TIM_Base_SetConfig+0x1e8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x198>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <TIM_Base_SetConfig+0x1ec>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x198>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <TIM_Base_SetConfig+0x1f0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d103      	bne.n	8003f98 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	50012c00 	.word	0x50012c00
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	50000400 	.word	0x50000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	50000800 	.word	0x50000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	50000c00 	.word	0x50000c00
 8003fcc:	40013400 	.word	0x40013400
 8003fd0:	50013400 	.word	0x50013400
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	50014000 	.word	0x50014000
 8003fdc:	40014400 	.word	0x40014400
 8003fe0:	50014400 	.word	0x50014400
 8003fe4:	40014800 	.word	0x40014800
 8003fe8:	50014800 	.word	0x50014800

08003fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e03c      	b.n	8004104 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fc fbb6 	bl	8000810 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fb63 	bl	8004788 <USART_SetConfig>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e01b      	b.n	8004104 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040da:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ea:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fe2b 	bl	8004d58 <USART_CheckIdleState>
 8004102:	4603      	mov	r3, r0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_USART_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent (same amount to be received).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_TransmitReceive_IT(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint8_t *pRxData,
                                               uint16_t Size)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	807b      	strh	r3, [r7, #2]

  if (husart->State == HAL_USART_STATE_READY)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	f040 8105 	bne.w	8004332 <HAL_USART_TransmitReceive_IT+0x226>
  {
    if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_USART_TransmitReceive_IT+0x2e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_USART_TransmitReceive_IT+0x2e>
 8004134:	887b      	ldrh	r3, [r7, #2]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_USART_TransmitReceive_IT+0x32>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0fa      	b.n	8004334 <HAL_USART_TransmitReceive_IT+0x228>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_USART_TransmitReceive_IT+0x40>
 8004148:	2302      	movs	r3, #2
 800414a:	e0f3      	b.n	8004334 <HAL_USART_TransmitReceive_IT+0x228>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Disable the USART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d107      	bne.n	8004172 <HAL_USART_TransmitReceive_IT+0x66>
    {
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004170:	609a      	str	r2, [r3, #8]
    }

    /* Disable the USART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d107      	bne.n	8004190 <HAL_USART_TransmitReceive_IT+0x84>
    {
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418e:	609a      	str	r2, [r3, #8]
    }

    husart->pRxBuffPtr = pRxData;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
    husart->RxXferSize = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	869a      	strh	r2, [r3, #52]	; 0x34
    husart->RxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	86da      	strh	r2, [r3, #54]	; 0x36
    husart->pTxBuffPtr = pTxData;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	887a      	ldrh	r2, [r7, #2]
 80041b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d10c      	bne.n	80041d8 <HAL_USART_TransmitReceive_IT+0xcc>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <HAL_USART_TransmitReceive_IT+0xc4>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041cc:	871a      	strh	r2, [r3, #56]	; 0x38
 80041ce:	e027      	b.n	8004220 <HAL_USART_TransmitReceive_IT+0x114>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	871a      	strh	r2, [r3, #56]	; 0x38
 80041d6:	e023      	b.n	8004220 <HAL_USART_TransmitReceive_IT+0x114>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <HAL_USART_TransmitReceive_IT+0xec>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <HAL_USART_TransmitReceive_IT+0xe4>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	22ff      	movs	r2, #255	; 0xff
 80041ec:	871a      	strh	r2, [r3, #56]	; 0x38
 80041ee:	e017      	b.n	8004220 <HAL_USART_TransmitReceive_IT+0x114>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	227f      	movs	r2, #127	; 0x7f
 80041f4:	871a      	strh	r2, [r3, #56]	; 0x38
 80041f6:	e013      	b.n	8004220 <HAL_USART_TransmitReceive_IT+0x114>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004200:	d10b      	bne.n	800421a <HAL_USART_TransmitReceive_IT+0x10e>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <HAL_USART_TransmitReceive_IT+0x106>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	227f      	movs	r2, #127	; 0x7f
 800420e:	871a      	strh	r2, [r3, #56]	; 0x38
 8004210:	e006      	b.n	8004220 <HAL_USART_TransmitReceive_IT+0x114>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	223f      	movs	r2, #63	; 0x3f
 8004216:	871a      	strh	r2, [r3, #56]	; 0x38
 8004218:	e002      	b.n	8004220 <HAL_USART_TransmitReceive_IT+0x114>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	871a      	strh	r2, [r3, #56]	; 0x38

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX_RX;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2232      	movs	r2, #50	; 0x32
 800422a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Configure TxRx interrupt processing */
    if ((husart->FifoMode == USART_FIFOMODE_ENABLE) && (Size >= husart->NbRxDataToProcess))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004236:	d13b      	bne.n	80042b0 <HAL_USART_TransmitReceive_IT+0x1a4>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800423c:	887a      	ldrh	r2, [r7, #2]
 800423e:	429a      	cmp	r2, r3
 8004240:	d336      	bcc.n	80042b0 <HAL_USART_TransmitReceive_IT+0x1a4>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424a:	d10a      	bne.n	8004262 <HAL_USART_TransmitReceive_IT+0x156>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <HAL_USART_TransmitReceive_IT+0x156>
      {
        husart->TxISR = USART_TxISR_16BIT_FIFOEN;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a3a      	ldr	r2, [pc, #232]	; (8004340 <HAL_USART_TransmitReceive_IT+0x234>)
 8004258:	64da      	str	r2, [r3, #76]	; 0x4c
        husart->RxISR = USART_RxISR_16BIT_FIFOEN;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a39      	ldr	r2, [pc, #228]	; (8004344 <HAL_USART_TransmitReceive_IT+0x238>)
 800425e:	649a      	str	r2, [r3, #72]	; 0x48
 8004260:	e005      	b.n	800426e <HAL_USART_TransmitReceive_IT+0x162>
      }
      else
      {
        husart->TxISR = USART_TxISR_8BIT_FIFOEN;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a38      	ldr	r2, [pc, #224]	; (8004348 <HAL_USART_TransmitReceive_IT+0x23c>)
 8004266:	64da      	str	r2, [r3, #76]	; 0x4c
        husart->RxISR = USART_RxISR_8BIT_FIFOEN;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a38      	ldr	r2, [pc, #224]	; (800434c <HAL_USART_TransmitReceive_IT+0x240>)
 800426c:	649a      	str	r2, [r3, #72]	; 0x48
      }

      /* Process Locked */
      __HAL_UNLOCK(husart);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	609a      	str	r2, [r3, #8]

      if (husart->Init.Parity != USART_PARITY_NONE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_USART_TransmitReceive_IT+0x192>
      {
        /* Enable the USART Parity Error interrupt  */
        SET_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429c:	601a      	str	r2, [r3, #0]
      }

      /* Enable the TX and  RX FIFO Threshold interrupts */
      SET_BIT(husart->Instance->CR3, (USART_CR3_TXFTIE | USART_CR3_RXFTIE));
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 5284 	orr.w	r2, r2, #276824064	; 0x10800000
 80042ac:	609a      	str	r2, [r3, #8]
 80042ae:	e03e      	b.n	800432e <HAL_USART_TransmitReceive_IT+0x222>
    }
    else
    {
      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d10a      	bne.n	80042d0 <HAL_USART_TransmitReceive_IT+0x1c4>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_USART_TransmitReceive_IT+0x1c4>
      {
        husart->TxISR = USART_TxISR_16BIT;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a22      	ldr	r2, [pc, #136]	; (8004350 <HAL_USART_TransmitReceive_IT+0x244>)
 80042c6:	64da      	str	r2, [r3, #76]	; 0x4c
        husart->RxISR = USART_RxISR_16BIT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a22      	ldr	r2, [pc, #136]	; (8004354 <HAL_USART_TransmitReceive_IT+0x248>)
 80042cc:	649a      	str	r2, [r3, #72]	; 0x48
 80042ce:	e005      	b.n	80042dc <HAL_USART_TransmitReceive_IT+0x1d0>
      }
      else
      {
        husart->TxISR = USART_TxISR_8BIT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a21      	ldr	r2, [pc, #132]	; (8004358 <HAL_USART_TransmitReceive_IT+0x24c>)
 80042d4:	64da      	str	r2, [r3, #76]	; 0x4c
        husart->RxISR = USART_RxISR_8BIT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <HAL_USART_TransmitReceive_IT+0x250>)
 80042da:	649a      	str	r2, [r3, #72]	; 0x48
      }

      /* Process Locked */
      __HAL_UNLOCK(husart);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	609a      	str	r2, [r3, #8]

      /* Enable the USART Parity Error and USART Data Register not empty Interrupts */
      if (husart->Init.Parity != USART_PARITY_NONE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_USART_TransmitReceive_IT+0x202>
      {
        SET_BIT(husart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e007      	b.n	800431e <HAL_USART_TransmitReceive_IT+0x212>
      }
      else
      {
        SET_BIT(husart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0220 	orr.w	r2, r2, #32
 800431c:	601a      	str	r2, [r3, #0]
      }

      /* Enable the USART Transmit Data Register Empty Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800432c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <HAL_USART_TransmitReceive_IT+0x228>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	08004f75 	.word	0x08004f75
 8004344:	08005485 	.word	0x08005485
 8004348:	08004ed9 	.word	0x08004ed9
 800434c:	080052c9 	.word	0x080052c9
 8004350:	08004e57 	.word	0x08004e57
 8004354:	080051b1 	.word	0x080051b1
 8004358:	08004ddf 	.word	0x08004ddf
 800435c:	0800509d 	.word	0x0800509d

08004360 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	f642 030f 	movw	r3, #10255	; 0x280f
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d118      	bne.n	80043c2 <HAL_USART_IRQHandler+0x62>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d013      	beq.n	80043c2 <HAL_USART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_USART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_USART_IRQHandler+0x62>
    {
      if (husart->RxISR != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 814e 	beq.w	8004654 <HAL_USART_IRQHandler+0x2f4>
      {
        husart->RxISR(husart);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
      }
      return;
 80043c0:	e148      	b.n	8004654 <HAL_USART_IRQHandler+0x2f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8101 	beq.w	80045cc <HAL_USART_IRQHandler+0x26c>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4b92      	ldr	r3, [pc, #584]	; (8004618 <HAL_USART_IRQHandler+0x2b8>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_USART_IRQHandler+0x80>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80f6 	beq.w	80045cc <HAL_USART_IRQHandler+0x26c>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00e      	beq.n	8004408 <HAL_USART_IRQHandler+0xa8>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <HAL_USART_IRQHandler+0xa8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2201      	movs	r2, #1
 80043fa:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	f043 0201 	orr.w	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00e      	beq.n	8004430 <HAL_USART_IRQHandler+0xd0>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <HAL_USART_IRQHandler+0xd0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2202      	movs	r2, #2
 8004422:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	f043 0204 	orr.w	r2, r3, #4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00e      	beq.n	8004458 <HAL_USART_IRQHandler+0xf8>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d009      	beq.n	8004458 <HAL_USART_IRQHandler+0xf8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2204      	movs	r2, #4
 800444a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	f043 0202 	orr.w	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d013      	beq.n	800448a <HAL_USART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_USART_IRQHandler+0x116>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4b6a      	ldr	r3, [pc, #424]	; (8004618 <HAL_USART_IRQHandler+0x2b8>)
 8004470:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <HAL_USART_IRQHandler+0x12a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2208      	movs	r2, #8
 800447c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	f043 0208 	orr.w	r2, r3, #8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00f      	beq.n	80044b4 <HAL_USART_IRQHandler+0x154>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_USART_IRQHandler+0x154>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01b      	beq.n	80044f6 <HAL_USART_IRQHandler+0x196>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <HAL_USART_IRQHandler+0x196>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b22      	cmp	r3, #34	; 0x22
 80044d2:	d105      	bne.n	80044e0 <HAL_USART_IRQHandler+0x180>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044dc:	621a      	str	r2, [r3, #32]
        return;
 80044de:	e0be      	b.n	800465e <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044e8:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80ac 	beq.w	8004658 <HAL_USART_IRQHandler+0x2f8>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d011      	beq.n	800452e <HAL_USART_IRQHandler+0x1ce>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <HAL_USART_IRQHandler+0x1be>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <HAL_USART_IRQHandler+0x1ce>
      {
        if (husart->RxISR != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_USART_IRQHandler+0x1ce>
        {
          husart->RxISR(husart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d002      	beq.n	800454c <HAL_USART_IRQHandler+0x1ec>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d036      	beq.n	80045ba <HAL_USART_IRQHandler+0x25a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8b1 	bl	80046b4 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	d128      	bne.n	80045b2 <HAL_USART_IRQHandler+0x252>
        {
          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_USART_IRQHandler+0x21a>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456c:	2200      	movs	r2, #0
 800456e:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004574:	4618      	mov	r0, r3
 8004576:	f7fc fc7f 	bl	8000e78 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	2b00      	cmp	r3, #0
 8004580:	d013      	beq.n	80045aa <HAL_USART_IRQHandler+0x24a>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	4a25      	ldr	r2, [pc, #148]	; (800461c <HAL_USART_IRQHandler+0x2bc>)
 8004588:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fc72 	bl	8000e78 <HAL_DMA_Abort_IT>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_USART_IRQHandler+0x268>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80045a4:	4610      	mov	r0, r2
 80045a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	e00e      	b.n	80045c8 <HAL_USART_IRQHandler+0x268>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f878 	bl	80046a0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	e00a      	b.n	80045c8 <HAL_USART_IRQHandler+0x268>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f874 	bl	80046a0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	e006      	b.n	80045c8 <HAL_USART_IRQHandler+0x268>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f870 	bl	80046a0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 80045c6:	e047      	b.n	8004658 <HAL_USART_IRQHandler+0x2f8>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	bf00      	nop
    return;
 80045ca:	e045      	b.n	8004658 <HAL_USART_IRQHandler+0x2f8>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d012      	beq.n	80045fc <HAL_USART_IRQHandler+0x29c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <HAL_USART_IRQHandler+0x28a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_USART_IRQHandler+0x29c>
  {
    if (husart->TxISR != NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d034      	beq.n	800465c <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
    }
    return;
 80045fa:	e02f      	b.n	800465c <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <HAL_USART_IRQHandler+0x2c0>
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <HAL_USART_IRQHandler+0x2c0>
  {
    USART_EndTransmit_IT(husart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fd02 	bl	800501a <USART_EndTransmit_IT>
    return;
 8004616:	e022      	b.n	800465e <HAL_USART_IRQHandler+0x2fe>
 8004618:	10000001 	.word	0x10000001
 800461c:	080046f5 	.word	0x080046f5
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_USART_IRQHandler+0x2dc>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_USART_IRQHandler+0x2dc>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f001 f80f 	bl	8005658 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800463a:	e010      	b.n	800465e <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_USART_IRQHandler+0x2fe>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	da08      	bge.n	800465e <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fff9 	bl	8005644 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8004652:	e004      	b.n	800465e <HAL_USART_IRQHandler+0x2fe>
      return;
 8004654:	bf00      	nop
 8004656:	e002      	b.n	800465e <HAL_USART_IRQHandler+0x2fe>
    return;
 8004658:	bf00      	nop
 800465a:	e000      	b.n	800465e <HAL_USART_IRQHandler+0x2fe>
    return;
 800465c:	bf00      	nop
  }
}
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_USART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback can be implemented in the user file.
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80046ca:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	6093      	str	r3, [r2, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7ff ffc6 	bl	80046a0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800472c:	e018      	b.n	8004760 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d014      	beq.n	8004760 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7fc fa8f 	bl	8000c58 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <USART_WaitOnFlagUntilTimeout+0x30>
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d109      	bne.n	8004760 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e00f      	b.n	8004780 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4013      	ands	r3, r2
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	429a      	cmp	r2, r3
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	429a      	cmp	r2, r3
 800477c:	d0d7      	beq.n	800472e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004794:	2300      	movs	r3, #0
 8004796:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	4b96      	ldr	r3, [pc, #600]	; (8004a10 <USART_SetConfig+0x288>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	6979      	ldr	r1, [r7, #20]
 80047be:	430b      	orrs	r3, r1
 80047c0:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80047c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047c6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	4313      	orrs	r3, r2
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047f6:	f023 0309 	bic.w	r3, r3, #9
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	6979      	ldr	r1, [r7, #20]
 8004800:	430b      	orrs	r3, r1
 8004802:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f023 010f 	bic.w	r1, r3, #15
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7d      	ldr	r2, [pc, #500]	; (8004a14 <USART_SetConfig+0x28c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d120      	bne.n	8004866 <USART_SetConfig+0xde>
 8004824:	4b7c      	ldr	r3, [pc, #496]	; (8004a18 <USART_SetConfig+0x290>)
 8004826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b03      	cmp	r3, #3
 8004830:	d816      	bhi.n	8004860 <USART_SetConfig+0xd8>
 8004832:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <USART_SetConfig+0xb0>)
 8004834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004838:	08004849 	.word	0x08004849
 800483c:	0800484f 	.word	0x0800484f
 8004840:	08004855 	.word	0x08004855
 8004844:	0800485b 	.word	0x0800485b
 8004848:	2301      	movs	r3, #1
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e06b      	b.n	8004926 <USART_SetConfig+0x19e>
 800484e:	2304      	movs	r3, #4
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	e068      	b.n	8004926 <USART_SetConfig+0x19e>
 8004854:	2302      	movs	r3, #2
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e065      	b.n	8004926 <USART_SetConfig+0x19e>
 800485a:	2308      	movs	r3, #8
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e062      	b.n	8004926 <USART_SetConfig+0x19e>
 8004860:	2310      	movs	r3, #16
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e05f      	b.n	8004926 <USART_SetConfig+0x19e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6c      	ldr	r2, [pc, #432]	; (8004a1c <USART_SetConfig+0x294>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d132      	bne.n	80048d6 <USART_SetConfig+0x14e>
 8004870:	4b69      	ldr	r3, [pc, #420]	; (8004a18 <USART_SetConfig+0x290>)
 8004872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d828      	bhi.n	80048d0 <USART_SetConfig+0x148>
 800487e:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <USART_SetConfig+0xfc>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	080048b9 	.word	0x080048b9
 8004888:	080048d1 	.word	0x080048d1
 800488c:	080048d1 	.word	0x080048d1
 8004890:	080048d1 	.word	0x080048d1
 8004894:	080048bf 	.word	0x080048bf
 8004898:	080048d1 	.word	0x080048d1
 800489c:	080048d1 	.word	0x080048d1
 80048a0:	080048d1 	.word	0x080048d1
 80048a4:	080048c5 	.word	0x080048c5
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048d1 	.word	0x080048d1
 80048b4:	080048cb 	.word	0x080048cb
 80048b8:	2300      	movs	r3, #0
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e033      	b.n	8004926 <USART_SetConfig+0x19e>
 80048be:	2304      	movs	r3, #4
 80048c0:	77fb      	strb	r3, [r7, #31]
 80048c2:	e030      	b.n	8004926 <USART_SetConfig+0x19e>
 80048c4:	2302      	movs	r3, #2
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e02d      	b.n	8004926 <USART_SetConfig+0x19e>
 80048ca:	2308      	movs	r3, #8
 80048cc:	77fb      	strb	r3, [r7, #31]
 80048ce:	e02a      	b.n	8004926 <USART_SetConfig+0x19e>
 80048d0:	2310      	movs	r3, #16
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e027      	b.n	8004926 <USART_SetConfig+0x19e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a51      	ldr	r2, [pc, #324]	; (8004a20 <USART_SetConfig+0x298>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d120      	bne.n	8004922 <USART_SetConfig+0x19a>
 80048e0:	4b4d      	ldr	r3, [pc, #308]	; (8004a18 <USART_SetConfig+0x290>)
 80048e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ea:	2b30      	cmp	r3, #48	; 0x30
 80048ec:	d013      	beq.n	8004916 <USART_SetConfig+0x18e>
 80048ee:	2b30      	cmp	r3, #48	; 0x30
 80048f0:	d814      	bhi.n	800491c <USART_SetConfig+0x194>
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d00c      	beq.n	8004910 <USART_SetConfig+0x188>
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d810      	bhi.n	800491c <USART_SetConfig+0x194>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <USART_SetConfig+0x17c>
 80048fe:	2b10      	cmp	r3, #16
 8004900:	d003      	beq.n	800490a <USART_SetConfig+0x182>
 8004902:	e00b      	b.n	800491c <USART_SetConfig+0x194>
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e00d      	b.n	8004926 <USART_SetConfig+0x19e>
 800490a:	2304      	movs	r3, #4
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e00a      	b.n	8004926 <USART_SetConfig+0x19e>
 8004910:	2302      	movs	r3, #2
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e007      	b.n	8004926 <USART_SetConfig+0x19e>
 8004916:	2308      	movs	r3, #8
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e004      	b.n	8004926 <USART_SetConfig+0x19e>
 800491c:	2310      	movs	r3, #16
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e001      	b.n	8004926 <USART_SetConfig+0x19e>
 8004922:	2310      	movs	r3, #16
 8004924:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8004926:	7ffb      	ldrb	r3, [r7, #31]
 8004928:	2b08      	cmp	r3, #8
 800492a:	f200 81e2 	bhi.w	8004cf2 <USART_SetConfig+0x56a>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <USART_SetConfig+0x1ac>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004959 	.word	0x08004959
 8004938:	08004a25 	.word	0x08004a25
 800493c:	08004adb 	.word	0x08004adb
 8004940:	08004cf3 	.word	0x08004cf3
 8004944:	08004b8b 	.word	0x08004b8b
 8004948:	08004cf3 	.word	0x08004cf3
 800494c:	08004cf3 	.word	0x08004cf3
 8004950:	08004cf3 	.word	0x08004cf3
 8004954:	08004c41 	.word	0x08004c41
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8004958:	f7fd ffce 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 800495c:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	2b00      	cmp	r3, #0
 8004964:	d044      	beq.n	80049f0 <USART_SetConfig+0x268>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b01      	cmp	r3, #1
 800496c:	d03e      	beq.n	80049ec <USART_SetConfig+0x264>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b02      	cmp	r3, #2
 8004974:	d038      	beq.n	80049e8 <USART_SetConfig+0x260>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b03      	cmp	r3, #3
 800497c:	d032      	beq.n	80049e4 <USART_SetConfig+0x25c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b04      	cmp	r3, #4
 8004984:	d02c      	beq.n	80049e0 <USART_SetConfig+0x258>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b05      	cmp	r3, #5
 800498c:	d026      	beq.n	80049dc <USART_SetConfig+0x254>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2b06      	cmp	r3, #6
 8004994:	d020      	beq.n	80049d8 <USART_SetConfig+0x250>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b07      	cmp	r3, #7
 800499c:	d01a      	beq.n	80049d4 <USART_SetConfig+0x24c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d014      	beq.n	80049d0 <USART_SetConfig+0x248>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b09      	cmp	r3, #9
 80049ac:	d00e      	beq.n	80049cc <USART_SetConfig+0x244>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b0a      	cmp	r3, #10
 80049b4:	d008      	beq.n	80049c8 <USART_SetConfig+0x240>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b0b      	cmp	r3, #11
 80049bc:	d102      	bne.n	80049c4 <USART_SetConfig+0x23c>
 80049be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049c2:	e016      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e014      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	e012      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049cc:	2340      	movs	r3, #64	; 0x40
 80049ce:	e010      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049d0:	2320      	movs	r3, #32
 80049d2:	e00e      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049d4:	2310      	movs	r3, #16
 80049d6:	e00c      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049d8:	230c      	movs	r3, #12
 80049da:	e00a      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049dc:	230a      	movs	r3, #10
 80049de:	e008      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049e0:	2308      	movs	r3, #8
 80049e2:	e006      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049e4:	2306      	movs	r3, #6
 80049e6:	e004      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049e8:	2304      	movs	r3, #4
 80049ea:	e002      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e000      	b.n	80049f2 <USART_SetConfig+0x26a>
 80049f0:	2301      	movs	r3, #1
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	005a      	lsls	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	441a      	add	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0a:	61bb      	str	r3, [r7, #24]
      break;
 8004a0c:	e174      	b.n	8004cf8 <USART_SetConfig+0x570>
 8004a0e:	bf00      	nop
 8004a10:	cfff69f3 	.word	0xcfff69f3
 8004a14:	40013800 	.word	0x40013800
 8004a18:	46020c00 	.word	0x46020c00
 8004a1c:	40004400 	.word	0x40004400
 8004a20:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a24:	f7fd ff7c 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8004a28:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d044      	beq.n	8004abc <USART_SetConfig+0x334>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d03e      	beq.n	8004ab8 <USART_SetConfig+0x330>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d038      	beq.n	8004ab4 <USART_SetConfig+0x32c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d032      	beq.n	8004ab0 <USART_SetConfig+0x328>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d02c      	beq.n	8004aac <USART_SetConfig+0x324>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b05      	cmp	r3, #5
 8004a58:	d026      	beq.n	8004aa8 <USART_SetConfig+0x320>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b06      	cmp	r3, #6
 8004a60:	d020      	beq.n	8004aa4 <USART_SetConfig+0x31c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b07      	cmp	r3, #7
 8004a68:	d01a      	beq.n	8004aa0 <USART_SetConfig+0x318>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d014      	beq.n	8004a9c <USART_SetConfig+0x314>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b09      	cmp	r3, #9
 8004a78:	d00e      	beq.n	8004a98 <USART_SetConfig+0x310>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b0a      	cmp	r3, #10
 8004a80:	d008      	beq.n	8004a94 <USART_SetConfig+0x30c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b0b      	cmp	r3, #11
 8004a88:	d102      	bne.n	8004a90 <USART_SetConfig+0x308>
 8004a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a8e:	e016      	b.n	8004abe <USART_SetConfig+0x336>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e014      	b.n	8004abe <USART_SetConfig+0x336>
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	e012      	b.n	8004abe <USART_SetConfig+0x336>
 8004a98:	2340      	movs	r3, #64	; 0x40
 8004a9a:	e010      	b.n	8004abe <USART_SetConfig+0x336>
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	e00e      	b.n	8004abe <USART_SetConfig+0x336>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	e00c      	b.n	8004abe <USART_SetConfig+0x336>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	e00a      	b.n	8004abe <USART_SetConfig+0x336>
 8004aa8:	230a      	movs	r3, #10
 8004aaa:	e008      	b.n	8004abe <USART_SetConfig+0x336>
 8004aac:	2308      	movs	r3, #8
 8004aae:	e006      	b.n	8004abe <USART_SetConfig+0x336>
 8004ab0:	2306      	movs	r3, #6
 8004ab2:	e004      	b.n	8004abe <USART_SetConfig+0x336>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	e002      	b.n	8004abe <USART_SetConfig+0x336>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e000      	b.n	8004abe <USART_SetConfig+0x336>
 8004abc:	2301      	movs	r3, #1
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	005a      	lsls	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	61bb      	str	r3, [r7, #24]
      break;
 8004ad8:	e10e      	b.n	8004cf8 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d044      	beq.n	8004b6c <USART_SetConfig+0x3e4>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d03e      	beq.n	8004b68 <USART_SetConfig+0x3e0>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d038      	beq.n	8004b64 <USART_SetConfig+0x3dc>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d032      	beq.n	8004b60 <USART_SetConfig+0x3d8>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d02c      	beq.n	8004b5c <USART_SetConfig+0x3d4>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d026      	beq.n	8004b58 <USART_SetConfig+0x3d0>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2b06      	cmp	r3, #6
 8004b10:	d020      	beq.n	8004b54 <USART_SetConfig+0x3cc>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	2b07      	cmp	r3, #7
 8004b18:	d01a      	beq.n	8004b50 <USART_SetConfig+0x3c8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d014      	beq.n	8004b4c <USART_SetConfig+0x3c4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b09      	cmp	r3, #9
 8004b28:	d00e      	beq.n	8004b48 <USART_SetConfig+0x3c0>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2b0a      	cmp	r3, #10
 8004b30:	d008      	beq.n	8004b44 <USART_SetConfig+0x3bc>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b0b      	cmp	r3, #11
 8004b38:	d102      	bne.n	8004b40 <USART_SetConfig+0x3b8>
 8004b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b3e:	e016      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e014      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	e012      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b48:	2340      	movs	r3, #64	; 0x40
 8004b4a:	e010      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b4c:	2320      	movs	r3, #32
 8004b4e:	e00e      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b50:	2310      	movs	r3, #16
 8004b52:	e00c      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b54:	230c      	movs	r3, #12
 8004b56:	e00a      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b58:	230a      	movs	r3, #10
 8004b5a:	e008      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	e006      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b60:	2306      	movs	r3, #6
 8004b62:	e004      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b64:	2304      	movs	r3, #4
 8004b66:	e002      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e000      	b.n	8004b6e <USART_SetConfig+0x3e6>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4a79      	ldr	r2, [pc, #484]	; (8004d54 <USART_SetConfig+0x5cc>)
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	005a      	lsls	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	441a      	add	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	61bb      	str	r3, [r7, #24]
      break;
 8004b88:	e0b6      	b.n	8004cf8 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8004b8a:	f7fd fd93 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8004b8e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d044      	beq.n	8004c22 <USART_SetConfig+0x49a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d03e      	beq.n	8004c1e <USART_SetConfig+0x496>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d038      	beq.n	8004c1a <USART_SetConfig+0x492>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d032      	beq.n	8004c16 <USART_SetConfig+0x48e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d02c      	beq.n	8004c12 <USART_SetConfig+0x48a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	2b05      	cmp	r3, #5
 8004bbe:	d026      	beq.n	8004c0e <USART_SetConfig+0x486>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	2b06      	cmp	r3, #6
 8004bc6:	d020      	beq.n	8004c0a <USART_SetConfig+0x482>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	2b07      	cmp	r3, #7
 8004bce:	d01a      	beq.n	8004c06 <USART_SetConfig+0x47e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d014      	beq.n	8004c02 <USART_SetConfig+0x47a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b09      	cmp	r3, #9
 8004bde:	d00e      	beq.n	8004bfe <USART_SetConfig+0x476>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	2b0a      	cmp	r3, #10
 8004be6:	d008      	beq.n	8004bfa <USART_SetConfig+0x472>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	2b0b      	cmp	r3, #11
 8004bee:	d102      	bne.n	8004bf6 <USART_SetConfig+0x46e>
 8004bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bf4:	e016      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e014      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	e012      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004bfe:	2340      	movs	r3, #64	; 0x40
 8004c00:	e010      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004c02:	2320      	movs	r3, #32
 8004c04:	e00e      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004c06:	2310      	movs	r3, #16
 8004c08:	e00c      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	e00a      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004c0e:	230a      	movs	r3, #10
 8004c10:	e008      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004c12:	2308      	movs	r3, #8
 8004c14:	e006      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004c16:	2306      	movs	r3, #6
 8004c18:	e004      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	e002      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e000      	b.n	8004c24 <USART_SetConfig+0x49c>
 8004c22:	2301      	movs	r3, #1
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	005a      	lsls	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	441a      	add	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	61bb      	str	r3, [r7, #24]
      break;
 8004c3e:	e05b      	b.n	8004cf8 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d044      	beq.n	8004cd2 <USART_SetConfig+0x54a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d03e      	beq.n	8004cce <USART_SetConfig+0x546>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d038      	beq.n	8004cca <USART_SetConfig+0x542>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d032      	beq.n	8004cc6 <USART_SetConfig+0x53e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d02c      	beq.n	8004cc2 <USART_SetConfig+0x53a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d026      	beq.n	8004cbe <USART_SetConfig+0x536>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	d020      	beq.n	8004cba <USART_SetConfig+0x532>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	2b07      	cmp	r3, #7
 8004c7e:	d01a      	beq.n	8004cb6 <USART_SetConfig+0x52e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d014      	beq.n	8004cb2 <USART_SetConfig+0x52a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	2b09      	cmp	r3, #9
 8004c8e:	d00e      	beq.n	8004cae <USART_SetConfig+0x526>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b0a      	cmp	r3, #10
 8004c96:	d008      	beq.n	8004caa <USART_SetConfig+0x522>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	2b0b      	cmp	r3, #11
 8004c9e:	d102      	bne.n	8004ca6 <USART_SetConfig+0x51e>
 8004ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca4:	e016      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e014      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	e012      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cae:	2340      	movs	r3, #64	; 0x40
 8004cb0:	e010      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	e00e      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cb6:	2310      	movs	r3, #16
 8004cb8:	e00c      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cba:	230c      	movs	r3, #12
 8004cbc:	e00a      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	e008      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	e006      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cc6:	2306      	movs	r3, #6
 8004cc8:	e004      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	e002      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e000      	b.n	8004cd4 <USART_SetConfig+0x54c>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	005a      	lsls	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	441a      	add	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	61bb      	str	r3, [r7, #24]
      break;
 8004cf0:	e002      	b.n	8004cf8 <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	77bb      	strb	r3, [r7, #30]
      break;
 8004cf6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b0f      	cmp	r3, #15
 8004cfc:	d916      	bls.n	8004d2c <USART_SetConfig+0x5a4>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d04:	d212      	bcs.n	8004d2c <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f023 030f 	bic.w	r3, r3, #15
 8004d0e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	89fb      	ldrh	r3, [r7, #14]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	89fa      	ldrh	r2, [r7, #14]
 8004d28:	60da      	str	r2, [r3, #12]
 8004d2a:	e001      	b.n	8004d30 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8004d48:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	00f42400 	.word	0x00f42400

08004d58 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d66:	f7fb ff77 	bl	8000c58 <HAL_GetTick>
 8004d6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d10e      	bne.n	8004d98 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff fcc7 	bl	800471c <USART_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e01e      	b.n	8004dd6 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d10e      	bne.n	8004dc4 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fcb1 	bl	800471c <USART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e008      	b.n	8004dd6 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <USART_TxISR_8BIT>:
  *         data word length is less than 9 bits long.
  * @param  husart USART handle.
  * @retval None
  */
static void USART_TxISR_8BIT(USART_HandleTypeDef *husart)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  const HAL_USART_StateTypeDef state = husart->State;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dec:	73fb      	strb	r3, [r7, #15]

  /* Check that a Tx process is ongoing */
  if ((state == HAL_USART_STATE_BUSY_TX) ||
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b12      	cmp	r3, #18
 8004df2:	d002      	beq.n	8004dfa <USART_TxISR_8BIT+0x1c>
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b32      	cmp	r3, #50	; 0x32
 8004df8:	d127      	bne.n	8004e4a <USART_TxISR_8BIT+0x6c>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    if (husart->TxXferCount == 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d110      	bne.n	8004e26 <USART_TxISR_8BIT+0x48>
    {
      /* Disable the USART Transmit data register empty interrupt */
      __HAL_USART_DISABLE_IT(husart, USART_IT_TXE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e12:	601a      	str	r2, [r3, #0]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e22:	601a      	str	r2, [r3, #0]
      husart->Instance->TDR = (uint8_t)(*husart->pTxBuffPtr & (uint8_t)0xFF);
      husart->pTxBuffPtr++;
      husart->TxXferCount--;
    }
  }
}
 8004e24:	e011      	b.n	8004e4a <USART_TxISR_8BIT+0x6c>
      husart->Instance->TDR = (uint8_t)(*husart->pTxBuffPtr & (uint8_t)0xFF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	781a      	ldrb	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	629a      	str	r2, [r3, #40]	; 0x28
      husart->pTxBuffPtr++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	629a      	str	r2, [r3, #40]	; 0x28
      husart->TxXferCount--;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USART_TxISR_16BIT>:
  *         data word length is 9 bits long.
  * @param  husart USART handle.
  * @retval None
  */
static void USART_TxISR_16BIT(USART_HandleTypeDef *husart)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  const HAL_USART_StateTypeDef state = husart->State;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e64:	73fb      	strb	r3, [r7, #15]
  const uint16_t *tmp;

  if ((state == HAL_USART_STATE_BUSY_TX) ||
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b12      	cmp	r3, #18
 8004e6a:	d002      	beq.n	8004e72 <USART_TxISR_16BIT+0x1c>
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2b32      	cmp	r3, #50	; 0x32
 8004e70:	d12c      	bne.n	8004ecc <USART_TxISR_16BIT+0x76>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    if (husart->TxXferCount == 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d110      	bne.n	8004e9e <USART_TxISR_16BIT+0x48>
    {
      /* Disable the USART Transmit data register empty interrupt */
      __HAL_USART_DISABLE_IT(husart, USART_IT_TXE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e8a:	601a      	str	r2, [r3, #0]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e9a:	601a      	str	r2, [r3, #0]
      husart->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
      husart->pTxBuffPtr += 2U;
      husart->TxXferCount--;
    }
  }
}
 8004e9c:	e016      	b.n	8004ecc <USART_TxISR_16BIT+0x76>
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	60bb      	str	r3, [r7, #8]
      husart->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
      husart->pTxBuffPtr += 2U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	629a      	str	r2, [r3, #40]	; 0x28
      husart->TxXferCount--;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <USART_TxISR_8BIT_FIFOEN>:
  *         data word length is less than 9 bits long.
  * @param  husart USART handle.
  * @retval None
  */
static void USART_TxISR_8BIT_FIFOEN(USART_HandleTypeDef *husart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  const HAL_USART_StateTypeDef state = husart->State;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ee6:	737b      	strb	r3, [r7, #13]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if ((state == HAL_USART_STATE_BUSY_TX) ||
 8004ee8:	7b7b      	ldrb	r3, [r7, #13]
 8004eea:	2b12      	cmp	r3, #18
 8004eec:	d002      	beq.n	8004ef4 <USART_TxISR_8BIT_FIFOEN+0x1c>
 8004eee:	7b7b      	ldrb	r3, [r7, #13]
 8004ef0:	2b32      	cmp	r3, #50	; 0x32
 8004ef2:	d139      	bne.n	8004f68 <USART_TxISR_8BIT_FIFOEN+0x90>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    for (nb_tx_data = husart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004ef8:	81fb      	strh	r3, [r7, #14]
 8004efa:	e032      	b.n	8004f62 <USART_TxISR_8BIT_FIFOEN+0x8a>
    {
      if (husart->TxXferCount == 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d111      	bne.n	8004f2a <USART_TxISR_8BIT_FIFOEN+0x52>
      {
        /* Disable the TX FIFO threshold interrupt */
        __HAL_USART_DISABLE_IT(husart, USART_IT_TXFT);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004f14:	609a      	str	r2, [r3, #8]

        /* Enable the USART Transmit Complete Interrupt */
        __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f24:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8004f26:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8004f28:	e01e      	b.n	8004f68 <USART_TxISR_8BIT_FIFOEN+0x90>
      else if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXFNF) == SET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d111      	bne.n	8004f5c <USART_TxISR_8BIT_FIFOEN+0x84>
        husart->Instance->TDR = (uint8_t)(*husart->pTxBuffPtr & (uint8_t)0xFF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	781a      	ldrb	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
        husart->pTxBuffPtr++;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	629a      	str	r2, [r3, #40]	; 0x28
        husart->TxXferCount--;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    for (nb_tx_data = husart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f5c:	89fb      	ldrh	r3, [r7, #14]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	81fb      	strh	r3, [r7, #14]
 8004f62:	89fb      	ldrh	r3, [r7, #14]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1c9      	bne.n	8004efc <USART_TxISR_8BIT_FIFOEN+0x24>
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USART_TxISR_16BIT_FIFOEN>:
  *         data word length is 9 bits long.
  * @param  husart USART handle.
  * @retval None
  */
static void USART_TxISR_16BIT_FIFOEN(USART_HandleTypeDef *husart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  const HAL_USART_StateTypeDef state = husart->State;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f82:	737b      	strb	r3, [r7, #13]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if ((state == HAL_USART_STATE_BUSY_TX) ||
 8004f84:	7b7b      	ldrb	r3, [r7, #13]
 8004f86:	2b12      	cmp	r3, #18
 8004f88:	d002      	beq.n	8004f90 <USART_TxISR_16BIT_FIFOEN+0x1c>
 8004f8a:	7b7b      	ldrb	r3, [r7, #13]
 8004f8c:	2b32      	cmp	r3, #50	; 0x32
 8004f8e:	d13e      	bne.n	800500e <USART_TxISR_16BIT_FIFOEN+0x9a>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    for (nb_tx_data = husart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004f94:	81fb      	strh	r3, [r7, #14]
 8004f96:	e037      	b.n	8005008 <USART_TxISR_16BIT_FIFOEN+0x94>
    {
      if (husart->TxXferCount == 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d111      	bne.n	8004fc6 <USART_TxISR_16BIT_FIFOEN+0x52>
      {
        /* Disable the TX FIFO threshold interrupt */
        __HAL_USART_DISABLE_IT(husart, USART_IT_TXFT);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004fb0:	609a      	str	r2, [r3, #8]

        /* Enable the USART Transmit Complete Interrupt */
        __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc0:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8004fc2:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8004fc4:	e023      	b.n	800500e <USART_TxISR_16BIT_FIFOEN+0x9a>
      else if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXFNF) == SET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b80      	cmp	r3, #128	; 0x80
 8004fd2:	d116      	bne.n	8005002 <USART_TxISR_16BIT_FIFOEN+0x8e>
        tmp = (const uint16_t *) husart->pTxBuffPtr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	60bb      	str	r3, [r7, #8]
        husart->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe8:	629a      	str	r2, [r3, #40]	; 0x28
        husart->pTxBuffPtr += 2U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	1c9a      	adds	r2, r3, #2
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
        husart->TxXferCount--;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	85da      	strh	r2, [r3, #46]	; 0x2e
    for (nb_tx_data = husart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005002:	89fb      	ldrh	r3, [r7, #14]
 8005004:	3b01      	subs	r3, #1
 8005006:	81fb      	strh	r3, [r7, #14]
 8005008:	89fb      	ldrh	r3, [r7, #14]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1c4      	bne.n	8004f98 <USART_TxISR_16BIT_FIFOEN+0x24>
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005030:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b12      	cmp	r3, #18
 8005052:	d113      	bne.n	800507c <USART_EndTransmit_IT+0x62>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2208      	movs	r2, #8
 800505a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0208 	orr.w	r2, r2, #8
 800506a:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff faf5 	bl	8004664 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800507a:	e00b      	b.n	8005094 <USART_EndTransmit_IT+0x7a>
  else if (husart->RxXferCount == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <USART_EndTransmit_IT+0x7a>
    husart->State = HAL_USART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    HAL_USART_TxRxCpltCallback(husart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fafc 	bl	800468c <HAL_USART_TxRxCpltCallback>
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USART_RxISR_8BIT>:
  *         data word length is less than 9 bits long.
  * @param  husart USART handle
  * @retval None
  */
static void USART_RxISR_8BIT(USART_HandleTypeDef *husart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  const HAL_USART_StateTypeDef state = husart->State;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050aa:	75fb      	strb	r3, [r7, #23]
  uint16_t txdatacount;
  uint16_t uhMask = husart->Mask;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80050b0:	82bb      	strh	r3, [r7, #20]
  uint32_t txftie;

  if ((state == HAL_USART_STATE_BUSY_RX) ||
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
 80050b4:	2b22      	cmp	r3, #34	; 0x22
 80050b6:	d002      	beq.n	80050be <USART_RxISR_8BIT+0x22>
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b32      	cmp	r3, #50	; 0x32
 80050bc:	d174      	bne.n	80051a8 <USART_RxISR_8BIT+0x10c>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    *husart->pRxBuffPtr = (uint8_t)(husart->Instance->RDR & (uint8_t)uhMask);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	b2d9      	uxtb	r1, r3
 80050c6:	8abb      	ldrh	r3, [r7, #20]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	400a      	ands	r2, r1
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
    husart->pRxBuffPtr++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30
    husart->RxXferCount--;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	86da      	strh	r2, [r3, #54]	; 0x36

    if (husart->RxXferCount == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d14d      	bne.n	8005192 <USART_RxISR_8BIT+0xf6>
    {
      /* Disable the USART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005104:	601a      	str	r2, [r3, #0]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	609a      	str	r2, [r3, #8]

      /* Clear RxISR function pointer */
      husart->RxISR = NULL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	649a      	str	r2, [r3, #72]	; 0x48

      /* txftie and txdatacount are temporary variables for MISRAC2012-Rule-13.5 */
      txftie = READ_BIT(husart->Instance->CR3, USART_CR3_TXFTIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005126:	613b      	str	r3, [r7, #16]
      txdatacount = husart->TxXferCount;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800512c:	81fb      	strh	r3, [r7, #14]

      if (state == HAL_USART_STATE_BUSY_RX)
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	2b22      	cmp	r3, #34	; 0x22
 8005132:	d118      	bne.n	8005166 <USART_RxISR_8BIT+0xca>
      {
        /* Clear SPI slave underrun flag and discard transmit data */
        if (husart->SlaveMode == USART_SLAVEMODE_ENABLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10c      	bne.n	8005156 <USART_RxISR_8BIT+0xba>
        {
          __HAL_USART_CLEAR_UDRFLAG(husart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005144:	621a      	str	r2, [r3, #32]
          __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0210 	orr.w	r2, r2, #16
 8005154:	619a      	str	r2, [r3, #24]
        }

        /* Rx process is completed, restore husart->State to Ready */
        husart->State = HAL_USART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Rx Complete Callback */
        husart->RxCpltCallback(husart);
#else
        /* Call legacy weak Rx Complete Callback */
        HAL_USART_RxCpltCallback(husart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff fa8a 	bl	8004678 <HAL_USART_RxCpltCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005164:	e020      	b.n	80051a8 <USART_RxISR_8BIT+0x10c>
      else if ((READ_BIT(husart->Instance->CR1, USART_CR1_TCIE) != USART_CR1_TCIE) &&
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d019      	beq.n	80051a8 <USART_RxISR_8BIT+0x10c>
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800517a:	d015      	beq.n	80051a8 <USART_RxISR_8BIT+0x10c>
               (txftie != USART_CR3_TXFTIE) &&
 800517c:	89fb      	ldrh	r3, [r7, #14]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d112      	bne.n	80051a8 <USART_RxISR_8BIT+0x10c>
        husart->State = HAL_USART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        HAL_USART_TxRxCpltCallback(husart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fa7e 	bl	800468c <HAL_USART_TxRxCpltCallback>
}
 8005190:	e00a      	b.n	80051a8 <USART_RxISR_8BIT+0x10c>
    else if ((state == HAL_USART_STATE_BUSY_RX) &&
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b22      	cmp	r3, #34	; 0x22
 8005196:	d107      	bne.n	80051a8 <USART_RxISR_8BIT+0x10c>
             (husart->SlaveMode == USART_SLAVEMODE_DISABLE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((state == HAL_USART_STATE_BUSY_RX) &&
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <USART_RxISR_8BIT+0x10c>
      husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x00FF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	22ff      	movs	r2, #255	; 0xff
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051a8:	bf00      	nop
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <USART_RxISR_16BIT>:
  *         data word length is 9 bits long.
  * @param  husart USART handle
  * @retval None
  */
static void USART_RxISR_16BIT(USART_HandleTypeDef *husart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  const HAL_USART_StateTypeDef state = husart->State;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051be:	75fb      	strb	r3, [r7, #23]
  uint16_t txdatacount;
  uint16_t *tmp;
  uint16_t uhMask = husart->Mask;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80051c4:	82bb      	strh	r3, [r7, #20]
  uint32_t txftie;

  if ((state == HAL_USART_STATE_BUSY_RX) ||
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	2b22      	cmp	r3, #34	; 0x22
 80051ca:	d002      	beq.n	80051d2 <USART_RxISR_16BIT+0x22>
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
 80051ce:	2b32      	cmp	r3, #50	; 0x32
 80051d0:	d175      	bne.n	80052be <USART_RxISR_16BIT+0x10e>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    tmp = (uint16_t *) husart->pRxBuffPtr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	613b      	str	r3, [r7, #16]
    *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	b29a      	uxth	r2, r3
 80051e0:	8abb      	ldrh	r3, [r7, #20]
 80051e2:	4013      	ands	r3, r2
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	801a      	strh	r2, [r3, #0]
    husart->pRxBuffPtr += 2U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
    husart->RxXferCount--;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	86da      	strh	r2, [r3, #54]	; 0x36

    if (husart->RxXferCount == 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d14d      	bne.n	80052a8 <USART_RxISR_16BIT+0xf8>
    {
      /* Disable the USART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800521a:	601a      	str	r2, [r3, #0]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	609a      	str	r2, [r3, #8]

      /* Clear RxISR function pointer */
      husart->RxISR = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	649a      	str	r2, [r3, #72]	; 0x48

      /* txftie and txdatacount are temporary variables for MISRAC2012-Rule-13.5 */
      txftie = READ_BIT(husart->Instance->CR3, USART_CR3_TXFTIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800523c:	60fb      	str	r3, [r7, #12]
      txdatacount = husart->TxXferCount;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005242:	817b      	strh	r3, [r7, #10]

      if (state == HAL_USART_STATE_BUSY_RX)
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b22      	cmp	r3, #34	; 0x22
 8005248:	d118      	bne.n	800527c <USART_RxISR_16BIT+0xcc>
      {
        /* Clear SPI slave underrun flag and discard transmit data */
        if (husart->SlaveMode == USART_SLAVEMODE_ENABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	2b01      	cmp	r3, #1
 8005250:	d10c      	bne.n	800526c <USART_RxISR_16BIT+0xbc>
        {
          __HAL_USART_CLEAR_UDRFLAG(husart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800525a:	621a      	str	r2, [r3, #32]
          __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0210 	orr.w	r2, r2, #16
 800526a:	619a      	str	r2, [r3, #24]
        }

        /* Rx process is completed, restore husart->State to Ready */
        husart->State = HAL_USART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Rx Complete Callback */
        husart->RxCpltCallback(husart);
#else
        /* Call legacy weak Rx Complete Callback */
        HAL_USART_RxCpltCallback(husart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff f9ff 	bl	8004678 <HAL_USART_RxCpltCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800527a:	e020      	b.n	80052be <USART_RxISR_16BIT+0x10e>
      else if ((READ_BIT(husart->Instance->CR1, USART_CR1_TCIE) != USART_CR1_TCIE) &&
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d019      	beq.n	80052be <USART_RxISR_16BIT+0x10e>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005290:	d015      	beq.n	80052be <USART_RxISR_16BIT+0x10e>
               (txftie != USART_CR3_TXFTIE) &&
 8005292:	897b      	ldrh	r3, [r7, #10]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d112      	bne.n	80052be <USART_RxISR_16BIT+0x10e>
        husart->State = HAL_USART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        HAL_USART_TxRxCpltCallback(husart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff f9f3 	bl	800468c <HAL_USART_TxRxCpltCallback>
}
 80052a6:	e00a      	b.n	80052be <USART_RxISR_16BIT+0x10e>
    else if ((state == HAL_USART_STATE_BUSY_RX) &&
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	2b22      	cmp	r3, #34	; 0x22
 80052ac:	d107      	bne.n	80052be <USART_RxISR_16BIT+0x10e>
             (husart->SlaveMode == USART_SLAVEMODE_DISABLE))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((state == HAL_USART_STATE_BUSY_RX) &&
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d103      	bne.n	80052be <USART_RxISR_16BIT+0x10e>
      husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x00FF);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	22ff      	movs	r2, #255	; 0xff
 80052bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052be:	bf00      	nop
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <USART_RxISR_8BIT_FIFOEN>:
  *         data word length is less than 9 bits long.
  * @param  husart USART handle
  * @retval None
  */
static void USART_RxISR_8BIT_FIFOEN(USART_HandleTypeDef *husart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  HAL_USART_StateTypeDef state = husart->State;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052d6:	75fb      	strb	r3, [r7, #23]
  uint16_t txdatacount;
  uint16_t rxdatacount;
  uint16_t uhMask = husart->Mask;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80052dc:	827b      	strh	r3, [r7, #18]
  uint16_t nb_rx_data;
  uint32_t txftie;

  /* Check that a Rx process is ongoing */
  if ((state == HAL_USART_STATE_BUSY_RX) ||
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	2b22      	cmp	r3, #34	; 0x22
 80052e2:	d003      	beq.n	80052ec <USART_RxISR_8BIT_FIFOEN+0x24>
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	2b32      	cmp	r3, #50	; 0x32
 80052e8:	f040 80bc 	bne.w	8005464 <USART_RxISR_8BIT_FIFOEN+0x19c>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    for (nb_rx_data = husart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80052f0:	82bb      	strh	r3, [r7, #20]
 80052f2:	e084      	b.n	80053fe <USART_RxISR_8BIT_FIFOEN+0x136>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXFNE) == SET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d17a      	bne.n	80053f8 <USART_RxISR_8BIT_FIFOEN+0x130>
      {
        *husart->pRxBuffPtr = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	b2d9      	uxtb	r1, r3
 800530a:	8a7b      	ldrh	r3, [r7, #18]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	400a      	ands	r2, r1
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]
        husart->pRxBuffPtr++;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
        husart->RxXferCount--;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	86da      	strh	r2, [r3, #54]	; 0x36

        if (husart->RxXferCount == 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d153      	bne.n	80053e2 <USART_RxISR_8BIT_FIFOEN+0x11a>
        {
          /* Disable the USART Parity Error Interrupt */
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005348:	601a      	str	r2, [r3, #0]

          /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error)
             and RX FIFO Threshold interrupt */
          CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	6093      	str	r3, [r2, #8]

          /* Clear RxISR function pointer */
          husart->RxISR = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	649a      	str	r2, [r3, #72]	; 0x48

          /* txftie and txdatacount are temporary variables for MISRAC2012-Rule-13.5 */
          txftie = READ_BIT(husart->Instance->CR3, USART_CR3_TXFTIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800536e:	60fb      	str	r3, [r7, #12]
          txdatacount = husart->TxXferCount;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005374:	817b      	strh	r3, [r7, #10]

          if (state == HAL_USART_STATE_BUSY_RX)
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	2b22      	cmp	r3, #34	; 0x22
 800537a:	d11a      	bne.n	80053b2 <USART_RxISR_8BIT_FIFOEN+0xea>
          {
            /* Clear SPI slave underrun flag and discard transmit data */
            if (husart->SlaveMode == USART_SLAVEMODE_ENABLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	2b01      	cmp	r3, #1
 8005382:	d10c      	bne.n	800539e <USART_RxISR_8BIT_FIFOEN+0xd6>
            {
              __HAL_USART_CLEAR_UDRFLAG(husart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800538c:	621a      	str	r2, [r3, #32]
              __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699a      	ldr	r2, [r3, #24]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0210 	orr.w	r2, r2, #16
 800539c:	619a      	str	r2, [r3, #24]
            }

            /* Rx process is completed, restore husart->State to Ready */
            husart->State = HAL_USART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            state = HAL_USART_STATE_READY;
 80053a6:	2301      	movs	r3, #1
 80053a8:	75fb      	strb	r3, [r7, #23]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Rx Complete Callback */
            husart->RxCpltCallback(husart);
#else
            /* Call legacy weak Rx Complete Callback */
            HAL_USART_RxCpltCallback(husart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff f964 	bl	8004678 <HAL_USART_RxCpltCallback>
 80053b0:	e022      	b.n	80053f8 <USART_RxISR_8BIT_FIFOEN+0x130>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
          }
          else if ((READ_BIT(husart->Instance->CR1, USART_CR1_TCIE) != USART_CR1_TCIE) &&
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d01b      	beq.n	80053f8 <USART_RxISR_8BIT_FIFOEN+0x130>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053c6:	d017      	beq.n	80053f8 <USART_RxISR_8BIT_FIFOEN+0x130>
                   (txftie != USART_CR3_TXFTIE) &&
 80053c8:	897b      	ldrh	r3, [r7, #10]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d114      	bne.n	80053f8 <USART_RxISR_8BIT_FIFOEN+0x130>
                   (txdatacount == 0U))
          {
            /* TxRx process is completed, restore husart->State to Ready */
            husart->State = HAL_USART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            state = HAL_USART_STATE_READY;
 80053d6:	2301      	movs	r3, #1
 80053d8:	75fb      	strb	r3, [r7, #23]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Tx Rx Complete Callback */
            husart->TxRxCpltCallback(husart);
#else
            /* Call legacy weak Tx Rx Complete Callback */
            HAL_USART_TxRxCpltCallback(husart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff f956 	bl	800468c <HAL_USART_TxRxCpltCallback>
 80053e0:	e00a      	b.n	80053f8 <USART_RxISR_8BIT_FIFOEN+0x130>
          else
          {
            /* Nothing to do */
          }
        }
        else if ((state == HAL_USART_STATE_BUSY_RX) &&
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b22      	cmp	r3, #34	; 0x22
 80053e6:	d107      	bne.n	80053f8 <USART_RxISR_8BIT_FIFOEN+0x130>
                 (husart->SlaveMode == USART_SLAVEMODE_DISABLE))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        else if ((state == HAL_USART_STATE_BUSY_RX) &&
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d103      	bne.n	80053f8 <USART_RxISR_8BIT_FIFOEN+0x130>
        {
          /* Send dummy byte in order to generate the clock for the Slave to Send the next data */
          husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x00FF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	22ff      	movs	r2, #255	; 0xff
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28
    for (nb_rx_data = husart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80053f8:	8abb      	ldrh	r3, [r7, #20]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	82bb      	strh	r3, [r7, #20]
 80053fe:	8abb      	ldrh	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f47f af77 	bne.w	80052f4 <USART_RxISR_8BIT_FIFOEN+0x2c>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = husart->RxXferCount;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540a:	823b      	strh	r3, [r7, #16]
    if (((rxdatacount != 0U)) && (rxdatacount < husart->NbRxDataToProcess))
 800540c:	8a3b      	ldrh	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d031      	beq.n	8005476 <USART_RxISR_8BIT_FIFOEN+0x1ae>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005416:	8a3a      	ldrh	r2, [r7, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	d22c      	bcs.n	8005476 <USART_RxISR_8BIT_FIFOEN+0x1ae>
    {
      /* Disable the USART RXFT interrupt*/
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_RXFTIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800542a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      husart->RxISR = USART_RxISR_8BIT;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a14      	ldr	r2, [pc, #80]	; (8005480 <USART_RxISR_8BIT_FIFOEN+0x1b8>)
 8005430:	649a      	str	r2, [r3, #72]	; 0x48

      /* Enable the USART Data Register Not Empty interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0220 	orr.w	r2, r2, #32
 8005440:	601a      	str	r2, [r3, #0]

      if ((husart->TxXferCount == 0U) &&
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d114      	bne.n	8005476 <USART_RxISR_8BIT_FIFOEN+0x1ae>
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	2b32      	cmp	r3, #50	; 0x32
 8005450:	d111      	bne.n	8005476 <USART_RxISR_8BIT_FIFOEN+0x1ae>
          (state == HAL_USART_STATE_BUSY_TX_RX) &&
          (husart->SlaveMode == USART_SLAVEMODE_DISABLE))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (state == HAL_USART_STATE_BUSY_TX_RX) &&
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10d      	bne.n	8005476 <USART_RxISR_8BIT_FIFOEN+0x1ae>
      {
        /* Send dummy byte in order to generate the clock for the Slave to Send the next data */
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x00FF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	22ff      	movs	r2, #255	; 0xff
 8005460:	629a      	str	r2, [r3, #40]	; 0x28
    if (((rxdatacount != 0U)) && (rxdatacount < husart->NbRxDataToProcess))
 8005462:	e008      	b.n	8005476 <USART_RxISR_8BIT_FIFOEN+0x1ae>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0208 	orr.w	r2, r2, #8
 8005472:	619a      	str	r2, [r3, #24]
  }
}
 8005474:	e000      	b.n	8005478 <USART_RxISR_8BIT_FIFOEN+0x1b0>
    if (((rxdatacount != 0U)) && (rxdatacount < husart->NbRxDataToProcess))
 8005476:	bf00      	nop
}
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	0800509d 	.word	0x0800509d

08005484 <USART_RxISR_16BIT_FIFOEN>:
  *         data word length is 9 bits long.
  * @param  husart USART handle
  * @retval None
  */
static void USART_RxISR_16BIT_FIFOEN(USART_HandleTypeDef *husart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  HAL_USART_StateTypeDef state = husart->State;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005492:	77fb      	strb	r3, [r7, #31]
  uint16_t txdatacount;
  uint16_t rxdatacount;
  uint16_t *tmp;
  uint16_t uhMask = husart->Mask;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005498:	837b      	strh	r3, [r7, #26]
  uint16_t nb_rx_data;
  uint32_t txftie;

  /* Check that a Tx process is ongoing */
  if ((state == HAL_USART_STATE_BUSY_RX) ||
 800549a:	7ffb      	ldrb	r3, [r7, #31]
 800549c:	2b22      	cmp	r3, #34	; 0x22
 800549e:	d003      	beq.n	80054a8 <USART_RxISR_16BIT_FIFOEN+0x24>
 80054a0:	7ffb      	ldrb	r3, [r7, #31]
 80054a2:	2b32      	cmp	r3, #50	; 0x32
 80054a4:	f040 80bd 	bne.w	8005622 <USART_RxISR_16BIT_FIFOEN+0x19e>
      (state == HAL_USART_STATE_BUSY_TX_RX))
  {
    for (nb_rx_data = husart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80054ac:	83bb      	strh	r3, [r7, #28]
 80054ae:	e085      	b.n	80055bc <USART_RxISR_16BIT_FIFOEN+0x138>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXFNE) == SET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d17b      	bne.n	80055b6 <USART_RxISR_16BIT_FIFOEN+0x132>
      {
        tmp = (uint16_t *) husart->pRxBuffPtr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(husart->Instance->RDR & uhMask);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	8b7b      	ldrh	r3, [r7, #26]
 80054ce:	4013      	ands	r3, r2
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	801a      	strh	r2, [r3, #0]
        husart->pRxBuffPtr += 2U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	1c9a      	adds	r2, r3, #2
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
        husart->RxXferCount--;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	86da      	strh	r2, [r3, #54]	; 0x36

        if (husart->RxXferCount == 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d153      	bne.n	80055a0 <USART_RxISR_16BIT_FIFOEN+0x11c>
        {
          /* Disable the USART Parity Error Interrupt */
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005506:	601a      	str	r2, [r3, #0]

          /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error)
             and RX FIFO Threshold interrupt */
          CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	6093      	str	r3, [r2, #8]

          /* Clear RxISR function pointer */
          husart->RxISR = NULL;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	649a      	str	r2, [r3, #72]	; 0x48

          /* txftie and txdatacount are temporary variables for MISRAC2012-Rule-13.5 */
          txftie = READ_BIT(husart->Instance->CR3, USART_CR3_TXFTIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800552c:	613b      	str	r3, [r7, #16]
          txdatacount = husart->TxXferCount;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005532:	81fb      	strh	r3, [r7, #14]

          if (state == HAL_USART_STATE_BUSY_RX)
 8005534:	7ffb      	ldrb	r3, [r7, #31]
 8005536:	2b22      	cmp	r3, #34	; 0x22
 8005538:	d11a      	bne.n	8005570 <USART_RxISR_16BIT_FIFOEN+0xec>
          {
            /* Clear SPI slave underrun flag and discard transmit data */
            if (husart->SlaveMode == USART_SLAVEMODE_ENABLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	2b01      	cmp	r3, #1
 8005540:	d10c      	bne.n	800555c <USART_RxISR_16BIT_FIFOEN+0xd8>
            {
              __HAL_USART_CLEAR_UDRFLAG(husart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800554a:	621a      	str	r2, [r3, #32]
              __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0210 	orr.w	r2, r2, #16
 800555a:	619a      	str	r2, [r3, #24]
            }

            /* Rx process is completed, restore husart->State to Ready */
            husart->State = HAL_USART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            state = HAL_USART_STATE_READY;
 8005564:	2301      	movs	r3, #1
 8005566:	77fb      	strb	r3, [r7, #31]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Rx Complete Callback */
            husart->RxCpltCallback(husart);
#else
            /* Call legacy weak Rx Complete Callback */
            HAL_USART_RxCpltCallback(husart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff f885 	bl	8004678 <HAL_USART_RxCpltCallback>
 800556e:	e022      	b.n	80055b6 <USART_RxISR_16BIT_FIFOEN+0x132>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
          }
          else if ((READ_BIT(husart->Instance->CR1, USART_CR1_TCIE) != USART_CR1_TCIE) &&
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d01b      	beq.n	80055b6 <USART_RxISR_16BIT_FIFOEN+0x132>
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005584:	d017      	beq.n	80055b6 <USART_RxISR_16BIT_FIFOEN+0x132>
                   (txftie != USART_CR3_TXFTIE) &&
 8005586:	89fb      	ldrh	r3, [r7, #14]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d114      	bne.n	80055b6 <USART_RxISR_16BIT_FIFOEN+0x132>
                   (txdatacount == 0U))
          {
            /* TxRx process is completed, restore husart->State to Ready */
            husart->State = HAL_USART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            state = HAL_USART_STATE_READY;
 8005594:	2301      	movs	r3, #1
 8005596:	77fb      	strb	r3, [r7, #31]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Tx Rx Complete Callback */
            husart->TxRxCpltCallback(husart);
#else
            /* Call legacy weak Tx Rx Complete Callback */
            HAL_USART_TxRxCpltCallback(husart);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff f877 	bl	800468c <HAL_USART_TxRxCpltCallback>
 800559e:	e00a      	b.n	80055b6 <USART_RxISR_16BIT_FIFOEN+0x132>
          else
          {
            /* Nothing to do */
          }
        }
        else if ((state == HAL_USART_STATE_BUSY_RX) &&
 80055a0:	7ffb      	ldrb	r3, [r7, #31]
 80055a2:	2b22      	cmp	r3, #34	; 0x22
 80055a4:	d107      	bne.n	80055b6 <USART_RxISR_16BIT_FIFOEN+0x132>
                 (husart->SlaveMode == USART_SLAVEMODE_DISABLE))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        else if ((state == HAL_USART_STATE_BUSY_RX) &&
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <USART_RxISR_16BIT_FIFOEN+0x132>
        {
          /* Send dummy byte in order to generate the clock for the Slave to Send the next data */
          husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x00FF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	22ff      	movs	r2, #255	; 0xff
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28
    for (nb_rx_data = husart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80055b6:	8bbb      	ldrh	r3, [r7, #28]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	83bb      	strh	r3, [r7, #28]
 80055bc:	8bbb      	ldrh	r3, [r7, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f47f af76 	bne.w	80054b0 <USART_RxISR_16BIT_FIFOEN+0x2c>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = husart->RxXferCount;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c8:	833b      	strh	r3, [r7, #24]
    if (((rxdatacount != 0U)) && (rxdatacount < husart->NbRxDataToProcess))
 80055ca:	8b3b      	ldrh	r3, [r7, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d031      	beq.n	8005634 <USART_RxISR_16BIT_FIFOEN+0x1b0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80055d4:	8b3a      	ldrh	r2, [r7, #24]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d22c      	bcs.n	8005634 <USART_RxISR_16BIT_FIFOEN+0x1b0>
    {
      /* Disable the USART RXFT interrupt*/
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_RXFTIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80055e8:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      husart->RxISR = USART_RxISR_16BIT;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a14      	ldr	r2, [pc, #80]	; (8005640 <USART_RxISR_16BIT_FIFOEN+0x1bc>)
 80055ee:	649a      	str	r2, [r3, #72]	; 0x48

      /* Enable the USART Data Register Not Empty interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0220 	orr.w	r2, r2, #32
 80055fe:	601a      	str	r2, [r3, #0]

      if ((husart->TxXferCount == 0U) &&
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d114      	bne.n	8005634 <USART_RxISR_16BIT_FIFOEN+0x1b0>
 800560a:	7ffb      	ldrb	r3, [r7, #31]
 800560c:	2b32      	cmp	r3, #50	; 0x32
 800560e:	d111      	bne.n	8005634 <USART_RxISR_16BIT_FIFOEN+0x1b0>
          (state == HAL_USART_STATE_BUSY_TX_RX) &&
          (husart->SlaveMode == USART_SLAVEMODE_DISABLE))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (state == HAL_USART_STATE_BUSY_TX_RX) &&
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10d      	bne.n	8005634 <USART_RxISR_16BIT_FIFOEN+0x1b0>
      {
        /* Send dummy byte in order to generate the clock for the Slave to Send the next data */
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x00FF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	22ff      	movs	r2, #255	; 0xff
 800561e:	629a      	str	r2, [r3, #40]	; 0x28
    if (((rxdatacount != 0U)) && (rxdatacount < husart->NbRxDataToProcess))
 8005620:	e008      	b.n	8005634 <USART_RxISR_16BIT_FIFOEN+0x1b0>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0208 	orr.w	r2, r2, #8
 8005630:	619a      	str	r2, [r3, #24]
  }
}
 8005632:	e000      	b.n	8005636 <USART_RxISR_16BIT_FIFOEN+0x1b2>
    if (((rxdatacount != 0U)) && (rxdatacount < husart->NbRxDataToProcess))
 8005634:	bf00      	nop
}
 8005636:	bf00      	nop
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	080051b1 	.word	0x080051b1

08005644 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_USARTEx_EnableSlaveMode+0x16>
 800567e:	2302      	movs	r3, #2
 8005680:	e043      	b.n	800570a <HAL_USARTEx_EnableSlaveMode+0x9e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056c8:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40

  husart->State = HAL_USART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_USARTEx_DisableFifoMode+0x16>
 8005728:	2302      	movs	r3, #2
 800572a:	e027      	b.n	800577c <HAL_USARTEx_DisableFifoMode+0x66>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800575a:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800579c:	2302      	movs	r3, #2
 800579e:	e02d      	b.n	80057fc <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f84f 	bl	8005880 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8005818:	2302      	movs	r3, #2
 800581a:	e02d      	b.n	8005878 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f811 	bl	8005880 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800589c:	e02f      	b.n	80058fe <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800589e:	2308      	movs	r3, #8
 80058a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058a2:	2308      	movs	r3, #8
 80058a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80058ac:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80058bc:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	7b3a      	ldrb	r2, [r7, #12]
 80058ca:	4910      	ldr	r1, [pc, #64]	; (800590c <USARTEx_SetNbDataToProcess+0x8c>)
 80058cc:	5c8a      	ldrb	r2, [r1, r2]
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 80058d2:	7b3a      	ldrb	r2, [r7, #12]
 80058d4:	490e      	ldr	r1, [pc, #56]	; (8005910 <USARTEx_SetNbDataToProcess+0x90>)
 80058d6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80058dc:	b29a      	uxth	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	7b7a      	ldrb	r2, [r7, #13]
 80058e6:	4909      	ldr	r1, [pc, #36]	; (800590c <USARTEx_SetNbDataToProcess+0x8c>)
 80058e8:	5c8a      	ldrb	r2, [r1, r2]
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80058ee:	7b7a      	ldrb	r2, [r7, #13]
 80058f0:	4907      	ldr	r1, [pc, #28]	; (8005910 <USARTEx_SetNbDataToProcess+0x90>)
 80058f2:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	08005a5c 	.word	0x08005a5c
 8005910:	08005a64 	.word	0x08005a64

08005914 <__libc_init_array>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4d0d      	ldr	r5, [pc, #52]	; (800594c <__libc_init_array+0x38>)
 8005918:	2600      	movs	r6, #0
 800591a:	4c0d      	ldr	r4, [pc, #52]	; (8005950 <__libc_init_array+0x3c>)
 800591c:	1b64      	subs	r4, r4, r5
 800591e:	10a4      	asrs	r4, r4, #2
 8005920:	42a6      	cmp	r6, r4
 8005922:	d109      	bne.n	8005938 <__libc_init_array+0x24>
 8005924:	4d0b      	ldr	r5, [pc, #44]	; (8005954 <__libc_init_array+0x40>)
 8005926:	2600      	movs	r6, #0
 8005928:	4c0b      	ldr	r4, [pc, #44]	; (8005958 <__libc_init_array+0x44>)
 800592a:	f000 f81f 	bl	800596c <_init>
 800592e:	1b64      	subs	r4, r4, r5
 8005930:	10a4      	asrs	r4, r4, #2
 8005932:	42a6      	cmp	r6, r4
 8005934:	d105      	bne.n	8005942 <__libc_init_array+0x2e>
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	f855 3b04 	ldr.w	r3, [r5], #4
 800593c:	3601      	adds	r6, #1
 800593e:	4798      	blx	r3
 8005940:	e7ee      	b.n	8005920 <__libc_init_array+0xc>
 8005942:	f855 3b04 	ldr.w	r3, [r5], #4
 8005946:	3601      	adds	r6, #1
 8005948:	4798      	blx	r3
 800594a:	e7f2      	b.n	8005932 <__libc_init_array+0x1e>
 800594c:	08005a6c 	.word	0x08005a6c
 8005950:	08005a6c 	.word	0x08005a6c
 8005954:	08005a6c 	.word	0x08005a6c
 8005958:	08005a70 	.word	0x08005a70

0800595c <memset>:
 800595c:	4402      	add	r2, r0
 800595e:	4603      	mov	r3, r0
 8005960:	4293      	cmp	r3, r2
 8005962:	d100      	bne.n	8005966 <memset+0xa>
 8005964:	4770      	bx	lr
 8005966:	f803 1b01 	strb.w	r1, [r3], #1
 800596a:	e7f9      	b.n	8005960 <memset+0x4>

0800596c <_init>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr

08005978 <_fini>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	bf00      	nop
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr
